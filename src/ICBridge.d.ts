/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ICBridgeInterface extends ethers.utils.Interface {
  functions: {
    "confirm(bytes32,bytes32)": FunctionFragment;
    "refund(bytes32)": FunctionFragment;
    "transferIn(address,address,uint256,bytes32,uint64,uint64,bytes32)": FunctionFragment;
    "transferOut(address,address,uint256,bytes32,uint64,uint64,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "confirm",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "refund", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "transferIn",
    values: [
      string,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOut",
    values: [
      string,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;

  decodeFunctionResult(functionFragment: "confirm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOut",
    data: BytesLike
  ): Result;

  events: {};
}

export class ICBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ICBridgeInterface;

  functions: {
    confirm(
      _transferId: BytesLike,
      _preimage: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refund(
      _transferId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferIn(
      _dstAddress: string,
      _token: string,
      _amount: BigNumberish,
      _hashlock: BytesLike,
      _timelock: BigNumberish,
      _srcChainId: BigNumberish,
      _srcTransferId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOut(
      _bridge: string,
      _token: string,
      _amount: BigNumberish,
      _hashlock: BytesLike,
      _timelock: BigNumberish,
      _dstChinId: BigNumberish,
      _dstAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  confirm(
    _transferId: BytesLike,
    _preimage: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refund(
    _transferId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferIn(
    _dstAddress: string,
    _token: string,
    _amount: BigNumberish,
    _hashlock: BytesLike,
    _timelock: BigNumberish,
    _srcChainId: BigNumberish,
    _srcTransferId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOut(
    _bridge: string,
    _token: string,
    _amount: BigNumberish,
    _hashlock: BytesLike,
    _timelock: BigNumberish,
    _dstChinId: BigNumberish,
    _dstAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    confirm(
      _transferId: BytesLike,
      _preimage: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    refund(_transferId: BytesLike, overrides?: CallOverrides): Promise<void>;

    transferIn(
      _dstAddress: string,
      _token: string,
      _amount: BigNumberish,
      _hashlock: BytesLike,
      _timelock: BigNumberish,
      _srcChainId: BigNumberish,
      _srcTransferId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOut(
      _bridge: string,
      _token: string,
      _amount: BigNumberish,
      _hashlock: BytesLike,
      _timelock: BigNumberish,
      _dstChinId: BigNumberish,
      _dstAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    confirm(
      _transferId: BytesLike,
      _preimage: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refund(
      _transferId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferIn(
      _dstAddress: string,
      _token: string,
      _amount: BigNumberish,
      _hashlock: BytesLike,
      _timelock: BigNumberish,
      _srcChainId: BigNumberish,
      _srcTransferId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOut(
      _bridge: string,
      _token: string,
      _amount: BigNumberish,
      _hashlock: BytesLike,
      _timelock: BigNumberish,
      _dstChinId: BigNumberish,
      _dstAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    confirm(
      _transferId: BytesLike,
      _preimage: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      _transferId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferIn(
      _dstAddress: string,
      _token: string,
      _amount: BigNumberish,
      _hashlock: BytesLike,
      _timelock: BigNumberish,
      _srcChainId: BigNumberish,
      _srcTransferId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOut(
      _bridge: string,
      _token: string,
      _amount: BigNumberish,
      _hashlock: BytesLike,
      _timelock: BigNumberish,
      _dstChinId: BigNumberish,
      _dstAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
