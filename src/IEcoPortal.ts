/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IEcoPortal {
  export type TokenAmountStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type TokenAmountStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };

  export type CallStruct = {
    target: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
    value: PromiseOrValue<BigNumberish>;
  };

  export type CallStructOutput = [string, string, BigNumber] & {
    target: string;
    data: string;
    value: BigNumber;
  };

  export type RouteStruct = {
    salt: PromiseOrValue<BytesLike>;
    source: PromiseOrValue<BigNumberish>;
    destination: PromiseOrValue<BigNumberish>;
    inbox: PromiseOrValue<string>;
    tokens: IEcoPortal.TokenAmountStruct[];
    calls: IEcoPortal.CallStruct[];
  };

  export type RouteStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string,
    IEcoPortal.TokenAmountStructOutput[],
    IEcoPortal.CallStructOutput[]
  ] & {
    salt: string;
    source: BigNumber;
    destination: BigNumber;
    inbox: string;
    tokens: IEcoPortal.TokenAmountStructOutput[];
    calls: IEcoPortal.CallStructOutput[];
  };

  export type RewardStruct = {
    creator: PromiseOrValue<string>;
    prover: PromiseOrValue<string>;
    deadline: PromiseOrValue<BigNumberish>;
    nativeValue: PromiseOrValue<BigNumberish>;
    tokens: IEcoPortal.TokenAmountStruct[];
  };

  export type RewardStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    IEcoPortal.TokenAmountStructOutput[]
  ] & {
    creator: string;
    prover: string;
    deadline: BigNumber;
    nativeValue: BigNumber;
    tokens: IEcoPortal.TokenAmountStructOutput[];
  };

  export type IntentStruct = {
    route: IEcoPortal.RouteStruct;
    reward: IEcoPortal.RewardStruct;
  };

  export type IntentStructOutput = [
    IEcoPortal.RouteStructOutput,
    IEcoPortal.RewardStructOutput
  ] & {
    route: IEcoPortal.RouteStructOutput;
    reward: IEcoPortal.RewardStructOutput;
  };
}

export interface IEcoPortalInterface extends utils.Interface {
  functions: {
    "publishAndFund(((bytes32,uint256,uint256,address,(address,uint256)[],(address,bytes,uint256)[]),(address,address,uint256,uint256,(address,uint256)[])),bool)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "publishAndFund"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "publishAndFund",
    values: [IEcoPortal.IntentStruct, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "publishAndFund",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IEcoPortal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEcoPortalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    publishAndFund(
      intent: IEcoPortal.IntentStruct,
      allowPartial: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  publishAndFund(
    intent: IEcoPortal.IntentStruct,
    allowPartial: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    publishAndFund(
      intent: IEcoPortal.IntentStruct,
      allowPartial: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    publishAndFund(
      intent: IEcoPortal.IntentStruct,
      allowPartial: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    publishAndFund(
      intent: IEcoPortal.IntentStruct,
      allowPartial: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
