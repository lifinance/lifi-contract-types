/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IEco {
  export type TokenAmountStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type TokenAmountStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };

  export type CallStruct = {
    target: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
    value: PromiseOrValue<BigNumberish>;
  };

  export type CallStructOutput = [string, string, BigNumber] & {
    target: string;
    data: string;
    value: BigNumber;
  };

  export type RouteStruct = {
    salt: PromiseOrValue<BytesLike>;
    deadline: PromiseOrValue<BigNumberish>;
    portal: PromiseOrValue<string>;
    tokens: IEco.TokenAmountStruct[];
    calls: IEco.CallStruct[];
  };

  export type RouteStructOutput = [
    string,
    BigNumber,
    string,
    IEco.TokenAmountStructOutput[],
    IEco.CallStructOutput[]
  ] & {
    salt: string;
    deadline: BigNumber;
    portal: string;
    tokens: IEco.TokenAmountStructOutput[];
    calls: IEco.CallStructOutput[];
  };

  export type RewardStruct = {
    deadline: PromiseOrValue<BigNumberish>;
    creator: PromiseOrValue<string>;
    prover: PromiseOrValue<string>;
    nativeAmount: PromiseOrValue<BigNumberish>;
    tokens: IEco.TokenAmountStruct[];
  };

  export type RewardStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    IEco.TokenAmountStructOutput[]
  ] & {
    deadline: BigNumber;
    creator: string;
    prover: string;
    nativeAmount: BigNumber;
    tokens: IEco.TokenAmountStructOutput[];
  };
}

export interface IEcoInterface extends utils.Interface {
  functions: {
    "fulfill(bytes32,(bytes32,uint64,address,(address,uint256)[],(address,bytes,uint256)[]),bytes32,address)": FunctionFragment;
    "fund(uint64,bytes32,(uint64,address,address,uint256,(address,uint256)[]),bool)": FunctionFragment;
    "prove(address,uint64,bytes32[],bytes)": FunctionFragment;
    "publish(uint64,(bytes32,uint64,address,(address,uint256)[],(address,bytes,uint256)[]),(uint64,address,address,uint256,(address,uint256)[]))": FunctionFragment;
    "refund(uint64,bytes32,(uint64,address,address,uint256,(address,uint256)[]))": FunctionFragment;
    "withdraw(uint64,bytes32,(uint64,address,address,uint256,(address,uint256)[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "fulfill"
      | "fund"
      | "prove"
      | "publish"
      | "refund"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fulfill",
    values: [
      PromiseOrValue<BytesLike>,
      IEco.RouteStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fund",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      IEco.RewardStruct,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "prove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "publish",
    values: [PromiseOrValue<BigNumberish>, IEco.RouteStruct, IEco.RewardStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      IEco.RewardStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      IEco.RewardStruct
    ]
  ): string;

  decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "publish", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface IEco extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEcoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fulfill(
      intentHash: PromiseOrValue<BytesLike>,
      route: IEco.RouteStruct,
      rewardHash: PromiseOrValue<BytesLike>,
      claimant: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fund(
      destination: PromiseOrValue<BigNumberish>,
      routeHash: PromiseOrValue<BytesLike>,
      reward: IEco.RewardStruct,
      allowPartial: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    prove(
      prover: PromiseOrValue<string>,
      sourceChainDomainID: PromiseOrValue<BigNumberish>,
      intentHashes: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    publish(
      destination: PromiseOrValue<BigNumberish>,
      route: IEco.RouteStruct,
      reward: IEco.RewardStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    refund(
      destination: PromiseOrValue<BigNumberish>,
      routeHash: PromiseOrValue<BytesLike>,
      reward: IEco.RewardStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      destination: PromiseOrValue<BigNumberish>,
      routeHash: PromiseOrValue<BytesLike>,
      reward: IEco.RewardStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  fulfill(
    intentHash: PromiseOrValue<BytesLike>,
    route: IEco.RouteStruct,
    rewardHash: PromiseOrValue<BytesLike>,
    claimant: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fund(
    destination: PromiseOrValue<BigNumberish>,
    routeHash: PromiseOrValue<BytesLike>,
    reward: IEco.RewardStruct,
    allowPartial: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  prove(
    prover: PromiseOrValue<string>,
    sourceChainDomainID: PromiseOrValue<BigNumberish>,
    intentHashes: PromiseOrValue<BytesLike>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  publish(
    destination: PromiseOrValue<BigNumberish>,
    route: IEco.RouteStruct,
    reward: IEco.RewardStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  refund(
    destination: PromiseOrValue<BigNumberish>,
    routeHash: PromiseOrValue<BytesLike>,
    reward: IEco.RewardStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    destination: PromiseOrValue<BigNumberish>,
    routeHash: PromiseOrValue<BytesLike>,
    reward: IEco.RewardStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    fulfill(
      intentHash: PromiseOrValue<BytesLike>,
      route: IEco.RouteStruct,
      rewardHash: PromiseOrValue<BytesLike>,
      claimant: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    fund(
      destination: PromiseOrValue<BigNumberish>,
      routeHash: PromiseOrValue<BytesLike>,
      reward: IEco.RewardStruct,
      allowPartial: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    prove(
      prover: PromiseOrValue<string>,
      sourceChainDomainID: PromiseOrValue<BigNumberish>,
      intentHashes: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    publish(
      destination: PromiseOrValue<BigNumberish>,
      route: IEco.RouteStruct,
      reward: IEco.RewardStruct,
      overrides?: CallOverrides
    ): Promise<[string, string] & { intentHash: string; vault: string }>;

    refund(
      destination: PromiseOrValue<BigNumberish>,
      routeHash: PromiseOrValue<BytesLike>,
      reward: IEco.RewardStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      destination: PromiseOrValue<BigNumberish>,
      routeHash: PromiseOrValue<BytesLike>,
      reward: IEco.RewardStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    fulfill(
      intentHash: PromiseOrValue<BytesLike>,
      route: IEco.RouteStruct,
      rewardHash: PromiseOrValue<BytesLike>,
      claimant: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fund(
      destination: PromiseOrValue<BigNumberish>,
      routeHash: PromiseOrValue<BytesLike>,
      reward: IEco.RewardStruct,
      allowPartial: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    prove(
      prover: PromiseOrValue<string>,
      sourceChainDomainID: PromiseOrValue<BigNumberish>,
      intentHashes: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    publish(
      destination: PromiseOrValue<BigNumberish>,
      route: IEco.RouteStruct,
      reward: IEco.RewardStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    refund(
      destination: PromiseOrValue<BigNumberish>,
      routeHash: PromiseOrValue<BytesLike>,
      reward: IEco.RewardStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      destination: PromiseOrValue<BigNumberish>,
      routeHash: PromiseOrValue<BytesLike>,
      reward: IEco.RewardStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fulfill(
      intentHash: PromiseOrValue<BytesLike>,
      route: IEco.RouteStruct,
      rewardHash: PromiseOrValue<BytesLike>,
      claimant: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fund(
      destination: PromiseOrValue<BigNumberish>,
      routeHash: PromiseOrValue<BytesLike>,
      reward: IEco.RewardStruct,
      allowPartial: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    prove(
      prover: PromiseOrValue<string>,
      sourceChainDomainID: PromiseOrValue<BigNumberish>,
      intentHashes: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    publish(
      destination: PromiseOrValue<BigNumberish>,
      route: IEco.RouteStruct,
      reward: IEco.RewardStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      destination: PromiseOrValue<BigNumberish>,
      routeHash: PromiseOrValue<BytesLike>,
      reward: IEco.RewardStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      destination: PromiseOrValue<BigNumberish>,
      routeHash: PromiseOrValue<BytesLike>,
      reward: IEco.RewardStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
