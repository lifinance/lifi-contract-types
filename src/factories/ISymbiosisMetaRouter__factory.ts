/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ISymbiosisMetaRouter,
  ISymbiosisMetaRouterInterface,
} from "../ISymbiosisMetaRouter";

const _abi = [
  {
    type: "function",
    name: "metaRoute",
    inputs: [
      {
        name: "_metarouteTransaction",
        type: "tuple",
        internalType: "struct ISymbiosisMetaRouter.MetaRouteTransaction",
        components: [
          {
            name: "firstSwapCalldata",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "secondSwapCalldata",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "approvedTokens",
            type: "address[]",
            internalType: "address[]",
          },
          {
            name: "firstDexRouter",
            type: "address",
            internalType: "address",
          },
          {
            name: "secondDexRouter",
            type: "address",
            internalType: "address",
          },
          {
            name: "amount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "nativeIn",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "relayRecipient",
            type: "address",
            internalType: "address",
          },
          {
            name: "otherSideCalldata",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
] as const;

export class ISymbiosisMetaRouter__factory {
  static readonly abi = _abi;
  static createInterface(): ISymbiosisMetaRouterInterface {
    return new utils.Interface(_abi) as ISymbiosisMetaRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ISymbiosisMetaRouter {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ISymbiosisMetaRouter;
  }
}
