/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { ITheCompact, ITheCompactInterface } from "../ITheCompact";

const _abi = [
  {
    type: "function",
    name: "DOMAIN_SEPARATOR",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "__registerAllocator",
    inputs: [
      {
        name: "allocator",
        type: "address",
        internalType: "address",
      },
      {
        name: "proof",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "allocatorId",
        type: "uint96",
        internalType: "uint96",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "batchDepositAndRegisterFor",
    inputs: [
      {
        name: "recipient",
        type: "address",
        internalType: "address",
      },
      {
        name: "idsAndAmounts",
        type: "uint256[2][]",
        internalType: "uint256[2][]",
      },
      {
        name: "arbiter",
        type: "address",
        internalType: "address",
      },
      {
        name: "nonce",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "expires",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "typehash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "witness",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "claimhash",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "registeredAmounts",
        type: "uint256[]",
        internalType: "uint256[]",
      },
    ],
    stateMutability: "payable",
  },
] as const;

export class ITheCompact__factory {
  static readonly abi = _abi;
  static createInterface(): ITheCompactInterface {
    return new utils.Interface(_abi) as ITheCompactInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ITheCompact {
    return new Contract(address, _abi, signerOrProvider) as ITheCompact;
  }
}
