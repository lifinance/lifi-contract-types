/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  TestContractOne,
  TestContractOneInterface,
} from "../../ContractTestTwo.sol/TestContractOne";

const _abi = [
  {
    type: "function",
    name: "balances",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "deposit",
    inputs: [],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "withdraw",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "error",
    name: "NothingToWithdraw",
    inputs: [],
  },
  {
    type: "error",
    name: "WithdrawFailed",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b506102408061001c5f395ff3fe608060405260043610610033575f3560e01c806327e235e3146100375780633ccfd60b14610074578063d0e30db01461008a575b5f5ffd5b348015610042575f5ffd5b50610062610051366004610192565b5f6020819052908152604090205481565b60405190815260200160405180910390f35b34801561007f575f5ffd5b50610088610092565b005b61008861016d565b335f90815260208190526040812054908190036100db576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040515f90339083908381818185875af1925050503d805f811461011a576040519150601f19603f3d011682016040523d82523d5f602084013e61011f565b606091505b505090508061015a576040517f750b219c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050335f90815260208190526040812055565b335f908152602081905260408120805434929061018b9084906101cc565b9091555050565b5f602082840312156101a2575f5ffd5b813573ffffffffffffffffffffffffffffffffffffffff811681146101c5575f5ffd5b9392505050565b80820180821115610204577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9291505056fea26469706673582212201fd59b3a5cab43b7b43a03a69e168e207d9f6d3ac49df5c5fb4209d5675b07bc64736f6c634300081d0033";

type TestContractOneConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestContractOneConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestContractOne__factory extends ContractFactory {
  constructor(...args: TestContractOneConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestContractOne> {
    return super.deploy(overrides || {}) as Promise<TestContractOne>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestContractOne {
    return super.attach(address) as TestContractOne;
  }
  override connect(signer: Signer): TestContractOne__factory {
    return super.connect(signer) as TestContractOne__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestContractOneInterface {
    return new utils.Interface(_abi) as TestContractOneInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestContractOne {
    return new Contract(address, _abi, signerOrProvider) as TestContractOne;
  }
}
