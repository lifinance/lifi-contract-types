/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  TransferEventEmitter,
  TransferEventEmitterInterface,
} from "../TransferEventEmitter";

const _abi = [
  {
    type: "function",
    name: "emitTransferEvent",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "TokensTransferred",
    inputs: [],
    anonymous: false,
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060968061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063bbf2397414602d575b600080fd5b60336035565b005b6040517f2ec600c9806a8ba595ce14cf568dda3052971ad28dd2bc1b75baf21440ec95b690600090a156fea264697066735822122026182aba718306c1351c50285650622b490200f4df68a32d4439d9854817089c64736f6c63430008110033";

type TransferEventEmitterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TransferEventEmitterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TransferEventEmitter__factory extends ContractFactory {
  constructor(...args: TransferEventEmitterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TransferEventEmitter> {
    return super.deploy(overrides || {}) as Promise<TransferEventEmitter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TransferEventEmitter {
    return super.attach(address) as TransferEventEmitter;
  }
  override connect(signer: Signer): TransferEventEmitter__factory {
    return super.connect(signer) as TransferEventEmitter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TransferEventEmitterInterface {
    return new utils.Interface(_abi) as TransferEventEmitterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TransferEventEmitter {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TransferEventEmitter;
  }
}
