/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { ISyncSwapPool, ISyncSwapPoolInterface } from "../ISyncSwapPool";

const _abi = [
  {
    type: "function",
    name: "swap",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "sender",
        type: "address",
        internalType: "address",
      },
      {
        name: "callback",
        type: "address",
        internalType: "address",
      },
      {
        name: "callbackData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "tokenAmount",
        type: "tuple",
        internalType: "struct ISyncSwapPool.TokenAmount",
        components: [
          {
            name: "token",
            type: "address",
            internalType: "address",
          },
          {
            name: "amount",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    stateMutability: "nonpayable",
  },
] as const;

export class ISyncSwapPool__factory {
  static readonly abi = _abi;
  static createInterface(): ISyncSwapPoolInterface {
    return new utils.Interface(_abi) as ISyncSwapPoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ISyncSwapPool {
    return new Contract(address, _abi, signerOrProvider) as ISyncSwapPool;
  }
}
