/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { LDADiamond, LDADiamondInterface } from "../LDADiamond";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_contractOwner",
        type: "address",
        internalType: "address",
      },
      {
        name: "_diamondCutFacet",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "fallback",
    stateMutability: "payable",
  },
  {
    type: "receive",
    stateMutability: "payable",
  },
  {
    type: "event",
    name: "DiamondCut",
    inputs: [
      {
        name: "_diamondCut",
        type: "tuple[]",
        indexed: false,
        internalType: "struct LibDiamond.FacetCut[]",
        components: [
          {
            name: "facetAddress",
            type: "address",
            internalType: "address",
          },
          {
            name: "action",
            type: "uint8",
            internalType: "enum LibDiamond.FacetCutAction",
          },
          {
            name: "functionSelectors",
            type: "bytes4[]",
            internalType: "bytes4[]",
          },
        ],
      },
      {
        name: "_init",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "_calldata",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "CalldataEmptyButInitNotZero",
    inputs: [],
  },
  {
    type: "error",
    name: "FacetAddressIsNotZero",
    inputs: [],
  },
  {
    type: "error",
    name: "FacetAddressIsZero",
    inputs: [],
  },
  {
    type: "error",
    name: "FacetContainsNoCode",
    inputs: [],
  },
  {
    type: "error",
    name: "FunctionAlreadyExists",
    inputs: [],
  },
  {
    type: "error",
    name: "FunctionDoesNotExist",
    inputs: [],
  },
  {
    type: "error",
    name: "FunctionIsImmutable",
    inputs: [],
  },
  {
    type: "error",
    name: "IncorrectFacetCutAction",
    inputs: [],
  },
  {
    type: "error",
    name: "InitReverted",
    inputs: [],
  },
  {
    type: "error",
    name: "InitZeroButCalldataNotEmpty",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidConfig",
    inputs: [],
  },
  {
    type: "error",
    name: "NoSelectorsInFace",
    inputs: [],
  },
] as const;

const _bytecode =
  "";

type LDADiamondConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LDADiamondConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LDADiamond__factory extends ContractFactory {
  constructor(...args: LDADiamondConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _contractOwner: PromiseOrValue<string>,
    _diamondCutFacet: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<LDADiamond> {
    return super.deploy(
      _contractOwner,
      _diamondCutFacet,
      overrides || {}
    ) as Promise<LDADiamond>;
  }
  override getDeployTransaction(
    _contractOwner: PromiseOrValue<string>,
    _diamondCutFacet: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _contractOwner,
      _diamondCutFacet,
      overrides || {}
    );
  }
  override attach(address: string): LDADiamond {
    return super.attach(address) as LDADiamond;
  }
  override connect(signer: Signer): LDADiamond__factory {
    return super.connect(signer) as LDADiamond__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LDADiamondInterface {
    return new utils.Interface(_abi) as LDADiamondInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LDADiamond {
    return new Contract(address, _abi, signerOrProvider) as LDADiamond;
  }
}
