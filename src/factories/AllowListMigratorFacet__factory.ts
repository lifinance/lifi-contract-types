/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  AllowListMigratorFacet,
  AllowListMigratorFacetInterface,
} from "../AllowListMigratorFacet";

const _abi = [
  {
    type: "function",
    name: "isMigrated",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "migrate",
    inputs: [
      {
        name: "_contracts",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "_selectors",
        type: "bytes4[]",
        internalType: "bytes4[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "AllowListConfigMigrated",
    inputs: [
      {
        name: "contracts",
        type: "address[]",
        indexed: false,
        internalType: "address[]",
      },
      {
        name: "selectors",
        type: "bytes4[]",
        indexed: false,
        internalType: "bytes4[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "InvalidContract",
    inputs: [],
  },
  {
    type: "error",
    name: "UnAuthorized",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b5061097e8061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c8063b06faf6214610038578063ebc1b39a14610054575b5f5ffd5b610040610069565b604051901515815260200160405180910390f35b6100676100623660046107eb565b61009a565b005b5f6100957f7a8ac5d3b7183f220a0602439da45ea337311d699902d1ed11a3725a714e7f245460ff1690565b905090565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205473ffffffffffffffffffffffffffffffffffffffff1633146100e0576100e061018e565b61014b8484808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250506040805160208088028281018201909352878252909350879250869182918501908490808284375f9201919091525061022d92505050565b7fc5cce489487b9fa21e6cd7eb5cac0744fa8aaa651809e7a6fa8db33d129b04c9848484846040516101809493929190610857565b60405180910390a150505050565b5f80357fffffffff000000000000000000000000000000000000000000000000000000001681527fdf05114fe8fad5d7cd2d71c5651effc2a4c21f13ee8b4a462e2a3bd4e140c73e6020818152604080842033855290915290912054600160ff90911615151461022a576040517fbe24598300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b7f7a8ac5d3b7183f220a0602439da45ea337311d699902d1ed11a3725a714e7f24547f7a8ac5d3b7183f220a0602439da45ea337311d699902d1ed11a3725a714e7f1e9060ff161561027e57505050565b5f5b60028201548110156102fd575f8260020182815481106102a2576102a261091b565b5f91825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1682528490526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905550600101610280565b505f5b825181101561038b575f83828151811061031c5761031c61091b565b6020908102919091018101517fffffffff00000000000000000000000000000000000000000000000000000000165f90815260018086019092526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055919091019050610300565b50610399600282015f610775565b5f5b83518110156103ce576103c68482815181106103b9576103b961091b565b6020026020010151610435565b60010161039b565b505f5b8251811015610404576103fc8382815181106103ef576103ef61091b565b60200260200101516105b4565b6001016103d1565b5060060180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555050565b73ffffffffffffffffffffffffffffffffffffffff8116610482576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61048b816106e1565b6104c1576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81165f9081527f7a8ac5d3b7183f220a0602439da45ea337311d699902d1ed11a3725a714e7f1e602081905260409091205460ff1615610514575050565b73ffffffffffffffffffffffffffffffffffffffff9091165f8181526020838152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155600286018054918201815580855283852090910180547fffffffffffffffffffffffff0000000000000000000000000000000000000000168617905554938352600390940190529190912055565b7fffffffff0000000000000000000000000000000000000000000000000000000081165f9081527f7a8ac5d3b7183f220a0602439da45ea337311d699902d1ed11a3725a714e7f1f60205260409020547f7a8ac5d3b7183f220a0602439da45ea337311d699902d1ed11a3725a714e7f1e9060ff1615610632575050565b7fffffffff0000000000000000000000000000000000000000000000000000000082165f81815260018381016020908152604080842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168417905560058601805493840181558085528285206008850401805460e09990991c6004600790961686026101000a90810263ffffffff90910219909916989098179097559554938352930190925291902055565b6040805160178082528183019092525f9182919060208201818036833701905050905060175f60208301853c60208101517f10ff0000000000000000000000000000000000000000000000000000000000007fffffff000000000000000000000000000000000000000000000000000000000082160161076c57506023015160601c3b151592915050565b5050503b151590565b5080545f8255905f5260205f209081019061022a91905b8082111561079f575f815560010161078c565b5090565b5f5f83601f8401126107b3575f5ffd5b50813567ffffffffffffffff8111156107ca575f5ffd5b6020830191508360208260051b85010111156107e4575f5ffd5b9250929050565b5f5f5f5f604085870312156107fe575f5ffd5b843567ffffffffffffffff811115610814575f5ffd5b610820878288016107a3565b909550935050602085013567ffffffffffffffff81111561083f575f5ffd5b61084b878288016107a3565b95989497509550505050565b604080825281018490525f8560608301825b878110156108aa57823573ffffffffffffffffffffffffffffffffffffffff8116808214610895575f5ffd5b83525060209283019290910190600101610869565b50838103602080860191909152858252019050845f5b8581101561090e5781357fffffffff0000000000000000000000000000000000000000000000000000000081168082146108f8575f5ffd5b84525060209283019291909101906001016108c0565b5090979650505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea26469706673582212203f42e277ed5b443ceb92d1907f06c06c6d28d4252749ee7c9e43f1c20193910e64736f6c634300081d0033";

type AllowListMigratorFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AllowListMigratorFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AllowListMigratorFacet__factory extends ContractFactory {
  constructor(...args: AllowListMigratorFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AllowListMigratorFacet> {
    return super.deploy(overrides || {}) as Promise<AllowListMigratorFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AllowListMigratorFacet {
    return super.attach(address) as AllowListMigratorFacet;
  }
  override connect(signer: Signer): AllowListMigratorFacet__factory {
    return super.connect(signer) as AllowListMigratorFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AllowListMigratorFacetInterface {
    return new utils.Interface(_abi) as AllowListMigratorFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AllowListMigratorFacet {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AllowListMigratorFacet;
  }
}
