/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IWhitelistManagerFacet,
  IWhitelistManagerFacetInterface,
} from "../IWhitelistManagerFacet";

const _abi = [
  {
    type: "function",
    name: "batchSetContractSelectorWhitelist",
    inputs: [
      {
        name: "_contracts",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "_selectors",
        type: "bytes4[]",
        internalType: "bytes4[]",
      },
      {
        name: "_whitelisted",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getWhitelistedAddresses",
    inputs: [],
    outputs: [
      {
        name: "addresses",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getWhitelistedFunctionSelectors",
    inputs: [],
    outputs: [
      {
        name: "selectors",
        type: "bytes4[]",
        internalType: "bytes4[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getWhitelistedSelectorsForContract",
    inputs: [
      {
        name: "_contract",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "selectors",
        type: "bytes4[]",
        internalType: "bytes4[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isAddressWhitelisted",
    inputs: [
      {
        name: "_address",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "whitelisted",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isContractSelectorWhitelisted",
    inputs: [
      {
        name: "_contract",
        type: "address",
        internalType: "address",
      },
      {
        name: "_selector",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    outputs: [
      {
        name: "whitelisted",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isFunctionSelectorWhitelisted",
    inputs: [
      {
        name: "_selector",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    outputs: [
      {
        name: "whitelisted",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isMigrated",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "migrate",
    inputs: [
      {
        name: "_selectorsToRemove",
        type: "bytes4[]",
        internalType: "bytes4[]",
      },
      {
        name: "_contracts",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "_selectors",
        type: "bytes4[][]",
        internalType: "bytes4[][]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setContractSelectorWhitelist",
    inputs: [
      {
        name: "_contract",
        type: "address",
        internalType: "address",
      },
      {
        name: "_selector",
        type: "bytes4",
        internalType: "bytes4",
      },
      {
        name: "_whitelisted",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "AddressWhitelisted",
    inputs: [
      {
        name: "whitelistedAddress",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "ContractSelectorWhitelistChanged",
    inputs: [
      {
        name: "contractAddress",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "selector",
        type: "bytes4",
        indexed: true,
        internalType: "bytes4",
      },
      {
        name: "whitelisted",
        type: "bool",
        indexed: true,
        internalType: "bool",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "FunctionSelectorWhitelistChanged",
    inputs: [
      {
        name: "selector",
        type: "bytes4",
        indexed: true,
        internalType: "bytes4",
      },
      {
        name: "whitelisted",
        type: "bool",
        indexed: true,
        internalType: "bool",
      },
    ],
    anonymous: false,
  },
] as const;

export class IWhitelistManagerFacet__factory {
  static readonly abi = _abi;
  static createInterface(): IWhitelistManagerFacetInterface {
    return new utils.Interface(_abi) as IWhitelistManagerFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IWhitelistManagerFacet {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IWhitelistManagerFacet;
  }
}
