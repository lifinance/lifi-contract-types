/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { AlgebraFacet, AlgebraFacetInterface } from "../AlgebraFacet";

const _abi = [
  {
    type: "function",
    name: "algebraSwapCallback",
    inputs: [
      {
        name: "amount0Delta",
        type: "int256",
        internalType: "int256",
      },
      {
        name: "amount1Delta",
        type: "int256",
        internalType: "int256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "swapAlgebra",
    inputs: [
      {
        name: "swapData",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenIn",
        type: "address",
        internalType: "address",
      },
      {
        name: "amountIn",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "error",
    name: "AlgebraSwapUnexpected",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidCallData",
    inputs: [],
  },
  {
    type: "error",
    name: "UnexpectedCallbackSender",
    inputs: [
      {
        name: "actual",
        type: "address",
        internalType: "address",
      },
      {
        name: "expected",
        type: "address",
        internalType: "address",
      },
    ],
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b50610e158061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c80632c8958f614610038578063ff5943bf1461004d575b5f5ffd5b61004b6100463660046109b3565b610060565b005b61004b61005b366004610a8d565b6100c6565b610068610478565b6100748484848461050f565b6100c07f12d110a66e0c5763793e5d1e64ab8a58a55eab5b86fb83d032af88fce80e258480547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b50505050565b83516040805160208088018252928701830192810192909252818101905280518051601482018084525160158301808552516029840180865251602a9094018552606092831c935f92831a1515939190911c911a151583158061013d575073ffffffffffffffffffffffffffffffffffffffff8216155b15610174576040517f1c49f4d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff8916036101b3576101b373ffffffffffffffffffffffffffffffffffffffff8816333089610566565b7f12d110a66e0c5763793e5d1e64ab8a58a55eab5b86fb83d032af88fce80e258480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff86161790558015610314578373ffffffffffffffffffffffffffffffffffffffff1663713346943084868a886102615761025c600173fffd8963efd1fc6a506488495d951d5263988d26610bd2565b610271565b6102716401000276a36001610c04565b8d60405160200161029e919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6040516020818303038152906040526040518763ffffffff1660e01b81526004016102ce96959493929190610c7c565b60408051808303815f875af11580156102e9573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061030d9190610cfc565b50506103fe565b8373ffffffffffffffffffffffffffffffffffffffff1663128acb088385898761035c57610357600173fffd8963efd1fc6a506488495d951d5263988d26610bd2565b61036c565b61036c6401000276a36001610c04565b6040805173ffffffffffffffffffffffffffffffffffffffff8f166020820152016040516020818303038152906040526040518663ffffffff1660e01b81526004016103bc959493929190610d1e565b60408051808303815f875af11580156103d7573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103fb9190610cfc565b50505b7f12d110a66e0c5763793e5d1e64ab8a58a55eab5b86fb83d032af88fce80e25845473ffffffffffffffffffffffffffffffffffffffff161561046d576040517fef7e539800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050505050565b7f12d110a66e0c5763793e5d1e64ab8a58a55eab5b86fb83d032af88fce80e25845473ffffffffffffffffffffffffffffffffffffffff1633811461050c576040517f48f89ac500000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff821660248201526044015b60405180910390fd5b50565b5f5f851361051d578361051f565b845b90505f811361052e57506100c0565b5f61053b83850185610d76565b905061055e73ffffffffffffffffffffffffffffffffffffffff82163384610642565b505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526100c09085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261069d565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106989084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016105c0565b505050565b5f6106fe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166107aa9092919063ffffffff16565b905080515f148061071e57508080602001905181019061071e9190610d98565b610698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610503565b60606107b884845f856107c0565b949350505050565b606082471015610852576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610503565b5f5f8673ffffffffffffffffffffffffffffffffffffffff16858760405161087a9190610db7565b5f6040518083038185875af1925050503d805f81146108b4576040519150601f19603f3d011682016040523d82523d5f602084013e6108b9565b606091505b50915091506108ca878383876108d5565b979650505050505050565b6060831561096a5782515f036109635773ffffffffffffffffffffffffffffffffffffffff85163b610963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610503565b50816107b8565b6107b8838381511561097f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105039190610dcd565b5f5f5f5f606085870312156109c6575f5ffd5b8435935060208501359250604085013567ffffffffffffffff8111156109ea575f5ffd5b8501601f810187136109fa575f5ffd5b803567ffffffffffffffff811115610a10575f5ffd5b876020828401011115610a21575f5ffd5b949793965060200194505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b73ffffffffffffffffffffffffffffffffffffffff8116811461050c575f5ffd5b8035610a8881610a5c565b919050565b5f5f5f5f60808587031215610aa0575f5ffd5b843567ffffffffffffffff811115610ab6575f5ffd5b8501601f81018713610ac6575f5ffd5b803567ffffffffffffffff811115610ae057610ae0610a2f565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff82111715610b4c57610b4c610a2f565b604052818152828201602001891015610b63575f5ffd5b816020840160208301375f60208383010152809650505050610b8760208601610a7d565b9250610b9560408601610a7d565b9396929550929360600135925050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b73ffffffffffffffffffffffffffffffffffffffff8281168282160390811115610bfe57610bfe610ba5565b92915050565b73ffffffffffffffffffffffffffffffffffffffff8181168382160190811115610bfe57610bfe610ba5565b5f81518084528060208401602086015e5f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b73ffffffffffffffffffffffffffffffffffffffff8716815273ffffffffffffffffffffffffffffffffffffffff86166020820152841515604082015283606082015273ffffffffffffffffffffffffffffffffffffffff8316608082015260c060a08201525f610cf060c0830184610c30565b98975050505050505050565b5f5f60408385031215610d0d575f5ffd5b505080516020909101519092909150565b73ffffffffffffffffffffffffffffffffffffffff86168152841515602082015283604082015273ffffffffffffffffffffffffffffffffffffffff8316606082015260a060808201525f6108ca60a0830184610c30565b5f60208284031215610d86575f5ffd5b8135610d9181610a5c565b9392505050565b5f60208284031215610da8575f5ffd5b81518015158114610d91575f5ffd5b5f82518060208501845e5f920191825250919050565b602081525f610d916020830184610c3056fea2646970667358221220870c90a0ce068ba852f11f0a99bbd91288d1e02fcd16ce6f4ed074d28775ef3064736f6c634300081d0033";

type AlgebraFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AlgebraFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AlgebraFacet__factory extends ContractFactory {
  constructor(...args: AlgebraFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AlgebraFacet> {
    return super.deploy(overrides || {}) as Promise<AlgebraFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AlgebraFacet {
    return super.attach(address) as AlgebraFacet;
  }
  override connect(signer: Signer): AlgebraFacet__factory {
    return super.connect(signer) as AlgebraFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AlgebraFacetInterface {
    return new utils.Interface(_abi) as AlgebraFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AlgebraFacet {
    return new Contract(address, _abi, signerOrProvider) as AlgebraFacet;
  }
}
