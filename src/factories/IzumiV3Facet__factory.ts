/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { IzumiV3Facet, IzumiV3FacetInterface } from "../IzumiV3Facet";

const _abi = [
  {
    type: "function",
    name: "swapIzumiV3",
    inputs: [
      {
        name: "swapData",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenIn",
        type: "address",
        internalType: "address",
      },
      {
        name: "amountIn",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "swapX2YCallback",
    inputs: [
      {
        name: "amountX",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "swapY2XCallback",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "amountY",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "error",
    name: "InvalidCallData",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidReceiver",
    inputs: [],
  },
  {
    type: "error",
    name: "IzumiV3SwapCallbackNotPositiveAmount",
    inputs: [],
  },
  {
    type: "error",
    name: "IzumiV3SwapCallbackUnknownSource",
    inputs: [],
  },
  {
    type: "error",
    name: "IzumiV3SwapUnexpected",
    inputs: [],
  },
  {
    type: "error",
    name: "NullAddrIsNotAnERC20Token",
    inputs: [],
  },
  {
    type: "error",
    name: "UnexpectedCallbackSender",
    inputs: [
      {
        name: "actual",
        type: "address",
        internalType: "address",
      },
      {
        name: "expected",
        type: "address",
        internalType: "address",
      },
    ],
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b50610af08061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80630ff3cc86146100435780631878068414610068578063d3e1c2841461007d575b5f5ffd5b61005661005136600461079a565b610090565b60405190815260200160405180910390f35b61007b6100763660046108b2565b610413565b005b61007b61008b3660046108b2565b610424565b8351604080516020808801825292870183019281019290925281810190528051805160148201808452516015830180855251602990930184525f9392606092831c9291851a911c8215806100f8575073ffffffffffffffffffffffffffffffffffffffff8116155b8061011257506fffffffffffffffffffffffffffffffff86115b15610149576040517f1c49f4d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff891603610172576101728733308961042f565b7f12d110a66e0c5763793e5d1e64ab8a58a55eab5b86fb83d032af88fce80e258480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff8316016102d95773ffffffffffffffffffffffffffffffffffffffff831663857f812f82886102447ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3cb00600161095b565b6040805173ffffffffffffffffffffffffffffffffffffffff8e166020820152016040516020818303038152906040526040518563ffffffff1660e01b815260040161029394939291906109a2565b60408051808303815f875af11580156102ae573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102d29190610a35565b5050610396565b73ffffffffffffffffffffffffffffffffffffffff8316632c48125282886103056001620c3500610a57565b6040805173ffffffffffffffffffffffffffffffffffffffff8e166020820152016040516020818303038152906040526040518563ffffffff1660e01b815260040161035494939291906109a2565b60408051808303815f875af115801561036f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103939190610a35565b50505b7f12d110a66e0c5763793e5d1e64ab8a58a55eab5b86fb83d032af88fce80e25845473ffffffffffffffffffffffffffffffffffffffff1615610405576040517fc2284f3700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505f98975050505050505050565b61041e8483836104eb565b50505050565b61041e8383836104eb565b73ffffffffffffffffffffffffffffffffffffffff841661047c576040517fd1bebf0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166104c9576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61041e73ffffffffffffffffffffffffffffffffffffffff8516848484610592565b6104f36105ea565b825f0361052c576040517f28ecba3200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f61053982840184610a98565b9050610546813386610680565b61041e7f12d110a66e0c5763793e5d1e64ab8a58a55eab5b86fb83d032af88fce80e258480547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60405181606052826040528360601b602c526f23b872dd000000000000000000000000600c5260205f6064601c5f895af13d1560015f511417166105dd57637939f4245f526004601cfd5b5f60605260405250505050565b7f12d110a66e0c5763793e5d1e64ab8a58a55eab5b86fb83d032af88fce80e25845473ffffffffffffffffffffffffffffffffffffffff1633811461067d576040517f48f89ac500000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8216602482015260440160405180910390fd5b50565b73ffffffffffffffffffffffffffffffffffffffff82166106cd576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106ee73ffffffffffffffffffffffffffffffffffffffff841683836106f3565b505050565b81601452806034526fa9059cbb0000000000000000000000005f5260205f604460105f875af13d1560015f51141716610733576390b8ec185f526004601cfd5b5f603452505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b73ffffffffffffffffffffffffffffffffffffffff8116811461067d575f5ffd5b803561079581610769565b919050565b5f5f5f5f608085870312156107ad575f5ffd5b843567ffffffffffffffff8111156107c3575f5ffd5b8501601f810187136107d3575f5ffd5b803567ffffffffffffffff8111156107ed576107ed61073c565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff821117156108595761085961073c565b604052818152828201602001891015610870575f5ffd5b816020840160208301375f602083830101528096505050506108946020860161078a565b92506108a26040860161078a565b9396929550929360600135925050565b5f5f5f5f606085870312156108c5575f5ffd5b8435935060208501359250604085013567ffffffffffffffff8111156108e9575f5ffd5b8501601f810187136108f9575f5ffd5b803567ffffffffffffffff81111561090f575f5ffd5b876020828401011115610920575f5ffd5b949793965060200194505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b600281810b9083900b01627fffff81137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008212171561099c5761099c61092e565b92915050565b73ffffffffffffffffffffffffffffffffffffffff851681526fffffffffffffffffffffffffffffffff841660208201528260020b6040820152608060608201525f8251806080840152806020850160a085015e5f60a0828501015260a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011684010191505095945050505050565b5f5f60408385031215610a46575f5ffd5b505080516020909101519092909150565b600282810b9082900b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213171561099c5761099c61092e565b5f60208284031215610aa8575f5ffd5b8135610ab381610769565b939250505056fea26469706673582212206dde09678ba059b19e854368f09625b40c0a6c7206e5363e6c09b3fd2eb773ea64736f6c634300081d0033";

type IzumiV3FacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IzumiV3FacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IzumiV3Facet__factory extends ContractFactory {
  constructor(...args: IzumiV3FacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<IzumiV3Facet> {
    return super.deploy(overrides || {}) as Promise<IzumiV3Facet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): IzumiV3Facet {
    return super.attach(address) as IzumiV3Facet;
  }
  override connect(signer: Signer): IzumiV3Facet__factory {
    return super.connect(signer) as IzumiV3Facet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IzumiV3FacetInterface {
    return new utils.Interface(_abi) as IzumiV3FacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IzumiV3Facet {
    return new Contract(address, _abi, signerOrProvider) as IzumiV3Facet;
  }
}
