/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IEverclearFeeAdapter,
  IEverclearFeeAdapterInterface,
} from "../IEverclearFeeAdapter";

const _abi = [
  {
    type: "function",
    name: "newIntent",
    inputs: [
      {
        name: "_destinations",
        type: "uint32[]",
        internalType: "uint32[]",
      },
      {
        name: "_receiver",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_inputAsset",
        type: "address",
        internalType: "address",
      },
      {
        name: "_outputAsset",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_maxFee",
        type: "uint24",
        internalType: "uint24",
      },
      {
        name: "_ttl",
        type: "uint48",
        internalType: "uint48",
      },
      {
        name: "_data",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "_feeParams",
        type: "tuple",
        internalType: "struct IEverclearFeeAdapter.FeeParams",
        components: [
          {
            name: "fee",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "deadline",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "sig",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "_intentId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_intent",
        type: "tuple",
        internalType: "struct IEverclearFeeAdapter.Intent",
        components: [
          {
            name: "initiator",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "receiver",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "inputAsset",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "outputAsset",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "maxFee",
            type: "uint24",
            internalType: "uint24",
          },
          {
            name: "origin",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "nonce",
            type: "uint64",
            internalType: "uint64",
          },
          {
            name: "timestamp",
            type: "uint48",
            internalType: "uint48",
          },
          {
            name: "ttl",
            type: "uint48",
            internalType: "uint48",
          },
          {
            name: "amount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "destinations",
            type: "uint32[]",
            internalType: "uint32[]",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "updateFeeSigner",
    inputs: [
      {
        name: "_feeSigner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
] as const;

export class IEverclearFeeAdapter__factory {
  static readonly abi = _abi;
  static createInterface(): IEverclearFeeAdapterInterface {
    return new utils.Interface(_abi) as IEverclearFeeAdapterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IEverclearFeeAdapter {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IEverclearFeeAdapter;
  }
}
