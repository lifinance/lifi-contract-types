/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Permit2Proxy, Permit2ProxyInterface } from "../Permit2Proxy";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_lifiDiamond",
        type: "address",
        internalType: "address",
      },
      {
        name: "_permit2",
        type: "address",
        internalType: "contract ISignatureTransfer",
      },
      {
        name: "_owner",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "receive",
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "LIFI_DIAMOND",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "PERMIT2",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract ISignatureTransfer",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "PERMIT_WITH_WITNESS_TYPEHASH",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "WITNESS_TYPEHASH",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "WITNESS_TYPE_STRING",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "callDiamondWithEIP2612Signature",
    inputs: [
      {
        name: "tokenAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "deadline",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "signature",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "diamondCalldata",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "callDiamondWithEIP2612Signature",
    inputs: [
      {
        name: "tokenAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "deadline",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "v",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "s",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "diamondCalldata",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "callDiamondWithPermit2",
    inputs: [
      {
        name: "_diamondCalldata",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "_permit",
        type: "tuple",
        internalType: "struct ISignatureTransfer.PermitTransferFrom",
        components: [
          {
            name: "permitted",
            type: "tuple",
            internalType: "struct ISignatureTransfer.TokenPermissions",
            components: [
              {
                name: "token",
                type: "address",
                internalType: "address",
              },
              {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
              },
            ],
          },
          {
            name: "nonce",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "deadline",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
      {
        name: "_signature",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "callDiamondWithPermit2Witness",
    inputs: [
      {
        name: "_diamondCalldata",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "_signer",
        type: "address",
        internalType: "address",
      },
      {
        name: "_permit",
        type: "tuple",
        internalType: "struct ISignatureTransfer.PermitTransferFrom",
        components: [
          {
            name: "permitted",
            type: "tuple",
            internalType: "struct ISignatureTransfer.TokenPermissions",
            components: [
              {
                name: "token",
                type: "address",
                internalType: "address",
              },
              {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
              },
            ],
          },
          {
            name: "nonce",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "deadline",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
      {
        name: "_signature",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "cancelOwnershipTransfer",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "confirmOwnershipTransfer",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getPermit2MsgHash",
    inputs: [
      {
        name: "_diamondCalldata",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "_assetId",
        type: "address",
        internalType: "address",
      },
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_nonce",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_deadline",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "msgHash",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "nextNonce",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "nonce",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "nextNonceAfter",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address",
      },
      {
        name: "start",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "nonce",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "pendingOwner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "_newOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "withdrawToken",
    inputs: [
      {
        name: "assetId",
        type: "address",
        internalType: "address",
      },
      {
        name: "receiver",
        type: "address",
        internalType: "address payable",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "OwnershipTransferRequested",
    inputs: [
      {
        name: "_from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "_to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "TokensWithdrawn",
    inputs: [
      {
        name: "assetId",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "receiver",
        type: "address",
        indexed: false,
        internalType: "address payable",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "CallToDiamondFailed",
    inputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
  },
  {
    type: "error",
    name: "ExternalCallFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidReceiver",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidSignature",
    inputs: [],
  },
  {
    type: "error",
    name: "NewOwnerMustNotBeSelf",
    inputs: [],
  },
  {
    type: "error",
    name: "NoNullOwner",
    inputs: [],
  },
  {
    type: "error",
    name: "NoPendingOwnershipTransfer",
    inputs: [],
  },
  {
    type: "error",
    name: "NotPendingOwner",
    inputs: [],
  },
  {
    type: "error",
    name: "NullAddrIsNotAValidSpender",
    inputs: [],
  },
  {
    type: "error",
    name: "NullAddrIsNotAnERC20Token",
    inputs: [],
  },
  {
    type: "error",
    name: "UnAuthorized",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60e060405234801561000f575f5ffd5b506040516126c93803806126c983398101604081905261002e916100d5565b5f80546001600160a01b0319166001600160a01b0383811691909117909155838116608052821660a0908152604080519182019052606480825261266560208301396040518060a00160405280607b81526020016125ea607b913960405160200161009a929190610136565b60408051601f19818403018152919052805160209091012060c05250610152915050565b6001600160a01b03811681146100d2575f5ffd5b50565b5f5f5f606084860312156100e7575f5ffd5b83516100f2816100be565b6020850151909350610103816100be565b6040850151909250610114816100be565b809150509250925092565b5f81518060208401855e5f93019283525090919050565b5f61014a610144838661011f565b8461011f565b949350505050565b60805160a05160c05161241a6101d05f395f818161034201526107f701525f81816102bd015281816104170152818161076601528181610a65015261123701525f818161018c01528181610494015281816106fe0152818161099401528181610b5101528181610dbd01528181610ea901526110ad015261241a5ff3fe608060405260043610610126575f3560e01c80635ebf8b7d116100a15780638da5cb5b11610071578063d7a0847311610057578063d7a0847314610364578063e30c397814610377578063f2fde38b146103a3575f5ffd5b80638da5cb5b14610306578063aeef37de14610331575f5ffd5b80635ebf8b7d1461028d5780636afdd850146102ac5780637200b829146102df57806386cabde3146102f3575f5ffd5b8063156e2152116100f657806323452b9c116100dc57806323452b9c146102335780632c03ae6a146102475780634561136e1461027a575f5ffd5b8063156e2152146102005780631608b80314610214575f5ffd5b80630193b9fc1461013157806301e336671461015a578063020a1f7d1461017b5780630cd55abf146101d3575f5ffd5b3661012d57005b5f5ffd5b61014461013f366004611bd0565b6103c2565b6040516101519190611c9e565b60405180910390f35b348015610165575f5ffd5b50610179610174366004611cd4565b610505565b005b348015610186575f5ffd5b506101ae7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610151565b3480156101de575f5ffd5b506101f26101ed366004611d12565b61068a565b604051908152602001610151565b34801561020b575f5ffd5b5061014461069c565b34801561021f575f5ffd5b506101f261022e366004611d2d565b6106b8565b34801561023e575f5ffd5b506101796108bb565b348015610252575f5ffd5b506101f27f94e6068a5a6dd834ff47c5974947ba1045655c61d1d1ee6dd509d2a6e2bed77081565b610144610288366004611d99565b610984565b348015610298575f5ffd5b506101f26102a7366004611e2c565b610bc5565b3480156102b7575f5ffd5b506101ae7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102ea575f5ffd5b50610179610c2d565b610144610301366004611e56565b610d11565b348015610311575f5ffd5b505f546101ae9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561033c575f5ffd5b506101f27f000000000000000000000000000000000000000000000000000000000000000081565b610144610372366004611eea565b610e2c565b348015610382575f5ffd5b506001546101ae9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156103ae575f5ffd5b506101796103bd366004611d12565b610f1a565b6040805180820182523081526020808601359082015290517f30f28b7a00000000000000000000000000000000000000000000000000000000815260609173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916330f28b7a9161045391889190339089908990600401612001565b5f604051808303815f87803b15801561046a575f5ffd5b505af115801561047c573d5f5f3e3d5ffd5b506104bd92506104929150506020860186611d12565b7f00000000000000000000000000000000000000000000000000000000000000006020870135611076565b6104fb86868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506110a792505050565b9695505050505050565b5f5473ffffffffffffffffffffffffffffffffffffffff163314610555576040517fbe24598300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831661060c575f8273ffffffffffffffffffffffffffffffffffffffff16826040515f6040518083038185875af1925050503d805f81146105c6576040519150601f19603f3d011682016040523d82523d5f602084013e6105cb565b606091505b5050905080610606576040517f350c20f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5061062d565b61062d73ffffffffffffffffffffffffffffffffffffffff8416838361117e565b6040805173ffffffffffffffffffffffffffffffffffffffff8086168252841660208201529081018290527f6337ed398c0e8467698c581374fdce4db14922df487b5a39483079f5f59b60a49060600160405180910390a1505050565b5f610696825f5f6111c7565b92915050565b6040518060a00160405280607b815260200161236a607b913981565b6040805180820190915273ffffffffffffffffffffffffffffffffffffffff85168152602081018490525f90816106ee82611341565b90505f60405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020018b8b604051610748929190612071565b604051809103902081525090505f61075f826113c0565b90506108ac7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633644e5156040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107cd573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107f19190612080565b604080517f0000000000000000000000000000000000000000000000000000000000000000602080830191909152818301889052306060830152608082018c905260a082018b905260c08083018790528351808403909101815260e0830184528051908201207f19010000000000000000000000000000000000000000000000000000000000006101008401526101028301949094526101228083019490945282518083039094018452610142909101909152815191012090565b9b9a5050505050505050505050565b5f5473ffffffffffffffffffffffffffffffffffffffff16331461090b576040517fbe24598300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015473ffffffffffffffffffffffffffffffffffffffff1661095a576040517f75cdea1200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60605f60405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16815260200189896040516109de929190612071565b604051809103902081525090505f7f94e6068a5a6dd834ff47c5974947ba1045655c61d1d1ee6dd509d2a6e2bed77082604051602001610a4b929190918252805173ffffffffffffffffffffffffffffffffffffffff166020808401919091520151604082015260600190565b6040516020818303038152906040528051906020012090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663137c29fe8760405180604001604052803073ffffffffffffffffffffffffffffffffffffffff1681526020018a5f01602001358152508a856040518060a00160405280607b815260200161236a607b91398b8b6040518863ffffffff1660e01b8152600401610b109796959493929190612097565b5f604051808303815f87803b158015610b27575f5ffd5b505af1158015610b39573d5f5f3e3d5ffd5b50610b7a9250610b4f9150506020880188611d12565b7f00000000000000000000000000000000000000000000000000000000000000006020890135611076565b610bb889898080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506110a792505050565b9998505050505050505050565b5f600882901c827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0160ff821601610c0b5781610c0081612143565b9250505f9050610c19565b80610c158161219d565b9150505b610c248583836111c7565b95945050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16338114610c7f576040517f1853971c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35f805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179055600180549091169055565b606085421115610d4d576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6017333b11610d9c57610d9788888888888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061142092505050565b610dab565b610dab888888888888886116eb565b610db78833308a6118ac565b610de2887f000000000000000000000000000000000000000000000000000000000000000089611076565b610e2083838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506110a792505050565b98975050505050505050565b60605f858588604051602001610e7a93929190928352602083019190915260f81b7fff0000000000000000000000000000000000000000000000000000000000000016604082015260410190565b6040516020818303038152906040529050610e978a8a8a84611420565b610ea38a33308c6118ac565b610ece8a7f00000000000000000000000000000000000000000000000000000000000000008b611076565b610f0c84848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506110a792505050565b9a9950505050505050505050565b5f5473ffffffffffffffffffffffffffffffffffffffff163314610f6a576040517fbe24598300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116610fb7576040517f1beca37400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff821603611006576040517fbf1ea9fb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915560405133907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278905f90a350565b6110a28383837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61196e565b505050565b60605f5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1634856040516110f191906121b2565b5f6040518083038185875af1925050503d805f811461112b576040519150601f19603f3d011682016040523d82523d5f602084013e611130565b606091505b50915091508161117757806040517f0e971f1200000000000000000000000000000000000000000000000000000000815260040161116e9190611c9e565b60405180910390fd5b9392505050565b81601452806034526fa9059cbb0000000000000000000000005f5260205f604460105f875af13d1560015f511417166111be576390b8ec185f526004601cfd5b5f603452505050565b5f5b6040517f4fe02b4400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301527effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff851660248301525f917f000000000000000000000000000000000000000000000000000000000000000090911690634fe02b4490604401602060405180830381865afa15801561127e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112a29190612080565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81036112df576112d484612143565b93505f9250506111c9565b60ff8316156112ee5760ff83161c5b8060011660010361130c5760011c6113058361219d565b92506112ee565b600884901b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff84161795945050505050565b80516020808301516040515f936113a3937f618358ac3db8dc274f0cd8829da7e234bd48cd73c4a740aede1adec9846d06a19391920192835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b604051602081830303815290604052805190602001209050919050565b5f7f94e6068a5a6dd834ff47c5974947ba1045655c61d1d1ee6dd509d2a6e2bed770826040516020016113a3929190918252805173ffffffffffffffffffffffffffffffffffffffff166020808401919091520151604082015260600190565b805160411461145b576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020810151604080830151606084015191517fd505accf00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101879052606481018690525f9290921a6084830181905260a4830184905260c48301829052909173ffffffffffffffffffffffffffffffffffffffff88169063d505accf9060e4015f604051808303815f87803b1580156114fe575f5ffd5b505af192505050801561150f575060015b6116e25761151b6121c8565b806308c379a00361160e575061152f612251565b8061153a5750611610565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152879073ffffffffffffffffffffffffffffffffffffffff8a169063dd62ed3e90604401602060405180830381865afa1580156115aa573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115ce9190612080565b101561160857806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116e9190611c9e565b506116e2565b505b3d808015611639576040519150601f19603f3d011682016040523d82523d5f602084013e61163e565b606091505b506040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152879073ffffffffffffffffffffffffffffffffffffffff8a169063dd62ed3e90604401602060405180830381865afa1580156116af573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116d39190612080565b10156116085761160881611a95565b50505050505050565b5f7f4e5afe72d5391ebf0488adc86d9061be333ff93333ca46fbbf5a3cfb26f904ff8888888686604051611720929190612071565b60405190819003812061176d959493929160200194855273ffffffffffffffffffffffffffffffffffffffff93909316602085015260408401919091526060830152608082015260a00190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905280516020909101207f1626ba7e00000000000000000000000000000000000000000000000000000000825291505f903390631626ba7e906117e59085908a908a90600401612311565b602060405180830381865afa158015611800573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611824919061232a565b90507fffffffff0000000000000000000000000000000000000000000000000000000081167f1626ba7e00000000000000000000000000000000000000000000000000000000146118a1576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff84166118f9576040517fd1bebf0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216611946576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61196873ffffffffffffffffffffffffffffffffffffffff8516848484611a9f565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8416156119685773ffffffffffffffffffffffffffffffffffffffff83166119d7576040517f63ba9bff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015283919086169063dd62ed3e90604401602060405180830381865afa158015611a4a573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a6e9190612080565b10156119685761196873ffffffffffffffffffffffffffffffffffffffff85168483611af7565b8051602082018181fd5b60405181606052826040528360601b602c526f23b872dd000000000000000000000000600c5260205f6064601c5f895af13d1560015f51141716611aea57637939f4245f526004601cfd5b5f60605260405250505050565b81601452806034526f095ea7b30000000000000000000000005f5260205f604460105f875af13d1560015f511417166111be575f6034526f095ea7b30000000000000000000000005f525f38604460105f875af1508060345260205f604460105f875af13d1560015f511417166111be57633e3f8f735f526004601cfd5b5f5f83601f840112611b85575f5ffd5b50813567ffffffffffffffff811115611b9c575f5ffd5b602083019150836020828501011115611bb3575f5ffd5b9250929050565b5f60808284031215611bca575f5ffd5b50919050565b5f5f5f5f5f60c08688031215611be4575f5ffd5b853567ffffffffffffffff811115611bfa575f5ffd5b611c0688828901611b75565b9096509450611c1a90508760208801611bba565b925060a086013567ffffffffffffffff811115611c35575f5ffd5b611c4188828901611b75565b969995985093965092949392505050565b5f81518084528060208401602086015e5f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081525f6111776020830184611c52565b73ffffffffffffffffffffffffffffffffffffffff81168114611cd1575f5ffd5b50565b5f5f5f60608486031215611ce6575f5ffd5b8335611cf181611cb0565b92506020840135611d0181611cb0565b929592945050506040919091013590565b5f60208284031215611d22575f5ffd5b813561117781611cb0565b5f5f5f5f5f5f60a08789031215611d42575f5ffd5b863567ffffffffffffffff811115611d58575f5ffd5b611d6489828a01611b75565b9097509550506020870135611d7881611cb0565b95989497509495604081013595506060810135946080909101359350915050565b5f5f5f5f5f5f60e08789031215611dae575f5ffd5b863567ffffffffffffffff811115611dc4575f5ffd5b611dd089828a01611b75565b9097509550506020870135611de481611cb0565b9350611df38860408901611bba565b925060c087013567ffffffffffffffff811115611e0e575f5ffd5b611e1a89828a01611b75565b979a9699509497509295939492505050565b5f5f60408385031215611e3d575f5ffd5b8235611e4881611cb0565b946020939093013593505050565b5f5f5f5f5f5f5f60a0888a031215611e6c575f5ffd5b8735611e7781611cb0565b96506020880135955060408801359450606088013567ffffffffffffffff811115611ea0575f5ffd5b611eac8a828b01611b75565b909550935050608088013567ffffffffffffffff811115611ecb575f5ffd5b611ed78a828b01611b75565b989b979a50959850939692959293505050565b5f5f5f5f5f5f5f5f60e0898b031215611f01575f5ffd5b8835611f0c81611cb0565b97506020890135965060408901359550606089013560ff81168114611f2f575f5ffd5b94506080890135935060a0890135925060c089013567ffffffffffffffff811115611f58575f5ffd5b611f648b828c01611b75565b999c989b5096995094979396929594505050565b8035611f8381611cb0565b73ffffffffffffffffffffffffffffffffffffffff1682526020818101359083015260408082013590830152606090810135910152565b81835281816020850137505f602082840101525f60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b61200b8187611f78565b845173ffffffffffffffffffffffffffffffffffffffff166080820152602085015160a082015273ffffffffffffffffffffffffffffffffffffffff841660c082015261010060e08201525f61206661010083018486611fba565b979650505050505050565b818382375f9101908152919050565b5f60208284031215612090575f5ffd5b5051919050565b6120a18189611f78565b865173ffffffffffffffffffffffffffffffffffffffff166080820152602087015160a082015273ffffffffffffffffffffffffffffffffffffffff861660c08201528460e08201526101406101008201525f612102610140830186611c52565b828103610120840152610f0c818587611fba565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810361219457612194612116565b60010192915050565b5f60ff821660ff810361219457612194612116565b5f82518060208501845e5f920191825250919050565b5f60033d11156121de5760045f5f3e505f5160e01c5b90565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff8211171561224a577f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040525050565b5f60443d101561225e5790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3d016004823e80513d602482011167ffffffffffffffff821117156122a657505090565b808201805167ffffffffffffffff8111156122c2575050505090565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3d85010160208284010111156122fa575050505090565b612309602082850101856121e1565b509392505050565b838152604060208201525f610c24604083018486611fba565b5f6020828403121561233a575f5ffd5b81517fffffffff0000000000000000000000000000000000000000000000000000000081168114611177575f5ffdfe4c69466943616c6c207769746e657373294c69466943616c6c2861646472657373206469616d6f6e64416464726573732c62797465733332206469616d6f6e6443616c6c646174614861736829546f6b656e5065726d697373696f6e73286164647265737320746f6b656e2c75696e7432353620616d6f756e7429a2646970667358221220150f59f4c72d3f6d78d1513c237a716db8f25657c8906d6d144dd15c8e798e4764736f6c634300081d00334c69466943616c6c207769746e657373294c69466943616c6c2861646472657373206469616d6f6e64416464726573732c62797465733332206469616d6f6e6443616c6c646174614861736829546f6b656e5065726d697373696f6e73286164647265737320746f6b656e2c75696e7432353620616d6f756e74295065726d69745769746e6573735472616e7366657246726f6d28546f6b656e5065726d697373696f6e73207065726d69747465642c61646472657373207370656e6465722c75696e74323536206e6f6e63652c75696e7432353620646561646c696e652c";

type Permit2ProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Permit2ProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Permit2Proxy__factory extends ContractFactory {
  constructor(...args: Permit2ProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _lifiDiamond: PromiseOrValue<string>,
    _permit2: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Permit2Proxy> {
    return super.deploy(
      _lifiDiamond,
      _permit2,
      _owner,
      overrides || {}
    ) as Promise<Permit2Proxy>;
  }
  override getDeployTransaction(
    _lifiDiamond: PromiseOrValue<string>,
    _permit2: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _lifiDiamond,
      _permit2,
      _owner,
      overrides || {}
    );
  }
  override attach(address: string): Permit2Proxy {
    return super.attach(address) as Permit2Proxy;
  }
  override connect(signer: Signer): Permit2Proxy__factory {
    return super.connect(signer) as Permit2Proxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Permit2ProxyInterface {
    return new utils.Interface(_abi) as Permit2ProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Permit2Proxy {
    return new Contract(address, _abi, signerOrProvider) as Permit2Proxy;
  }
}
