/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  StandardizedCallFacet,
  StandardizedCallFacetInterface,
} from "../StandardizedCallFacet";

const _abi = [
  {
    type: "function",
    name: "standardizedCall",
    inputs: [
      {
        name: "callData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "error",
    name: "FunctionDoesNotExist",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061028e806100206000396000f3fe60806040526004361061001e5760003560e01c8063d6a4bc5014610023575b600080fd5b610036610031366004610139565b610038565b005b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6000818161006685610208565b7fffffffff0000000000000000000000000000000000000000000000000000000016815260208101919091526040016000205473ffffffffffffffffffffffffffffffffffffffff169050806100e8576040517fa9ad62f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080845160208601845af43d6000803e808015610105573d6000f35b3d6000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561014b57600080fd5b813567ffffffffffffffff8082111561016357600080fd5b818401915084601f83011261017757600080fd5b8135818111156101895761018961010a565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156101cf576101cf61010a565b816040528281528760208487010111156101e857600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000815160208301517fffffffff00000000000000000000000000000000000000000000000000000000808216935060048310156102505780818460040360031b1b83161693505b50505091905056fea264697066735822122024e5b8fd542a07d9df64fd40a1a9ebcceaeae266cf64a9b05f4f4bde9ddb676964736f6c63430008110033";

type StandardizedCallFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StandardizedCallFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StandardizedCallFacet__factory extends ContractFactory {
  constructor(...args: StandardizedCallFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StandardizedCallFacet> {
    return super.deploy(overrides || {}) as Promise<StandardizedCallFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StandardizedCallFacet {
    return super.attach(address) as StandardizedCallFacet;
  }
  override connect(signer: Signer): StandardizedCallFacet__factory {
    return super.connect(signer) as StandardizedCallFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StandardizedCallFacetInterface {
    return new utils.Interface(_abi) as StandardizedCallFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StandardizedCallFacet {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as StandardizedCallFacet;
  }
}
