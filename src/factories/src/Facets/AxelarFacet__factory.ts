/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AxelarFacet,
  AxelarFacetInterface,
} from "../../../src/Facets/AxelarFacet";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "destinationChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "destinationAddress",
        type: "string",
      },
      {
        internalType: "address",
        name: "callTo",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "callData",
        type: "bytes",
      },
    ],
    name: "executeCallViaAxelar",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "destinationChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "destinationAddress",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "callTo",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "callData",
        type: "bytes",
      },
    ],
    name: "executeCallWithTokenViaAxelar",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_gateway",
        type: "address",
      },
      {
        internalType: "address",
        name: "_gasReceiver",
        type: "address",
      },
    ],
    name: "initAxelar",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610cc5806100206000396000f3fe6080604052600436106100345760003560e01c80631427fadf146100395780633a199d6c1461004e578063b9b7dac614610061575b600080fd5b61004c61004736600461084b565b610081565b005b61004c61005c3660046108ef565b610210565b34801561006d57600080fd5b5061004c61007c3660046109bd565b61058b565b6040517fc7ba6016a551f7f07fd4821271b8773baf38cf0831912878e266bac50e0e4a9c906000906100bb908690869086906020016109f6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905260018401547f0c93e3bb00000000000000000000000000000000000000000000000000000000835290925073ffffffffffffffffffffffffffffffffffffffff1690630c93e3bb90349061014a9030908c908c9088903390600401610aa0565b6000604051808303818588803b15801561016357600080fd5b505af1158015610177573d6000803e3d6000fd5b505084546040517f1c92115f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169350631c92115f92506101d591508a908a908690600401610b0c565b600060405180830381600087803b1580156101ef57600080fd5b505af1158015610203573d6000803e3d6000fd5b5050505050505050505050565b7fc7ba6016a551f7f07fd4821271b8773baf38cf0831912878e266bac50e0e4a9c80546040517f935b13f600000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063935b13f690610287908a90600401610b4f565b602060405180830381865afa1580156102a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c89190610b69565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810188905290915073ffffffffffffffffffffffffffffffffffffffff8216906323b872dd906064016020604051808303816000875af1158015610344573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103689190610b86565b5081546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018890529082169063095ea7b3906044016020604051808303816000875af11580156103e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104059190610b86565b50600085858560405160200161041d939291906109f6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052905034156104f0578260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c62c200234308d8d868e8e336040518963ffffffff1660e01b81526004016104bd9796959493929190610ba8565b6000604051808303818588803b1580156104d657600080fd5b505af11580156104ea573d6000803e3d6000fd5b50505050505b82546040517fb541708400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063b54170849061054d908d908d9086908e908e90600401610c2f565b600060405180830381600087803b15801561056757600080fd5b505af115801561057b573d6000803e3d6000fd5b5050505050505050505050505050565b610593610624565b7fc7ba6016a551f7f07fd4821271b8773baf38cf0831912878e266bac50e0e4a9c805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091557fc7ba6016a551f7f07fd4821271b8773baf38cf0831912878e266bac50e0e4a9d8054929093169116179055565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6004015473ffffffffffffffffffffffffffffffffffffffff1633146106f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201527f6572000000000000000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261073357600080fd5b813567ffffffffffffffff8082111561074e5761074e6106f3565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610794576107946106f3565b816040528381528660208588010111156107ad57600080fd5b836020870160208301376000602085830101528094505050505092915050565b73ffffffffffffffffffffffffffffffffffffffff811681146107ef57600080fd5b50565b80356107fd816107cd565b919050565b60008083601f84011261081457600080fd5b50813567ffffffffffffffff81111561082c57600080fd5b60208301915083602082850101111561084457600080fd5b9250929050565b60008060008060006080868803121561086357600080fd5b853567ffffffffffffffff8082111561087b57600080fd5b61088789838a01610722565b9650602088013591508082111561089d57600080fd5b6108a989838a01610722565b9550604088013591506108bb826107cd565b909350606087013590808211156108d157600080fd5b506108de88828901610802565b969995985093965092949392505050565b600080600080600080600060c0888a03121561090a57600080fd5b873567ffffffffffffffff8082111561092257600080fd5b61092e8b838c01610722565b985060208a013591508082111561094457600080fd5b6109508b838c01610722565b975060408a013591508082111561096657600080fd5b6109728b838c01610722565b965060608a0135955061098760808b016107f2565b945060a08a013591508082111561099d57600080fd5b506109aa8a828b01610802565b989b979a50959850939692959293505050565b600080604083850312156109d057600080fd5b82356109db816107cd565b915060208301356109eb816107cd565b809150509250929050565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b168152818360148301376000910160140190815292915050565b6000815180845260005b81811015610a5b57602081850181015186830182015201610a3f565b81811115610a6d576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff808816835260a06020840152610ad060a0840188610a35565b8381036040850152610ae28188610a35565b90508381036060850152610af68187610a35565b9250508084166080840152509695505050505050565b606081526000610b1f6060830186610a35565b8281036020840152610b318186610a35565b90508281036040840152610b458185610a35565b9695505050505050565b602081526000610b626020830184610a35565b9392505050565b600060208284031215610b7b57600080fd5b8151610b62816107cd565b600060208284031215610b9857600080fd5b81518015158114610b6257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff808a16835260e06020840152610bd860e084018a610a35565b8381036040850152610bea818a610a35565b90508381036060850152610bfe8189610a35565b90508381036080850152610c128188610a35565b60a0850196909652509290921660c0909101525095945050505050565b60a081526000610c4260a0830188610a35565b8281036020840152610c548188610a35565b90508281036040840152610c688187610a35565b90508281036060840152610c7c8186610a35565b915050826080830152969550505050505056fea26469706673582212203a1d69b62fd5026d1013a7170348262592ba16208292c97677e764560405469c64736f6c634300080d0033";

type AxelarFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AxelarFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AxelarFacet__factory extends ContractFactory {
  constructor(...args: AxelarFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AxelarFacet> {
    return super.deploy(overrides || {}) as Promise<AxelarFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AxelarFacet {
    return super.attach(address) as AxelarFacet;
  }
  override connect(signer: Signer): AxelarFacet__factory {
    return super.connect(signer) as AxelarFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AxelarFacetInterface {
    return new utils.Interface(_abi) as AxelarFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AxelarFacet {
    return new Contract(address, _abi, signerOrProvider) as AxelarFacet;
  }
}
