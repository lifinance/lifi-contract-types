/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  CoreRouteFacet,
  CoreRouteFacetInterface,
} from "../CoreRouteFacet";

const _abi = [
  {
    type: "function",
    name: "processRoute",
    inputs: [
      {
        name: "tokenIn",
        type: "address",
        internalType: "address",
      },
      {
        name: "amountIn",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "tokenOut",
        type: "address",
        internalType: "address",
      },
      {
        name: "amountOutMin",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "route",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "amountOut",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "event",
    name: "Route",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "tokenIn",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenOut",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amountIn",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "amountOutMin",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "amountOut",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "MinimalInputBalanceViolation",
    inputs: [
      {
        name: "available",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "required",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "MinimalOutputBalanceViolation",
    inputs: [
      {
        name: "amountOut",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "ReentrancyError",
    inputs: [],
  },
  {
    type: "error",
    name: "SwapFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "UnknownCommandCode",
    inputs: [],
  },
  {
    type: "error",
    name: "UnknownSelector",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b506113478061001c5f395ff3fe60806040526004361061001d575f3560e01c80632646478b14610021575b5f5ffd5b61003461002f36600461114f565b610046565b60405190815260200160405180910390f35b7fa65bb2f450488ab0858c00edc14abc5297769bf42adb48cfb77752890e8b697b80545f91907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016100c4576040517f29f745a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181556100d7898989898989896100e7565b91505f9055979650505050505050565b5f8073ffffffffffffffffffffffffffffffffffffffff891673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146101ab576040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8a16906370a0823190602401602060405180830381865afa158015610182573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101a69190611201565b6101ad565b5f5b90505f73ffffffffffffffffffffffffffffffffffffffff881673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610274576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528916906370a0823190602401602060405180830381865afa15801561024b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061026f9190611201565b61028d565b8573ffffffffffffffffffffffffffffffffffffffff16315b604080516020601f88018190048102820181019092528681529192508a915f9182916102d2918a908a90819084018382808284375f9201919091525061069592505050565b90505b8051602082015111156103b8575f6102f38280516001018051915290565b90508060ff1660010361031d575f61030a836106af565b9050835f03610317578094505b506103a7565b8060ff1660020361033757610332828e610771565b6103a7565b8060ff1660030361034c575f61030a83610795565b8060ff1660040361036057610332826107bb565b8060ff16600603610375576103328e836107de565b6040517fb926a1f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103b083611245565b9250506102d5565b505f905073ffffffffffffffffffffffffffffffffffffffff8c1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461047e576040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8d16906370a0823190602401602060405180830381865afa158015610455573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104799190611201565b610480565b5f5b90508361048d8c8361127c565b10156104df5761049d8b8261127c565b6040517f583af5860000000000000000000000000000000000000000000000000000000081526004810191909152602481018590526044015b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff8b1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146105a4576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a811660048301528c16906370a0823190602401602060405180830381865afa15801561057b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061059f9190611201565b6105bd565b8873ffffffffffffffffffffffffffffffffffffffff16315b90506105c98a8561127c565b81101561060f576105da8482611295565b6040517f963b34a50000000000000000000000000000000000000000000000000000000081526004016104d691815260200190565b6106198482611295565b6040805173ffffffffffffffffffffffffffffffffffffffff8c81168252602082018790529181018d905260608101839052919750808d1691908f169033907f2db5ddd0b42bdbca0d69ea16f234a870a485854ae0d91f16643d6f317d8b89949060800160405180910390a45050505050979650505050505050565b604080518082019091528181528151909101602082015290565b5f5f6106c18380516014018051915290565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906370a0823190602401602060405180830381865afa15801561072c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107509190611201565b9150811561075f576001820391505b61076b8330838561086c565b50919050565b5f6107828380516014018051915290565b90506107908333838561086c565b505050565b476107b6823073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8461086c565b919050565b5f6107cc8280516014018051915290565b90506107da825f835f610960565b5050565b5f6107ef8280516020018051915290565b90505f6108028380516020018051915290565b90505f6108158480516001018051915290565b90505f6108288580516020018051915290565b90505f61083b8680516020018051915290565b905061086373ffffffffffffffffffffffffffffffffffffffff881633308888888888610c26565b50505050505050565b5f61087d8580516001018051915290565b90506108bd6040518060400160405280600681526020017f6e756d3232320000000000000000000000000000000000000000000000000000815250610e9b565b6108c98160ff16610f2d565b5f5b8160ff16811015610958575f6108e78780516002018051915290565b90506109276040518060400160405280600881526020017f7368617265323232000000000000000000000000000000000000000000000000815250610e9b565b6109348161ffff16610f2d565b61ffff818116850204938490039361094e88888884610960565b50506001016108cb565b505050505050565b5f60186109738680516001018051915290565b60ff16901b601061098a8780516001018051915290565b60ff16901b60086109a18880516001018051915290565b60ff16901b6109b68880516001018051915290565b60ff1617171760e01b90506109ff6040518060400160405280600b81526020017f73656c6563746f72323232000000000000000000000000000000000000000000815250610e9b565b610a0881610fbe565b7fffffffff0000000000000000000000000000000000000000000000000000000081165f9081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c602052604081205473ffffffffffffffffffffffffffffffffffffffff169050610aae6040518060400160405280600881526020017f6661636574323232000000000000000000000000000000000000000000000000815250610e9b565b610ab78161106b565b73ffffffffffffffffffffffffffffffffffffffff8116610b04576040517fdc66f67300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85516004018652604080516024810188905273ffffffffffffffffffffffffffffffffffffffff8781166044830152868116606483015260848083018790528351808403909101815260a490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000871617905291515f92841691610bae916112a8565b5f60405180830381855af49150503d805f8114610be6576040519150601f19603f3d011682016040523d82523d5f602084013e610beb565b606091505b5050905080610863576040517f81ceff3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f7ecebe0000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301525f91908a1690637ecebe0090602401602060405180830381865afa158015610c93573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cb79190611201565b6040517fd505accf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a811660048301528981166024830152604482018990526064820188905260ff8716608483015260a4820186905260c48201859052919250908a169063d505accf9060e4015f604051808303815f87803b158015610d4e575f5ffd5b505af1158015610d60573d5f5f3e3d5ffd5b50506040517f7ecebe0000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301525f93508c169150637ecebe0090602401602060405180830381865afa158015610dd0573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610df49190611201565b9050610e0182600161127c565b8114610e8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5361666545524332303a207065726d697420646964206e6f742073756363656560448201527f640000000000000000000000000000000000000000000000000000000000000060648201526084016104d6565b50505050505050505050565b610f2a81604051602401610eaf91906112be565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac00000000000000000000000000000000000000000000000000000000179052611108565b50565b610f2a81604051602401610f4391815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff82c50f100000000000000000000000000000000000000000000000000000000179052611108565b6040517fffffffff0000000000000000000000000000000000000000000000000000000082166024820152610f2a90604401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fe05f48d100000000000000000000000000000000000000000000000000000000179052611108565b60405173ffffffffffffffffffffffffffffffffffffffff82166024820152610f2a90604401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f2c2ecbc2000000000000000000000000000000000000000000000000000000001790525b610f2a8180516a636f6e736f6c652e6c6f67602083015f808483855afa5050505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146107b6575f5ffd5b5f5f5f5f5f5f5f60c0888a031215611165575f5ffd5b61116e8861112c565b9650602088013595506111836040890161112c565b9450606088013593506111986080890161112c565b925060a088013567ffffffffffffffff8111156111b3575f5ffd5b8801601f81018a136111c3575f5ffd5b803567ffffffffffffffff8111156111d9575f5ffd5b8a60208284010111156111ea575f5ffd5b602082019350809250505092959891949750929550565b5f60208284031215611211575f5ffd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361127557611275611218565b5060010190565b8082018082111561128f5761128f611218565b92915050565b8181038181111561128f5761128f611218565b5f82518060208501845e5f920191825250919050565b602081525f82518060208401528060208501604085015e5f6040828501015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168401019150509291505056fea2646970667358221220b958185373a979a4343d0dbfbd70c6ac58981296b5456fb27b410d0da825219e64736f6c634300081d0033";

type CoreRouteFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CoreRouteFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CoreRouteFacet__factory extends ContractFactory {
  constructor(...args: CoreRouteFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CoreRouteFacet> {
    return super.deploy(overrides || {}) as Promise<CoreRouteFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CoreRouteFacet {
    return super.attach(address) as CoreRouteFacet;
  }
  override connect(signer: Signer): CoreRouteFacet__factory {
    return super.connect(signer) as CoreRouteFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CoreRouteFacetInterface {
    return new utils.Interface(_abi) as CoreRouteFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CoreRouteFacet {
    return new Contract(address, _abi, signerOrProvider) as CoreRouteFacet;
  }
}
