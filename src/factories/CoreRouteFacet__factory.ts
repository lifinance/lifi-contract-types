/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  CoreRouteFacet,
  CoreRouteFacetInterface,
} from "../CoreRouteFacet";

const _abi = [
  {
    type: "function",
    name: "processRoute",
    inputs: [
      {
        name: "tokenIn",
        type: "address",
        internalType: "address",
      },
      {
        name: "amountIn",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "tokenOut",
        type: "address",
        internalType: "address",
      },
      {
        name: "amountOutMin",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "to",
        type: "address",
        internalType: "address",
      },
      {
        name: "route",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "amountOut",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "event",
    name: "Route",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "to",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "tokenIn",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenOut",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amountIn",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "amountOutMin",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "amountOut",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "MinimalInputBalanceViolation",
    inputs: [
      {
        name: "available",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "required",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "MinimalOutputBalanceViolation",
    inputs: [
      {
        name: "amountOut",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "ReentrancyError",
    inputs: [],
  },
  {
    type: "error",
    name: "SwapFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "UnknownCommandCode",
    inputs: [],
  },
  {
    type: "error",
    name: "UnknownSelector",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b50610f4d8061001c5f395ff3fe60806040526004361061001d575f3560e01c80632646478b14610021575b5f5ffd5b61003461002f366004610d14565b610046565b60405190815260200160405180910390f35b7fa65bb2f450488ab0858c00edc14abc5297769bf42adb48cfb77752890e8b697b80545f91907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016100c4576040517f29f745a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181556100d7898989898989896100e7565b91505f9055979650505050505050565b5f8073ffffffffffffffffffffffffffffffffffffffff891615610196576040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8a16906370a0823190602401602060405180830381865afa15801561016d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101919190610dc6565b610198565b5f5b90505f73ffffffffffffffffffffffffffffffffffffffff88161561024a576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528916906370a0823190602401602060405180830381865afa158015610221573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102459190610dc6565b610263565b8573ffffffffffffffffffffffffffffffffffffffff16315b604080516020601f88018190048102820181019092528681529192508a915f9182916102a8918a908a90819084018382808284375f9201919091525061063d92505050565b90505b8051602082015111156103855780518051600191820183525f1a908190036102ea575f6102d78361065f565b9050835f036102e4578094505b50610374565b8060ff16600203610304576102ff828e610721565b610374565b8060ff16600303610319575f6102d783610740565b8060ff1660040361032d576102ff82610752565b8060ff16600503610342576102ff8e83610770565b6040517fb926a1f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61037d83610e0a565b9250506102ab565b50505f6103a68c73ffffffffffffffffffffffffffffffffffffffff161590565b61043b576040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8d16906370a0823190602401602060405180830381865afa158015610412573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104369190610dc6565b61043d565b5f5b90508361044a8c83610e41565b101561049c5761045a8b82610e41565b6040517f583af5860000000000000000000000000000000000000000000000000000000081526004810191909152602481018590526044015b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff8b161561054c576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a811660048301528c16906370a0823190602401602060405180830381865afa158015610523573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105479190610dc6565b610565565b8873ffffffffffffffffffffffffffffffffffffffff16315b90506105718a85610e41565b8110156105b7576105828482610e5a565b6040517f963b34a500000000000000000000000000000000000000000000000000000000815260040161049391815260200190565b6105c18482610e5a565b6040805173ffffffffffffffffffffffffffffffffffffffff8c81168252602082018790529181018d905260608101839052919750808d1691908f169033907f2db5ddd0b42bdbca0d69ea16f234a870a485854ae0d91f16643d6f317d8b89949060800160405180910390a45050505050979650505050505050565b6040805180820190915260208281018252825190920182019181019190915290565b80518051601490910182525f90819060601c6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906370a0823190602401602060405180830381865afa1580156106dc573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107009190610dc6565b9150811561070f576001820391505b61071b833083856107d4565b50919050565b815180516014909101835260601c61073b833383856107d4565b505050565b4761074d82305f846107d4565b919050565b805180516014909101825260601c61076c825f838161082e565b5050565b80518051602082018084525160408301808552516041840180865251606185018087525160819095018652929391925f9190911a916107cb73ffffffffffffffffffffffffffffffffffffffff881633308888888888610a3e565b50505050505050565b83518051600190910185525f90811a905b8160ff1681101561082657855180516002909101875261ffff60f09190911c84810291909104938490039361081c8888888461082e565b50506001016107e5565b505050505050565b5f61083885610ca7565b602081015181517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0160048301908152919250905f6108d9837fffffffff00000000000000000000000000000000000000000000000000000000165f9081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b905073ffffffffffffffffffffffffffffffffffffffff8116610928576040517fdc66f67300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5f8273ffffffffffffffffffffffffffffffffffffffff1685858b8b8b6040516024016109599493929190610e6d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516109e29190610f01565b5f60405180830381855af49150503d805f8114610a1a576040519150601f19603f3d011682016040523d82523d5f602084013e610a1f565b606091505b509150915081610a3257610a3281610ce7565b50505050505050505050565b6040517f7ecebe0000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301525f91908a1690637ecebe0090602401602060405180830381865afa158015610aab573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610acf9190610dc6565b6040517fd505accf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a811660048301528981166024830152604482018990526064820188905260ff8716608483015260a4820186905260c48201859052919250908a169063d505accf9060e4015f604051808303815f87803b158015610b66575f5ffd5b505af1158015610b78573d5f5f3e3d5ffd5b50506040517f7ecebe0000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301525f93508c169150637ecebe0090602401602060405180830381865afa158015610be8573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c0c9190610dc6565b9050610c19826001610e41565b8114610a32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5361666545524332303a207065726d697420646964206e6f742073756363656560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610493565b805180516002909101825260609060f01c801561071b575f8351905060405192506020820183016040528183528160208401838360045afa500190915290565b8051602082018181fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461074d575f5ffd5b5f5f5f5f5f5f5f60c0888a031215610d2a575f5ffd5b610d3388610cf1565b965060208801359550610d4860408901610cf1565b945060608801359350610d5d60808901610cf1565b925060a088013567ffffffffffffffff811115610d78575f5ffd5b8801601f81018a13610d88575f5ffd5b803567ffffffffffffffff811115610d9e575f5ffd5b8a6020828401011115610daf575f5ffd5b602082019350809250505092959891949750929550565b5f60208284031215610dd6575f5ffd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e3a57610e3a610ddd565b5060010190565b80820180821115610e5457610e54610ddd565b92915050565b81810381811115610e5457610e54610ddd565b608081525f8551806080840152806020880160a085015e5f60a0828501015260a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011684010191505073ffffffffffffffffffffffffffffffffffffffff8516602083015273ffffffffffffffffffffffffffffffffffffffff8416604083015282606083015295945050505050565b5f82518060208501845e5f92019182525091905056fea2646970667358221220bc1e19e16d0cef51dc8345ca2b003e903bfb79b333bd40dd4b1a050f85a3629864736f6c634300081d0033";

type CoreRouteFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CoreRouteFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CoreRouteFacet__factory extends ContractFactory {
  constructor(...args: CoreRouteFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CoreRouteFacet> {
    return super.deploy(overrides || {}) as Promise<CoreRouteFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CoreRouteFacet {
    return super.attach(address) as CoreRouteFacet;
  }
  override connect(signer: Signer): CoreRouteFacet__factory {
    return super.connect(signer) as CoreRouteFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CoreRouteFacetInterface {
    return new utils.Interface(_abi) as CoreRouteFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CoreRouteFacet {
    return new Contract(address, _abi, signerOrProvider) as CoreRouteFacet;
  }
}
