/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  CoreRouteFacet,
  CoreRouteFacetInterface,
} from "../CoreRouteFacet";

const _abi = [
  {
    type: "function",
    name: "processRoute",
    inputs: [
      {
        name: "tokenIn",
        type: "address",
        internalType: "address",
      },
      {
        name: "amountIn",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "tokenOut",
        type: "address",
        internalType: "address",
      },
      {
        name: "amountOutMin",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "receiverAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "route",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "amountOut",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "event",
    name: "Route",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "receiverAddress",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "tokenIn",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "tokenOut",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "amountIn",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "amountOutMin",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "amountOut",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "InvalidReceiver",
    inputs: [],
  },
  {
    type: "error",
    name: "ReentrancyError",
    inputs: [],
  },
  {
    type: "error",
    name: "SwapFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "SwapTokenInSpendingExceeded",
    inputs: [
      {
        name: "actualSpent",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "expectedSpent",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "SwapTokenOutAmountTooLow",
    inputs: [
      {
        name: "actualOutput",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "UnknownCommandCode",
    inputs: [],
  },
  {
    type: "error",
    name: "UnknownSelector",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b50610eac8061001c5f395ff3fe60806040526004361061001d575f3560e01c80632646478b14610021575b5f5ffd5b61003461002f366004610d54565b610046565b60405190815260200160405180910390f35b7fa65bb2f450488ab0858c00edc14abc5297769bf42adb48cfb77752890e8b697b80545f91907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016100c4576040517f29f745a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001815573ffffffffffffffffffffffffffffffffffffffff8516610115576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61012489898989898989610134565b91505f9055979650505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff888116159087161582806101618c8b8a8787610201565b915091505f6101728d8d8a8a61035a565b90506101858d8d858e8e878f8c8c61047f565b6040805173ffffffffffffffffffffffffffffffffffffffff8c81168252602082018590529181018d905260608101839052919750808d1691908f169033907f2db5ddd0b42bdbca0d69ea16f234a870a485854ae0d91f16643d6f317d8b89949060800160405180910390a45050505050979650505050505050565b5f5f83610299576040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8816906370a0823190602401602060405180830381865afa158015610270573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102949190610e06565b61029b565b5f5b915082610335576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301528716906370a0823190602401602060405180830381865afa15801561030c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103309190610e06565b61034e565b8473ffffffffffffffffffffffffffffffffffffffff16315b90509550959350505050565b604080516020601f840181900481028201810190925282815284915f91829161039d919087908790819084018382808284375f9201919091525061068492505050565b90505b8051602082015111156104755780518051600191820183525f1a908190036103df575f6103cc836106a6565b9050835f036103d9578094505b50610469565b8060ff166002036103f9576103f48288610768565b610469565b8060ff1660030361040e575f6103cc83610787565b8060ff16600403610422576103f482610799565b8060ff16600503610437576103f488836107b8565b6040517fb926a1f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826001019250506103a0565b5050949350505050565b5f5f83610517576040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8c16906370a0823190602401602060405180830381865afa1580156104ee573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105129190610e06565b610519565b5f5b9050886105268b83610e4a565b1015610578576105368a82610e4a565b6040517f86c921210000000000000000000000000000000000000000000000000000000081526004810191909152602481018a90526044015b60405180910390fd5b5f83610611576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528a16906370a0823190602401602060405180830381865afa1580156105e8573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061060c9190610e06565b61062a565b8573ffffffffffffffffffffffffffffffffffffffff16315b90506106368782610e63565b925087831015610675576040517f54400bc10000000000000000000000000000000000000000000000000000000081526004810184905260240161056f565b50509998505050505050505050565b8051604080516020808501825292909301820191830191909152818101905290565b80518051601490910182525f90819060601c6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906370a0823190602401602060405180830381865afa158015610723573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107479190610e06565b91508115610756576001820391505b6107628330838561081c565b50919050565b815180516014909101835260601c6107828333838561081c565b505050565b4761079482305f8461081c565b919050565b805180516014909101825260601c6107b4826001835f6108ad565b5050565b80518051602082018084525160408301808552516041840180865251606185018087525160819095018652929391925f9190911a9161081373ffffffffffffffffffffffffffffffffffffffff881633308888888888610a7e565b50505050505050565b83518051600190910185525f90811a9082905b8260ff1681101561081357865180516002909101885260f01c5f60ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86011683146108835761ffff828116870204610885565b835b9050838111156108925750825b80840393506108a3898989846108ad565b505060010161082f565b5f6108b785610ce7565b90505f6108c5826020015190565b82519091507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc015f610959837fffffffff00000000000000000000000000000000000000000000000000000000165f9081527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b905073ffffffffffffffffffffffffffffffffffffffff81166109a8576040517fdc66f67300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f606060405185815260048101608081528a60208201528960408201528860608201526080810190508580825280602083018260248c0160045afa5060a4601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190505f808284885af4910160405291508180610a63573d604051925080835260208301815f823e601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016016040525b5081610a7257610a7281610d27565b50505050505050505050565b6040517f7ecebe0000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301525f91908a1690637ecebe0090602401602060405180830381865afa158015610aeb573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b0f9190610e06565b6040517fd505accf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a811660048301528981166024830152604482018990526064820188905260ff8716608483015260a4820186905260c48201859052919250908a169063d505accf9060e4015f604051808303815f87803b158015610ba6575f5ffd5b505af1158015610bb8573d5f5f3e3d5ffd5b50506040517f7ecebe0000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301525f93508c169150637ecebe0090602401602060405180830381865afa158015610c28573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c4c9190610e06565b9050610c59826001610e4a565b8114610a72576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5361666545524332303a207065726d697420646964206e6f742073756363656560448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161056f565b805180516002909101825260609060f01c8015610762575f8351905060405192506020820183016040528183528160208401838360045afa500190915290565b8051602082018181fd5b803573ffffffffffffffffffffffffffffffffffffffff81168114610794575f5ffd5b5f5f5f5f5f5f5f60c0888a031215610d6a575f5ffd5b610d7388610d31565b965060208801359550610d8860408901610d31565b945060608801359350610d9d60808901610d31565b925060a088013567ffffffffffffffff811115610db8575f5ffd5b8801601f81018a13610dc8575f5ffd5b803567ffffffffffffffff811115610dde575f5ffd5b8a6020828401011115610def575f5ffd5b602082019350809250505092959891949750929550565b5f60208284031215610e16575f5ffd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b80820180821115610e5d57610e5d610e1d565b92915050565b81810381811115610e5d57610e5d610e1d56fea2646970667358221220a4698c83bda27c503ae925fd1b3728a65ebb333cfbb0d185e03bea01ee8815bd64736f6c634300081d0033";

type CoreRouteFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CoreRouteFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CoreRouteFacet__factory extends ContractFactory {
  constructor(...args: CoreRouteFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CoreRouteFacet> {
    return super.deploy(overrides || {}) as Promise<CoreRouteFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CoreRouteFacet {
    return super.attach(address) as CoreRouteFacet;
  }
  override connect(signer: Signer): CoreRouteFacet__factory {
    return super.connect(signer) as CoreRouteFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CoreRouteFacetInterface {
    return new utils.Interface(_abi) as CoreRouteFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CoreRouteFacet {
    return new Contract(address, _abi, signerOrProvider) as CoreRouteFacet;
  }
}
