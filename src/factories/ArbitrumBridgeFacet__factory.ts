/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  ArbitrumBridgeFacet,
  ArbitrumBridgeFacetInterface,
} from "../ArbitrumBridgeFacet";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_gatewayRouter",
        type: "address",
        internalType: "contract IGatewayRouter",
      },
      {
        name: "_inbox",
        type: "address",
        internalType: "contract IGatewayRouter",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "startBridgeTokensViaArbitrumBridge",
    inputs: [
      {
        name: "_bridgeData",
        type: "tuple",
        internalType: "struct ILiFi.BridgeData",
        components: [
          {
            name: "transactionId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "bridge",
            type: "string",
            internalType: "string",
          },
          {
            name: "integrator",
            type: "string",
            internalType: "string",
          },
          {
            name: "referrer",
            type: "address",
            internalType: "address",
          },
          {
            name: "sendingAssetId",
            type: "address",
            internalType: "address",
          },
          {
            name: "receiver",
            type: "address",
            internalType: "address",
          },
          {
            name: "minAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "destinationChainId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "hasSourceSwaps",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "hasDestinationCall",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
      {
        name: "_arbitrumData",
        type: "tuple",
        internalType: "struct ArbitrumBridgeFacet.ArbitrumData",
        components: [
          {
            name: "maxSubmissionCost",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "maxGas",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "maxGasPrice",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "swapAndStartBridgeTokensViaArbitrumBridge",
    inputs: [
      {
        name: "_bridgeData",
        type: "tuple",
        internalType: "struct ILiFi.BridgeData",
        components: [
          {
            name: "transactionId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "bridge",
            type: "string",
            internalType: "string",
          },
          {
            name: "integrator",
            type: "string",
            internalType: "string",
          },
          {
            name: "referrer",
            type: "address",
            internalType: "address",
          },
          {
            name: "sendingAssetId",
            type: "address",
            internalType: "address",
          },
          {
            name: "receiver",
            type: "address",
            internalType: "address",
          },
          {
            name: "minAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "destinationChainId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "hasSourceSwaps",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "hasDestinationCall",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
      {
        name: "_swapData",
        type: "tuple[]",
        internalType: "struct LibSwap.SwapData[]",
        components: [
          {
            name: "callTo",
            type: "address",
            internalType: "address",
          },
          {
            name: "approveTo",
            type: "address",
            internalType: "address",
          },
          {
            name: "sendingAssetId",
            type: "address",
            internalType: "address",
          },
          {
            name: "receivingAssetId",
            type: "address",
            internalType: "address",
          },
          {
            name: "fromAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "requiresDeposit",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
      {
        name: "_arbitrumData",
        type: "tuple",
        internalType: "struct ArbitrumBridgeFacet.ArbitrumData",
        components: [
          {
            name: "maxSubmissionCost",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "maxGas",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "maxGasPrice",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "event",
    name: "LiFiGenericSwapCompleted",
    inputs: [
      {
        name: "transactionId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "integrator",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "referrer",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "receiver",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "fromAssetId",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "toAssetId",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "fromAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "toAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "LiFiSwappedGeneric",
    inputs: [
      {
        name: "transactionId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "integrator",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "referrer",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "fromAssetId",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "toAssetId",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "fromAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "toAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "LiFiTransferCompleted",
    inputs: [
      {
        name: "transactionId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "receivingAssetId",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "receiver",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "timestamp",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "LiFiTransferRecovered",
    inputs: [
      {
        name: "transactionId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "receivingAssetId",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "receiver",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "timestamp",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "LiFiTransferStarted",
    inputs: [
      {
        name: "bridgeData",
        type: "tuple",
        indexed: false,
        internalType: "struct ILiFi.BridgeData",
        components: [
          {
            name: "transactionId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "bridge",
            type: "string",
            internalType: "string",
          },
          {
            name: "integrator",
            type: "string",
            internalType: "string",
          },
          {
            name: "referrer",
            type: "address",
            internalType: "address",
          },
          {
            name: "sendingAssetId",
            type: "address",
            internalType: "address",
          },
          {
            name: "receiver",
            type: "address",
            internalType: "address",
          },
          {
            name: "minAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "destinationChainId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "hasSourceSwaps",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "hasDestinationCall",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "CannotBridgeToSameNetwork",
    inputs: [],
  },
  {
    type: "error",
    name: "ContractCallNotAllowed",
    inputs: [],
  },
  {
    type: "error",
    name: "CumulativeSlippageTooHigh",
    inputs: [
      {
        name: "minAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "receivedAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "InformationMismatch",
    inputs: [],
  },
  {
    type: "error",
    name: "InsufficientBalance",
    inputs: [
      {
        name: "required",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "balance",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidAmount",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidContract",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidReceiver",
    inputs: [],
  },
  {
    type: "error",
    name: "NoSwapDataProvided",
    inputs: [],
  },
  {
    type: "error",
    name: "NoSwapFromZeroBalance",
    inputs: [],
  },
  {
    type: "error",
    name: "NullAddrIsNotAValidSpender",
    inputs: [],
  },
  {
    type: "error",
    name: "ReentrancyError",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b506040516200215038038062002150833981016040819052620000349162000069565b6001600160a01b039182166080521660a052620000a1565b80516001600160a01b03811681146200006457600080fd5b919050565b600080604083850312156200007d57600080fd5b62000088836200004c565b915062000098602084016200004c565b90509250929050565b60805160a051612082620000ce60003960006106b401526000818161083001526108a901526120826000f3fe6080604052600436106100295760003560e01c80633cc9517b1461002e578063c9851d0b14610043575b600080fd5b61004161003c366004611a82565b610056565b005b610041610051366004611b2e565b6102ac565b7fa65bb2f450488ab0858c00edc14abc5297769bf42adb48cfb77752890e8b697b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016100d1576040517f29f745a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181553360006100e23447611bac565b905086806101000151610121576040517f50dc905c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b878061012001511561015f576040517f50dc905c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b886101828160a0015173ffffffffffffffffffffffffffffffffffffffff161590565b156101b9576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060c001516000036101f7576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b468160e0015103610234576040517f4ac09ad300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610248604089013560208a0135611bbf565b610253908935611bd6565b905061026b8b600001518c60c001518c8c33866104f3565b60c08c015261027b8b8983610693565b5047925050508181111561029e5761029e6000846102998585611bac565b6109f6565b505060009091555050505050565b7fa65bb2f450488ab0858c00edc14abc5297769bf42adb48cfb77752890e8b697b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610327576040517f29f745a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181553360006103383447611bac565b90508480610100015115610378576040517f50dc905c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85806101200151156103b6576040517f50dc905c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b866103d98160a0015173ffffffffffffffffffffffffffffffffffffffff161590565b15610410576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060c0015160000361044e576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b468160e001510361048b576040517f4ac09ad300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061049f604089013560208a0135611bbf565b6104aa908935611bd6565b90506104be89608001518a60c00151610a2b565b6104c9898983610693565b504792505050818111156104e7576104e76000846102998585611bac565b50506000909155505050565b60008380820361052f576040517f0503c3ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000868661053e600185611bac565b81811061054d5761054d611be9565b905060200281019061055f9190611c18565b610570906080810190606001611c56565b9050600061057d82610ae0565b905073ffffffffffffffffffffffffffffffffffffffff82166105a7576105a43482611bac565b90505b60006105b38989610b2b565b90506105bf8989610c37565b604080516060810182528c815273ffffffffffffffffffffffffffffffffffffffff891660208201529081018790526105fa818b8b85610ca4565b60008361060686610ae0565b6106109190611bac565b905073ffffffffffffffffffffffffffffffffffffffff851661063a576106378882611bac565b90505b8b811015610683576040517f275c273c000000000000000000000000000000000000000000000000000000008152600481018d9052602481018290526044015b60405180910390fd5b9c9b505050505050505050505050565b608083015173ffffffffffffffffffffffffffffffffffffffff166107e1577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636e6e8a6a828560c001516106fe9190611bd6565b60a086015160c08701516040805160e086901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff90931660048401819052602484019290925287356044840152606483018290526084830191909152602087013560a483015286013560c482015261010060e482015260006101048201526101240160206040518083038185885af11580156107b6573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906107db9190611c7a565b506109ba565b60808301516040517fbda009fe00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301526108a792917f00000000000000000000000000000000000000000000000000000000000000009091169063bda009fe90602401602060405180830381865afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d9190611c93565b8560c00151611095565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d2ce7d658285608001518660a001518760c0015187602001358860400135896000013560405160200161092391815260406020820181905260009082015260600190565b6040516020818303038152906040526040518863ffffffff1660e01b815260040161095396959493929190611d1e565b60006040518083038185885af1158015610971573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109b89190810190611d69565b505b7fcba69f43792f9f399347222505213b55af8e0b0b54b893085c2e27ecbe1644f1836040516109e99190611de0565b60405180910390a1505050565b73ffffffffffffffffffffffffffffffffffffffff8316610a2057610a1b82826110c1565b505050565b610a1b83838361112e565b80600003610a65576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610abe5780341015610aba576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b610aba73ffffffffffffffffffffffffffffffffffffffff831633308461119c565b600073ffffffffffffffffffffffffffffffffffffffff821615610b2357610b1e73ffffffffffffffffffffffffffffffffffffffff8316306111f9565b610b25565b475b92915050565b60608160008167ffffffffffffffff811115610b4957610b496117fc565b604051908082528060200260200182016040528015610b72578160200160208202803683370190505b5090506000805b83811015610c2c57868682818110610b9357610b93611be9565b9050602002810190610ba59190611c18565b610bb6906080810190606001611c56565b9150610bc182610ae0565b838281518110610bd357610bd3611be9565b602090810291909101015273ffffffffffffffffffffffffffffffffffffffff8216610c245734838281518110610c0c57610c0c611be9565b60200260200101818151610c209190611bac565b9052505b600101610b79565b509095945050505050565b60005b81811015610a1b5736838383818110610c5557610c55611be9565b9050602002810190610c679190611c18565b9050610c7960e0820160c08301611ef3565b15610c9b57610c9b610c916060830160408401611c56565b8260800135610a2b565b50600101610c3a565b602084015160408501518491849184908360018114610fae5760008686610ccc600185611bac565b818110610cdb57610cdb611be9565b9050602002810190610ced9190611c18565b610cfe906080810190606001611c56565b9050600089815b81811015610eab57368d8d83818110610d2057610d20611be9565b9050602002810190610d329190611c18565b9050610d61610d476060830160408401611c56565b73ffffffffffffffffffffffffffffffffffffffff161590565b80610dc45750610dc4610d7a6040830160208401611c56565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f7a8ac5d3b7183f220a0602439da45ea337311d699902d1ed11a3725a714e7f1e602052604090205460ff1690565b8015610ddb5750610ddb610d7a6020830183611c56565b8015610e605750610e60610df260a0830183611f0e565b610e0191600491600091611f7a565b610e0a91611fa4565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081527f7a8ac5d3b7183f220a0602439da45ea337311d699902d1ed11a3725a714e7f1f602052604090205460ff1690565b610e96576040517f9453980400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8e51610ea2908261122e565b50600101610d05565b505060005b610ebb600185611bac565b811015610fa6576000898983818110610ed657610ed6611be9565b9050602002810190610ee89190611c18565b610ef9906080810190606001611c56565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610f9d57868281518110610f4057610f40611be9565b6020026020010151610f5182610ae0565b610f5b9190611bac565b9250600073ffffffffffffffffffffffffffffffffffffffff821615610f82576000610f84565b865b90508315610f9b57610f9b828a6102998488611bac565b505b50600101610eb0565b505050611089565b8760005b8181101561108657368b8b83818110610fcd57610fcd611be9565b9050602002810190610fdf9190611c18565b9050610ff4610d476060830160408401611c56565b8061100d575061100d610d7a6040830160208401611c56565b80156110245750611024610d7a6020830183611c56565b801561103b575061103b610df260a0830183611f0e565b611071576040517f9453980400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8c5161107d908261122e565b50600101610fb2565b50505b50505050505050505050565b610a1b8383837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61150b565b73ffffffffffffffffffffffffffffffffffffffff821661110e576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610aba73ffffffffffffffffffffffffffffffffffffffff83168261161e565b73ffffffffffffffffffffffffffffffffffffffff821661117b576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a1b73ffffffffffffffffffffffffffffffffffffffff8416838361163a565b60405181606052826040528360601b602c526f23b872dd000000000000000000000000600c52602060006064601c6000895af13d1560016000511417166111eb57637939f4246000526004601cfd5b600060605260405250505050565b6000816014526f70a0823100000000000000000000000060005260208060246010865afa601f3d111660205102905092915050565b61124361123e6020830183611c56565b611689565b611279576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b608081013560008190036112b9576040517fe46e079c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006112ce610d476060850160408601611c56565b6112d95760006112df565b82608001355b905060006112fb6112f66060860160408701611c56565b610ae0565b905060006113126112f66080870160608801611c56565b9050826000036113495761134961132f6060870160408801611c56565b61133f6040880160208901611c56565b8760800135611095565b8460800135821015611394576040517fcf479181000000000000000000000000000000000000000000000000000000008152608086013560048201526024810183905260440161067a565b6000806113a46020880188611c56565b73ffffffffffffffffffffffffffffffffffffffff16856113c860a08a018a611f0e565b6040516113d6929190611fec565b60006040518083038185875af1925050503d8060008114611413576040519150601f19603f3d011682016040523d82523d6000602084013e611418565b606091505b50915091508161142b5761142b81611768565b60006114406112f660808a0160608b01611c56565b90507f7bfdfdb5e3a3776976e53cb0607060f54c5312701c8cba1155cc4d5394440b388961147160208b018b611c56565b61148160608c0160408d01611c56565b61149160808d0160608e01611c56565b8c608001358987116114a357866114ad565b6114ad8a88611bac565b6040805196875273ffffffffffffffffffffffffffffffffffffffff95861660208801529385169386019390935292166060840152608083019190915260a08201524260c082015260e00160405180910390a1505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8316611558576040517f63ba9bff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015283919086169063dd62ed3e90604401602060405180830381865afa1580156115cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f19190611c7a565b10156116185761161873ffffffffffffffffffffffffffffffffffffffff85168483611772565b50505050565b60003860003884865af1610aba5763b12d13eb6000526004601cfd5b81601452806034526fa9059cbb00000000000000000000000060005260206000604460106000875af13d15600160005114171661167f576390b8ec186000526004601cfd5b6000603452505050565b604080516003808252818301909252600091829182917fef0100000000000000000000000000000000000000000000000000000000000091839160208201818036833701905050863b945090507fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4706003600060208401893c863f9350600061171083611ffc565b90507fffffff00000000000000000000000000000000000000000000000000000000008085169082160361174c57506001979650505050505050565b60008611801561175c5750818514155b98975050505050505050565b8051602082018181fd5b81601452806034526f095ea7b300000000000000000000000060005260206000604460106000875af13d15600160005114171661167f5760006034526f095ea7b3000000000000000000000000600052600038604460106000875af1508060345260206000604460106000875af13d15600160005114171661167f57633e3f8f736000526004601cfd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610140810167ffffffffffffffff8111828210171561184f5761184f6117fc565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561189c5761189c6117fc565b604052919050565b600067ffffffffffffffff8211156118be576118be6117fc565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126118fb57600080fd5b813561190e611909826118a4565b611855565b81815284602083860101111561192357600080fd5b816020850160208301376000918101602001919091529392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461196257600080fd5b50565b803561197081611940565b919050565b8035801515811461197057600080fd5b6000610140828403121561199857600080fd5b6119a061182b565b905081358152602082013567ffffffffffffffff808211156119c157600080fd5b6119cd858386016118ea565b602084015260408401359150808211156119e657600080fd5b506119f3848285016118ea565b604083015250611a0560608301611965565b6060820152611a1660808301611965565b6080820152611a2760a08301611965565b60a082015260c082013560c082015260e082013560e0820152610100611a4e818401611975565b90820152610120611a60838201611975565b9082015292915050565b600060608284031215611a7c57600080fd5b50919050565b60008060008060a08587031215611a9857600080fd5b843567ffffffffffffffff80821115611ab057600080fd5b611abc88838901611985565b95506020870135915080821115611ad257600080fd5b818701915087601f830112611ae657600080fd5b813581811115611af557600080fd5b8860208260051b8501011115611b0a57600080fd5b602083019550809450505050611b238660408701611a6a565b905092959194509250565b60008060808385031215611b4157600080fd5b823567ffffffffffffffff811115611b5857600080fd5b611b6485828601611985565b925050611b748460208501611a6a565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115610b2557610b25611b7d565b8082028115828204841417610b2557610b25611b7d565b80820180821115610b2557610b25611b7d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff21833603018112611c4c57600080fd5b9190910192915050565b600060208284031215611c6857600080fd5b8135611c7381611940565b9392505050565b600060208284031215611c8c57600080fd5b5051919050565b600060208284031215611ca557600080fd5b8151611c7381611940565b60005b83811015611ccb578181015183820152602001611cb3565b50506000910152565b60008151808452611cec816020860160208601611cb0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff808916835280881660208401525085604083015284606083015283608083015260c060a083015261175c60c0830184611cd4565b600060208284031215611d7b57600080fd5b815167ffffffffffffffff811115611d9257600080fd5b8201601f81018413611da357600080fd5b8051611db1611909826118a4565b818152856020838501011115611dc657600080fd5b611dd7826020830160208601611cb0565b95945050505050565b602081528151602082015260006020830151610140806040850152611e09610160850183611cd4565b915060408501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0858403016060860152611e448382611cd4565b9250506060850151611e6e608086018273ffffffffffffffffffffffffffffffffffffffff169052565b50608085015173ffffffffffffffffffffffffffffffffffffffff811660a08601525060a085015173ffffffffffffffffffffffffffffffffffffffff811660c08601525060c085015160e085015260e0850151610100818187015280870151915050610120611ee18187018315159052565b90950151151593019290925250919050565b600060208284031215611f0557600080fd5b611c7382611975565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611f4357600080fd5b83018035915067ffffffffffffffff821115611f5e57600080fd5b602001915036819003821315611f7357600080fd5b9250929050565b60008085851115611f8a57600080fd5b83861115611f9757600080fd5b5050820193919092039150565b7fffffffff000000000000000000000000000000000000000000000000000000008135818116916004851015611fe45780818660040360031b1b83161692505b505092915050565b8183823760009101908152919050565b6000815160208301517fffffff0000000000000000000000000000000000000000000000000000000000808216935060038310156120445780818460030360031b1b83161693505b50505091905056fea2646970667358221220df711c3895eb58e277374e2265d02ebaf6f7dbcfbcd7267568363c533323ba5864736f6c63430008110033";

type ArbitrumBridgeFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArbitrumBridgeFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArbitrumBridgeFacet__factory extends ContractFactory {
  constructor(...args: ArbitrumBridgeFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _gatewayRouter: PromiseOrValue<string>,
    _inbox: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ArbitrumBridgeFacet> {
    return super.deploy(
      _gatewayRouter,
      _inbox,
      overrides || {}
    ) as Promise<ArbitrumBridgeFacet>;
  }
  override getDeployTransaction(
    _gatewayRouter: PromiseOrValue<string>,
    _inbox: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_gatewayRouter, _inbox, overrides || {});
  }
  override attach(address: string): ArbitrumBridgeFacet {
    return super.attach(address) as ArbitrumBridgeFacet;
  }
  override connect(signer: Signer): ArbitrumBridgeFacet__factory {
    return super.connect(signer) as ArbitrumBridgeFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArbitrumBridgeFacetInterface {
    return new utils.Interface(_abi) as ArbitrumBridgeFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ArbitrumBridgeFacet {
    return new Contract(address, _abi, signerOrProvider) as ArbitrumBridgeFacet;
  }
}
