/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { DeBridgeFacet, DeBridgeFacetInterface } from "../DeBridgeFacet";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_deBridgeGate",
        type: "address",
        internalType: "contract IDeBridgeGate",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "startBridgeTokensViaDeBridge",
    inputs: [
      {
        name: "_bridgeData",
        type: "tuple",
        internalType: "struct ILiFi.BridgeData",
        components: [
          {
            name: "transactionId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "bridge",
            type: "string",
            internalType: "string",
          },
          {
            name: "integrator",
            type: "string",
            internalType: "string",
          },
          {
            name: "referrer",
            type: "address",
            internalType: "address",
          },
          {
            name: "sendingAssetId",
            type: "address",
            internalType: "address",
          },
          {
            name: "receiver",
            type: "address",
            internalType: "address",
          },
          {
            name: "minAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "destinationChainId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "hasSourceSwaps",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "hasDestinationCall",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
      {
        name: "_deBridgeData",
        type: "tuple",
        internalType: "struct DeBridgeFacet.DeBridgeData",
        components: [
          {
            name: "nativeFee",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "useAssetFee",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "referralCode",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "autoParams",
            type: "tuple",
            internalType: "struct DeBridgeFacet.SubmissionAutoParamsTo",
            components: [
              {
                name: "executionFee",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "flags",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "fallbackAddress",
                type: "bytes",
                internalType: "bytes",
              },
              {
                name: "data",
                type: "bytes",
                internalType: "bytes",
              },
            ],
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "swapAndStartBridgeTokensViaDeBridge",
    inputs: [
      {
        name: "_bridgeData",
        type: "tuple",
        internalType: "struct ILiFi.BridgeData",
        components: [
          {
            name: "transactionId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "bridge",
            type: "string",
            internalType: "string",
          },
          {
            name: "integrator",
            type: "string",
            internalType: "string",
          },
          {
            name: "referrer",
            type: "address",
            internalType: "address",
          },
          {
            name: "sendingAssetId",
            type: "address",
            internalType: "address",
          },
          {
            name: "receiver",
            type: "address",
            internalType: "address",
          },
          {
            name: "minAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "destinationChainId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "hasSourceSwaps",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "hasDestinationCall",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
      {
        name: "_swapData",
        type: "tuple[]",
        internalType: "struct LibSwap.SwapData[]",
        components: [
          {
            name: "callTo",
            type: "address",
            internalType: "address",
          },
          {
            name: "approveTo",
            type: "address",
            internalType: "address",
          },
          {
            name: "sendingAssetId",
            type: "address",
            internalType: "address",
          },
          {
            name: "receivingAssetId",
            type: "address",
            internalType: "address",
          },
          {
            name: "fromAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "requiresDeposit",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
      {
        name: "_deBridgeData",
        type: "tuple",
        internalType: "struct DeBridgeFacet.DeBridgeData",
        components: [
          {
            name: "nativeFee",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "useAssetFee",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "referralCode",
            type: "uint32",
            internalType: "uint32",
          },
          {
            name: "autoParams",
            type: "tuple",
            internalType: "struct DeBridgeFacet.SubmissionAutoParamsTo",
            components: [
              {
                name: "executionFee",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "flags",
                type: "uint256",
                internalType: "uint256",
              },
              {
                name: "fallbackAddress",
                type: "bytes",
                internalType: "bytes",
              },
              {
                name: "data",
                type: "bytes",
                internalType: "bytes",
              },
            ],
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "event",
    name: "LiFiGenericSwapCompleted",
    inputs: [
      {
        name: "transactionId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "integrator",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "referrer",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "receiver",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "fromAssetId",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "toAssetId",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "fromAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "toAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "LiFiSwappedGeneric",
    inputs: [
      {
        name: "transactionId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "integrator",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "referrer",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "fromAssetId",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "toAssetId",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "fromAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "toAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "LiFiTransferCompleted",
    inputs: [
      {
        name: "transactionId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "receivingAssetId",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "receiver",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "timestamp",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "LiFiTransferRecovered",
    inputs: [
      {
        name: "transactionId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "receivingAssetId",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "receiver",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "timestamp",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "LiFiTransferStarted",
    inputs: [
      {
        name: "bridgeData",
        type: "tuple",
        indexed: false,
        internalType: "struct ILiFi.BridgeData",
        components: [
          {
            name: "transactionId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "bridge",
            type: "string",
            internalType: "string",
          },
          {
            name: "integrator",
            type: "string",
            internalType: "string",
          },
          {
            name: "referrer",
            type: "address",
            internalType: "address",
          },
          {
            name: "sendingAssetId",
            type: "address",
            internalType: "address",
          },
          {
            name: "receiver",
            type: "address",
            internalType: "address",
          },
          {
            name: "minAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "destinationChainId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "hasSourceSwaps",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "hasDestinationCall",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "CannotBridgeToSameNetwork",
    inputs: [],
  },
  {
    type: "error",
    name: "ContractCallNotAllowed",
    inputs: [],
  },
  {
    type: "error",
    name: "CumulativeSlippageTooHigh",
    inputs: [
      {
        name: "minAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "receivedAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "InformationMismatch",
    inputs: [],
  },
  {
    type: "error",
    name: "InsufficientBalance",
    inputs: [
      {
        name: "required",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "balance",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidAmount",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidContract",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidReceiver",
    inputs: [],
  },
  {
    type: "error",
    name: "NativeAssetTransferFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "NoSwapDataProvided",
    inputs: [],
  },
  {
    type: "error",
    name: "NoSwapFromZeroBalance",
    inputs: [],
  },
  {
    type: "error",
    name: "NoTransferToNullAddress",
    inputs: [],
  },
  {
    type: "error",
    name: "NullAddrIsNotAValidSpender",
    inputs: [],
  },
  {
    type: "error",
    name: "NullAddrIsNotAnERC20Token",
    inputs: [],
  },
  {
    type: "error",
    name: "ReentrancyError",
    inputs: [],
  },
  {
    type: "error",
    name: "SliceOutOfBounds",
    inputs: [],
  },
  {
    type: "error",
    name: "SliceOverflow",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162002dd638038062002dd6833981016040819052620000349162000046565b6001600160a01b031660805262000078565b6000602082840312156200005957600080fd5b81516001600160a01b03811681146200007157600080fd5b9392505050565b608051612d2d620000a96000396000818161068c0152818161071a01528181610831015261085c0152612d2d6000f3fe6080604052600436106100295760003560e01c80635fcb02601461002e578063be3d5ec514610043575b600080fd5b61004161003c366004612293565b610056565b005b61004161005136600461256e565b61026d565b7fa65bb2f450488ab0858c00edc14abc5297769bf42adb48cfb77752890e8b697b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016100d1576040517f29f745a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181553360006100e2344761265c565b90506100ed8561266f565b60a081015173ffffffffffffffffffffffffffffffffffffffff1661013e576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060c0015160000361017c576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b468160e00151036101b9576040517f4ac09ad300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101c28661266f565b806101000151156101ff576040517f50dc905c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61021161020b8861266f565b87610466565b61022e61022460a0890160808a0161267b565b8860c001356104cb565b61024061023a8861266f565b87610647565b50479050818111156102615761026160008461025c858561265c565b6109f2565b50506000909155505050565b7fa65bb2f450488ab0858c00edc14abc5297769bf42adb48cfb77752890e8b697b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016102e8576040517f29f745a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181553360006102f9344761265c565b905086806101000151610338576040517f50dc905c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8761035b8160a0015173ffffffffffffffffffffffffffffffffffffffff161590565b15610392576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060c001516000036103d0576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b468160e001510361040d576040517f4ac09ad300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104178987610466565b885160c08a015161042d91908a8a338b35610a23565b60c08a015261043c8987610647565b50479050818111156104585761045860008461025c858561265c565b505060009091555050505050565b6101208201511515600061047d6060840184612696565b61048b9060608101906126d4565b9050111515146104c7576040517f50dc905c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b80600003610505576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821661055a57803410156104c7576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa1580156105c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105eb9190612740565b905081811015610636576040517fcf47918100000000000000000000000000000000000000000000000000000000815260048101839052602481018290526044015b60405180910390fd5b61064283333085610bbe565b505050565b60e08201516040517f7796656c00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001691637796656c916106c39160040190815260200190565b606060405180830381865afa1580156106e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107049190612759565b8051909150600090156107185781516107a7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166335087f0a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a79190612740565b9050823581146107e3576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610807856080015173ffffffffffffffffffffffffffffffffffffffff161590565b9050833581156108275760c086015161082090826127c9565b905061085a565b61085a86608001517f00000000000000000000000000000000000000000000000000000000000000008860c00151610de9565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663be2974768288608001518960c001518a60e001518b60a001516040516020016108e6919060609190911b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016815260140190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152610923908d0160208e016127dc565b61093360608e0160408f016127f9565b61094060608f018f612696565b60405160200161095091906128cc565b6040516020818303038152906040526040518963ffffffff1660e01b815260040161098197969594939291906129c2565b6000604051808303818588803b15801561099a57600080fd5b505af11580156109ae573d6000803e3d6000fd5b50505050507fcba69f43792f9f399347222505213b55af8e0b0b54b893085c2e27ecbe1644f1866040516109e29190612a46565b60405180910390a1505050505050565b73ffffffffffffffffffffffffffffffffffffffff831615610a1957610642838383610f2c565b61064282826110ae565b600083808203610a5f576040517f0503c3ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008686610a6e60018561265c565b818110610a7d57610a7d612b59565b9050602002810190610a8f9190612b88565b610aa090608081019060600161267b565b90506000610aad826111d8565b905073ffffffffffffffffffffffffffffffffffffffff8216610ad757610ad4348261265c565b90505b6000610ae38989611291565b9050610aef898961139d565b604080516060810182528c815273ffffffffffffffffffffffffffffffffffffffff89166020820152908101879052610b2a818b8b8561140a565b600083610b36866111d8565b610b40919061265c565b905073ffffffffffffffffffffffffffffffffffffffff8516610b6a57610b67888261265c565b90505b8b811015610bae576040517f275c273c000000000000000000000000000000000000000000000000000000008152600481018d90526024810182905260440161062d565b9c9b505050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8416610c0b576040517fd1bebf0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610c58576040517f21f7434500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015285916000918316906370a0823190602401602060405180830381865afa158015610cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ced9190612740565b9050610cfb828686866117fb565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015260009183918516906370a0823190602401602060405180830381865afa158015610d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d909190612740565b610d9a919061265c565b905083610da88260016127c9565b1015610de0576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff8316610e0957505050565b73ffffffffffffffffffffffffffffffffffffffff8216610e56576040517f63ba9bff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015282919085169063dd62ed3e90604401602060405180830381865afa158015610ecb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eef9190612740565b101561064257610f01838360006118d7565b61064283837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6118d7565b73ffffffffffffffffffffffffffffffffffffffff8316610f79576040517fd1bebf0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610fc6576040517f21f7434500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015611033573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110579190612740565b90508082111561109d576040517fcf479181000000000000000000000000000000000000000000000000000000008152600481018390526024810182905260440161062d565b6110a8848484611a59565b50505050565b73ffffffffffffffffffffffffffffffffffffffff82166110fb576040517f21f7434500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4781111561113e576040517fcf4791810000000000000000000000000000000000000000000000000000000081526004810182905247602482015260440161062d565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114611198576040519150601f19603f3d011682016040523d82523d6000602084013e61119d565b606091505b5050905080610642576040517f5a04673700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff821615611289576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015611260573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112849190612740565b61128b565b475b92915050565b60608160008167ffffffffffffffff8111156112af576112af612300565b6040519080825280602002602001820160405280156112d8578160200160208202803683370190505b5090506000805b83811015611392578686828181106112f9576112f9612b59565b905060200281019061130b9190612b88565b61131c90608081019060600161267b565b9150611327826111d8565b83828151811061133957611339612b59565b602090810291909101015273ffffffffffffffffffffffffffffffffffffffff821661138a573483828151811061137257611372612b59565b60200260200101818151611386919061265c565b9052505b6001016112df565b509095945050505050565b60005b8181101561064257368383838181106113bb576113bb612b59565b90506020028101906113cd9190612b88565b90506113df60e0820160c083016127dc565b15611401576114016113f7606083016040840161267b565b82608001356104cb565b506001016113a0565b602084015160408501518491849184908360018114611714576000868661143260018561265c565b81811061144157611441612b59565b90506020028101906114539190612b88565b61146490608081019060600161267b565b9050600089815b8181101561161157368d8d8381811061148657611486612b59565b90506020028101906114989190612b88565b90506114c76114ad606083016040840161267b565b73ffffffffffffffffffffffffffffffffffffffff161590565b8061152a575061152a6114e0604083016020840161267b565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f7a8ac5d3b7183f220a0602439da45ea337311d699902d1ed11a3725a714e7f1e602052604090205460ff1690565b801561154157506115416114e0602083018361267b565b80156115c657506115c661155860a08301836126d4565b61156791600491600091612bbc565b61157091612be6565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081527f7a8ac5d3b7183f220a0602439da45ea337311d699902d1ed11a3725a714e7f1f602052604090205460ff1690565b6115fc576040517f9453980400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8e516116089082611aaf565b5060010161146b565b505060005b61162160018561265c565b81101561170c57600089898381811061163c5761163c612b59565b905060200281019061164e9190612b88565b61165f90608081019060600161267b565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611703578682815181106116a6576116a6612b59565b60200260200101516116b7826111d8565b6116c1919061265c565b9250600073ffffffffffffffffffffffffffffffffffffffff8216156116e85760006116ea565b865b9050831561170157611701828a61025c848861265c565b505b50600101611616565b5050506117ef565b8760005b818110156117ec57368b8b8381811061173357611733612b59565b90506020028101906117459190612b88565b905061175a6114ad606083016040840161267b565b8061177357506117736114e0604083016020840161267b565b801561178a575061178a6114e0602083018361267b565b80156117a157506117a161155860a08301836126d4565b6117d7576040517f9453980400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8c516117e39082611aaf565b50600101611718565b50505b50505050505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526110a89085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611dc5565b80158061197757506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611951573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119759190612740565b155b611a03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161062d565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106429084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611855565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106429084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611855565b611ac5611abf602083018361267b565b3b151590565b611afb576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60808101356000819003611b3b576040517fe46e079c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611b506114ad606085016040860161267b565b611b5b576000611b61565b82608001355b90506000611b7d611b78606086016040870161267b565b6111d8565b90506000611b94611b78608087016060880161267b565b905082600003611bcb57611bcb611bb1606087016040880161267b565b611bc1604088016020890161267b565b8760800135610de9565b8460800135821015611c16576040517fcf479181000000000000000000000000000000000000000000000000000000008152608086013560048201526024810183905260440161062d565b600080611c26602088018861267b565b73ffffffffffffffffffffffffffffffffffffffff1685611c4a60a08a018a6126d4565b604051611c58929190612c2e565b60006040518083038185875af1925050503d8060008114611c95576040519150601f19603f3d011682016040523d82523d6000602084013e611c9a565b606091505b509150915081611ce5576000611caf82611ed4565b9050806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062d9190612c3e565b6000611cfa611b7860808a0160608b0161267b565b90507f7bfdfdb5e3a3776976e53cb0607060f54c5312701c8cba1155cc4d5394440b3889611d2b60208b018b61267b565b611d3b60608c0160408d0161267b565b611d4b60808d0160608e0161267b565b8c60800135898711611d5d5786611d67565b611d678a8861265c565b6040805196875273ffffffffffffffffffffffffffffffffffffffff95861660208801529385169386019390935292166060840152608083019190915260a08201524260c082015260e00160405180910390a1505050505050505050565b6000611e27826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611f529092919063ffffffff16565b9050805160001480611e48575080806020019051810190611e489190612c51565b610642576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161062d565b6060604482511015611f1957505060408051808201909152601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015290565b6000611f356004808551611f2d919061265c565b859190611f69565b905080806020019051810190611f4b9190612c6e565b9392505050565b6060611f618484600085612083565b949350505050565b606081611f7781601f6127c9565b1015611faf576040517f47aaf07a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611fb982846127c9565b84511015611ff3576040517f3b99b53d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606082158015612012576040519150600082526020820160405261207a565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561204b578051835260209283019201612033565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b606082471015612115576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161062d565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161213e9190612ce5565b60006040518083038185875af1925050503d806000811461217b576040519150601f19603f3d011682016040523d82523d6000602084013e612180565b606091505b50915091506121918783838761219c565b979650505050505050565b6060831561223257825160000361222b5773ffffffffffffffffffffffffffffffffffffffff85163b61222b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161062d565b5081611f61565b611f6183838151156122475781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062d9190612c3e565b60006080828403121561228d57600080fd5b50919050565b600080604083850312156122a657600080fd5b823567ffffffffffffffff808211156122be57600080fd5b9084019061014082870312156122d357600080fd5b909250602084013590808211156122e957600080fd5b506122f68582860161227b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610140810167ffffffffffffffff8111828210171561235357612353612300565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156123a0576123a0612300565b604052919050565b600067ffffffffffffffff8211156123c2576123c2612300565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126123ff57600080fd5b813561241261240d826123a8565b612359565b81815284602083860101111561242757600080fd5b816020850160208301376000918101602001919091529392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461246857600080fd5b919050565b801515811461247b57600080fd5b50565b80356124688161246d565b6000610140828403121561249c57600080fd5b6124a461232f565b905081358152602082013567ffffffffffffffff808211156124c557600080fd5b6124d1858386016123ee565b602084015260408401359150808211156124ea57600080fd5b506124f7848285016123ee565b60408301525061250960608301612444565b606082015261251a60808301612444565b608082015261252b60a08301612444565b60a082015260c082013560c082015260e082013560e082015261010061255281840161247e565b9082015261012061256483820161247e565b9082015292915050565b6000806000806060858703121561258457600080fd5b843567ffffffffffffffff8082111561259c57600080fd5b6125a888838901612489565b955060208701359150808211156125be57600080fd5b818701915087601f8301126125d257600080fd5b8135818111156125e157600080fd5b8860208260051b85010111156125f657600080fd5b60208301955080945050604087013591508082111561261457600080fd5b506126218782880161227b565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561128b5761128b61262d565b600061128b3683612489565b60006020828403121561268d57600080fd5b611f4b82612444565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818336030181126126ca57600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261270957600080fd5b83018035915067ffffffffffffffff82111561272457600080fd5b60200191503681900382131561273957600080fd5b9250929050565b60006020828403121561275257600080fd5b5051919050565b60006060828403121561276b57600080fd5b6040516060810181811067ffffffffffffffff8211171561278e5761278e612300565b6040528251815260208301516127a38161246d565b6020820152604083015161ffff811681146127bd57600080fd5b60408201529392505050565b8082018082111561128b5761128b61262d565b6000602082840312156127ee57600080fd5b8135611f4b8161246d565b60006020828403121561280b57600080fd5b813563ffffffff81168114611f4b57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261285457600080fd5b830160208101925035905067ffffffffffffffff81111561287457600080fd5b80360382131561273957600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60208152813560208201526020820135604082015260006128f0604084018461281f565b6080606085015261290560a085018284612883565b915050612915606085018561281f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe085840301608086015261294a838284612883565b9695505050505050565b60005b8381101561296f578181015183820152602001612957565b50506000910152565b60008151808452612990816020860160208601612954565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600061010073ffffffffffffffffffffffffffffffffffffffff8a1683528860208401528760408401528060608401526129fe81840188612978565b90508281038060808501526000825286151560a085015263ffffffff861660c08501526020810160e085015250612a386020820185612978565b9a9950505050505050505050565b602081528151602082015260006020830151610140806040850152612a6f610160850183612978565b915060408501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0858403016060860152612aaa8382612978565b9250506060850151612ad4608086018273ffffffffffffffffffffffffffffffffffffffff169052565b50608085015173ffffffffffffffffffffffffffffffffffffffff811660a08601525060a085015173ffffffffffffffffffffffffffffffffffffffff811660c08601525060c085015160e085015260e0850151610100818187015280870151915050610120612b478187018315159052565b90950151151593019290925250919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff218336030181126126ca57600080fd5b60008085851115612bcc57600080fd5b83861115612bd957600080fd5b5050820193919092039150565b7fffffffff000000000000000000000000000000000000000000000000000000008135818116916004851015612c265780818660040360031b1b83161692505b505092915050565b8183823760009101908152919050565b602081526000611f4b6020830184612978565b600060208284031215612c6357600080fd5b8151611f4b8161246d565b600060208284031215612c8057600080fd5b815167ffffffffffffffff811115612c9757600080fd5b8201601f81018413612ca857600080fd5b8051612cb661240d826123a8565b818152856020838501011115612ccb57600080fd5b612cdc826020830160208601612954565b95945050505050565b600082516126ca81846020870161295456fea26469706673582212202abae03d6c037d87aef6998967acd3d44c38cf705f9b5e3d092d20c15de6310f64736f6c63430008110033";

type DeBridgeFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DeBridgeFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DeBridgeFacet__factory extends ContractFactory {
  constructor(...args: DeBridgeFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _deBridgeGate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DeBridgeFacet> {
    return super.deploy(
      _deBridgeGate,
      overrides || {}
    ) as Promise<DeBridgeFacet>;
  }
  override getDeployTransaction(
    _deBridgeGate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_deBridgeGate, overrides || {});
  }
  override attach(address: string): DeBridgeFacet {
    return super.attach(address) as DeBridgeFacet;
  }
  override connect(signer: Signer): DeBridgeFacet__factory {
    return super.connect(signer) as DeBridgeFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DeBridgeFacetInterface {
    return new utils.Interface(_abi) as DeBridgeFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DeBridgeFacet {
    return new Contract(address, _abi, signerOrProvider) as DeBridgeFacet;
  }
}
