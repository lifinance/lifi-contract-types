/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  CalledContract,
  CalledContractInterface,
} from "../../LibUtil.sol/CalledContract";

const _abi = [
  {
    type: "function",
    name: "callMe",
    inputs: [],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "callMeAlso",
    inputs: [],
    outputs: [],
    stateMutability: "pure",
  },
  {
    type: "error",
    name: "CallMeError",
    inputs: [],
  },
  {
    type: "error",
    name: "CallMeErrorWithMessage",
    inputs: [
      {
        name: "message",
        type: "string",
        internalType: "string",
      },
    ],
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610113806100206000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063591a2a69146037578063b0bea72514603f575b600080fd5b603d6045565b005b603d60ab565b6040517f49411f8800000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f446f6e27742063616c6c206d6521000000000000000000000000000000000000604482015260640160405180910390fd5b6040517f9f0d3cb000000000000000000000000000000000000000000000000000000000815260040160405180910390fdfea26469706673582212203a11141bb7c3204931b31c4d871ebf233b79f8dc353c52f1d9420a0c7ec0f29864736f6c63430008110033";

type CalledContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CalledContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CalledContract__factory extends ContractFactory {
  constructor(...args: CalledContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CalledContract> {
    return super.deploy(overrides || {}) as Promise<CalledContract>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CalledContract {
    return super.attach(address) as CalledContract;
  }
  override connect(signer: Signer): CalledContract__factory {
    return super.connect(signer) as CalledContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CalledContractInterface {
    return new utils.Interface(_abi) as CalledContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CalledContract {
    return new Contract(address, _abi, signerOrProvider) as CalledContract;
  }
}
