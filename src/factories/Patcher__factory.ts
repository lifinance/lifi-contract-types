/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Patcher, PatcherInterface } from "../Patcher";

const _abi = [
  {
    type: "function",
    name: "depositAndExecuteWithDynamicPatches",
    inputs: [
      {
        name: "tokenAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "valueSource",
        type: "address",
        internalType: "address",
      },
      {
        name: "valueGetter",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "finalTarget",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "offsets",
        type: "uint256[]",
        internalType: "uint256[]",
      },
      {
        name: "delegateCall",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "returnData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "depositAndExecuteWithMultiplePatches",
    inputs: [
      {
        name: "tokenAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "valueSources",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "valueGetters",
        type: "bytes[]",
        internalType: "bytes[]",
      },
      {
        name: "finalTarget",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "offsetGroups",
        type: "uint256[][]",
        internalType: "uint256[][]",
      },
      {
        name: "delegateCall",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "returnData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "executeWithDynamicPatches",
    inputs: [
      {
        name: "valueSource",
        type: "address",
        internalType: "address",
      },
      {
        name: "valueGetter",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "finalTarget",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "offsets",
        type: "uint256[]",
        internalType: "uint256[]",
      },
      {
        name: "delegateCall",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "returnData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "executeWithMultiplePatches",
    inputs: [
      {
        name: "valueSources",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "valueGetters",
        type: "bytes[]",
        internalType: "bytes[]",
      },
      {
        name: "finalTarget",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "offsetGroups",
        type: "uint256[][]",
        internalType: "uint256[][]",
      },
      {
        name: "delegateCall",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "returnData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "error",
    name: "CallExecutionFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "FailedToGetDynamicValue",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidPatchOffset",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidReceiver",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidReturnDataLength",
    inputs: [],
  },
  {
    type: "error",
    name: "MismatchedArrayLengths",
    inputs: [],
  },
  {
    type: "error",
    name: "NullAddrIsNotAValidSpender",
    inputs: [],
  },
  {
    type: "error",
    name: "NullAddrIsNotAnERC20Token",
    inputs: [],
  },
  {
    type: "error",
    name: "ZeroAddress",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b5061129f8061001c5f395ff3fe60806040526004361061003e575f3560e01c80634d91497914610042578063922c8daa1461006c578063b7c527771461007f578063efae576b14610092575b5f5ffd5b610055610050366004610c77565b6100a5565b604051610063929190610d6f565b60405180910390f35b61005561007a366004610dcb565b6100cf565b61005561008d366004610ea3565b6100ee565b6100556100a0366004610fb1565b610123565b5f60606100bb8d8d8d8d8d8d8d8d8d8d8d61014b565b915091509b509b9950505050505050505050565b5f60606100dc8d8a61035e565b6100bb8c8c8c8c8c8c8c8c8c8c61040a565b5f60606100fb8e8a61035e565b61010e8d8d8d8d8d8d8d8d8d8d8d61014b565b915091509c509c9a5050505050505050505050565b5f60606101388c8c8c8c8c8c8c8c8c8c61040a565b915091509a509a98505050505050505050565b5f60608b8a14158061015d57508b8414155b15610194576040517f568efce200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff89166101e1576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b60ff81168d11156102df576102358e8e8360ff168181106102065761020661108a565b905060200201602081019061021b91906110b7565b73ffffffffffffffffffffffffffffffffffffffff161590565b1561026c576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85858260ff168181106102815761028161108a565b905060200281019061029391906110d7565b90505f036102cd576040517faaf9032800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806102d781611168565b9150506101e3565b505f8667ffffffffffffffff8111156102fa576102fa611186565b6040519080825280601f01601f191660200182016040528015610324576020820181803683370190505b5090508688602083013761033d8e8e8e8e8a8a8761053e565b6103498a8a8387610600565b92509250509b509b9950505050505050505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201525f9073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa1580156103c8573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103ec91906111b3565b90506103fa83333084610737565b6104058383836107f9565b505050565b5f606073ffffffffffffffffffffffffffffffffffffffff8c161580610444575073ffffffffffffffffffffffffffffffffffffffff8916155b1561047b576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8490036104b5576040517faaf9032800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6104c18d8d8d610825565b90505f8767ffffffffffffffff8111156104dd576104dd611186565b6040519080825280601f01601f191660200182016040528015610507576020820181803683370190505b5090508789602083013761051d81888885610921565b6105298b8b8388610600565b9350935050509a509a98505050505050505050565b5f5b60ff81168711156105f6575f6105a589898460ff168181106105645761056461108a565b905060200201602081019061057991906110b7565b88888560ff1681811061058e5761058e61108a565b90506020028101906105a091906111ca565b610825565b9050365f86868560ff168181106105be576105be61108a565b90506020028101906105d091906110d7565b915091506105e085838386610921565b50505080806105ee90611168565b915050610540565b5050505050505050565b5f60608215610676578573ffffffffffffffffffffffffffffffffffffffff168460405161062e919061122b565b5f60405180830381855af49150503d805f8114610666576040519150601f19603f3d011682016040523d82523d5f602084013e61066b565b606091505b5090925090506106e2565b8573ffffffffffffffffffffffffffffffffffffffff16858560405161069c919061122b565b5f6040518083038185875af1925050503d805f81146106d6576040519150601f19603f3d011682016040523d82523d5f602084013e6106db565b606091505b5090925090505b8161072e578051156106fc576106f78161095d565b61072e565b6040517f6b3b657600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b94509492505050565b73ffffffffffffffffffffffffffffffffffffffff8416610784576040517fd1bebf0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166107d1576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107f373ffffffffffffffffffffffffffffffffffffffff8516848484610967565b50505050565b6104058383837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6109bf565b5f5f5f8573ffffffffffffffffffffffffffffffffffffffff16858560405161084f929190611241565b5f60405180830381855afa9150503d805f8114610887576040519150601f19603f3d011682016040523d82523d5f602084013e61088c565b606091505b5091509150816108c8576040517f9711393900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051602014610903576040517f3ad0505d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8080602001905181019061091791906111b3565b9695505050505050565b5f5b828110156109565761094e858585848181106109415761094161108a565b9050602002013584610ae6565b600101610923565b5050505050565b8051602082018181fd5b60405181606052826040528360601b602c526f23b872dd000000000000000000000000600c5260205f6064601c5f895af13d1560015f511417166109b257637939f4245f526004601cfd5b5f60605260405250505050565b73ffffffffffffffffffffffffffffffffffffffff8416156107f35773ffffffffffffffffffffffffffffffffffffffff8316610a28576040517f63ba9bff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015283919086169063dd62ed3e90604401602060405180830381865afa158015610a9b573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610abf91906111b3565b10156107f3576107f373ffffffffffffffffffffffffffffffffffffffff85168483610b33565b8251610af3836020611250565b1115610b2b576040517faaf9032800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b910160200152565b81601452806034526f095ea7b30000000000000000000000005f5260205f604460105f875af13d1560015f51141716610bb1575f6034526f095ea7b30000000000000000000000005f525f38604460105f875af1508060345260205f604460105f875af13d1560015f51141716610bb157633e3f8f735f526004601cfd5b5f603452505050565b5f5f83601f840112610bca575f5ffd5b50813567ffffffffffffffff811115610be1575f5ffd5b6020830191508360208260051b8501011115610bfb575f5ffd5b9250929050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610c25575f5ffd5b919050565b5f5f83601f840112610c3a575f5ffd5b50813567ffffffffffffffff811115610c51575f5ffd5b602083019150836020828501011115610bfb575f5ffd5b80358015158114610c25575f5ffd5b5f5f5f5f5f5f5f5f5f5f5f60e08c8e031215610c91575f5ffd5b8b3567ffffffffffffffff811115610ca7575f5ffd5b610cb38e828f01610bba565b909c509a505060208c013567ffffffffffffffff811115610cd2575f5ffd5b610cde8e828f01610bba565b909a509850610cf1905060408d01610c02565b965060608c0135955060808c013567ffffffffffffffff811115610d13575f5ffd5b610d1f8e828f01610c2a565b90965094505060a08c013567ffffffffffffffff811115610d3e575f5ffd5b610d4a8e828f01610bba565b9094509250610d5d905060c08d01610c68565b90509295989b509295989b9093969950565b8215158152604060208201525f82518060408401528060208501606085015e5f6060828501015260607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168401019150509392505050565b5f5f5f5f5f5f5f5f5f5f5f6101008c8e031215610de6575f5ffd5b610def8c610c02565b9a50610dfd60208d01610c02565b995060408c013567ffffffffffffffff811115610e18575f5ffd5b610e248e828f01610c2a565b909a509850610e37905060608d01610c02565b965060808c0135955060a08c013567ffffffffffffffff811115610e59575f5ffd5b610e658e828f01610c2a565b90965094505060c08c013567ffffffffffffffff811115610e84575f5ffd5b610e908e828f01610bba565b9094509250610d5d905060e08d01610c68565b5f5f5f5f5f5f5f5f5f5f5f5f6101008d8f031215610ebf575f5ffd5b610ec88d610c02565b9b5067ffffffffffffffff60208e01351115610ee2575f5ffd5b610ef28e60208f01358f01610bba565b909b50995067ffffffffffffffff60408e01351115610f0f575f5ffd5b610f1f8e60408f01358f01610bba565b9099509750610f3060608e01610c02565b965060808d0135955067ffffffffffffffff60a08e01351115610f51575f5ffd5b610f618e60a08f01358f01610c2a565b909550935067ffffffffffffffff60c08e01351115610f7e575f5ffd5b610f8e8e60c08f01358f01610bba565b9093509150610f9f60e08e01610c68565b90509295989b509295989b509295989b565b5f5f5f5f5f5f5f5f5f5f60e08b8d031215610fca575f5ffd5b610fd38b610c02565b995060208b013567ffffffffffffffff811115610fee575f5ffd5b610ffa8d828e01610c2a565b909a50985061100d905060408c01610c02565b965060608b0135955060808b013567ffffffffffffffff81111561102f575f5ffd5b61103b8d828e01610c2a565b90965094505060a08b013567ffffffffffffffff81111561105a575f5ffd5b6110668d828e01610bba565b9094509250611079905060c08c01610c68565b90509295989b9194979a5092959850565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f602082840312156110c7575f5ffd5b6110d082610c02565b9392505050565b5f5f83357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261110a575f5ffd5b83018035915067ffffffffffffffff821115611124575f5ffd5b6020019150600581901b3603821315610bfb575f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f60ff821660ff810361117d5761117d61113b565b60010192915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f602082840312156111c3575f5ffd5b5051919050565b5f5f83357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126111fd575f5ffd5b83018035915067ffffffffffffffff821115611217575f5ffd5b602001915036819003821315610bfb575f5ffd5b5f82518060208501845e5f920191825250919050565b818382375f9101908152919050565b808201808211156112635761126361113b565b9291505056fea2646970667358221220f12ab36b87f0ba137f6bb9fdfea28856974fae0f08c261a6e987c36211b1088f64736f6c634300081d0033";

type PatcherConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PatcherConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Patcher__factory extends ContractFactory {
  constructor(...args: PatcherConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Patcher> {
    return super.deploy(overrides || {}) as Promise<Patcher>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Patcher {
    return super.attach(address) as Patcher;
  }
  override connect(signer: Signer): Patcher__factory {
    return super.connect(signer) as Patcher__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PatcherInterface {
    return new utils.Interface(_abi) as PatcherInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Patcher {
    return new Contract(address, _abi, signerOrProvider) as Patcher;
  }
}
