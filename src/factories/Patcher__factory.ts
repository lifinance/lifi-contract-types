/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Patcher, PatcherInterface } from "../Patcher";

const _abi = [
  {
    type: "function",
    name: "depositAndExecuteWithDynamicPatches",
    inputs: [
      {
        name: "tokenAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "valueSource",
        type: "address",
        internalType: "address",
      },
      {
        name: "valueGetter",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "finalTarget",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "offsets",
        type: "uint256[]",
        internalType: "uint256[]",
      },
      {
        name: "delegateCall",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "returnData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "depositAndExecuteWithMultiplePatches",
    inputs: [
      {
        name: "tokenAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "valueSources",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "valueGetters",
        type: "bytes[]",
        internalType: "bytes[]",
      },
      {
        name: "finalTarget",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "offsetGroups",
        type: "uint256[][]",
        internalType: "uint256[][]",
      },
      {
        name: "delegateCall",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "returnData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "executeWithDynamicPatches",
    inputs: [
      {
        name: "valueSource",
        type: "address",
        internalType: "address",
      },
      {
        name: "valueGetter",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "finalTarget",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "offsets",
        type: "uint256[]",
        internalType: "uint256[]",
      },
      {
        name: "delegateCall",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "returnData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "executeWithMultiplePatches",
    inputs: [
      {
        name: "valueSources",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "valueGetters",
        type: "bytes[]",
        internalType: "bytes[]",
      },
      {
        name: "finalTarget",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "offsetGroups",
        type: "uint256[][]",
        internalType: "uint256[][]",
      },
      {
        name: "delegateCall",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "returnData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "error",
    name: "CallExecutionFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "FailedToGetDynamicValue",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidPatchOffset",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidReceiver",
    inputs: [],
  },
  {
    type: "error",
    name: "MismatchedArrayLengths",
    inputs: [],
  },
  {
    type: "error",
    name: "NullAddrIsNotAValidSpender",
    inputs: [],
  },
  {
    type: "error",
    name: "NullAddrIsNotAnERC20Token",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b5061107d8061001c5f395ff3fe60806040526004361061003e575f3560e01c80634d91497914610042578063922c8daa1461006c578063b7c527771461007f578063efae576b14610092575b5f5ffd5b610055610050366004610aa8565b6100a5565b604051610063929190610ba0565b60405180910390f35b61005561007a366004610bfc565b6100cf565b61005561008d366004610cd4565b6101a2565b6100556100a0366004610de2565b61027c565b5f60606100bb8d8d8d8d8d8d8d8d8d8d8d6102a4565b915091509b509b9950505050505050505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201525f90606090829073ffffffffffffffffffffffffffffffffffffffff8f16906370a0823190602401602060405180830381865afa15801561013e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101629190610ebb565b90506101708e33308461034f565b61017b8e8b83610411565b61018d8d8d8d8d8d8d8d8d8d8d610442565b92509250509b509b9950505050505050505050565b5f60605f8e73ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016101fb919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b602060405180830381865afa158015610216573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061023a9190610ebb565b90506102488f33308461034f565b6102538f8b83610411565b6102668e8e8e8e8e8e8e8e8e8e8e6102a4565b92509250509c509c9a5050505050505050505050565b5f60606102918c8c8c8c8c8c8c8c8c8c610442565b915091509a509a98505050505050505050565b5f60608b8a1415806102b657508b8414155b156102ed576040517f568efce200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f87878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505090506103438e8e8e8e8a8a876104bc565b61018d8a8a838761056a565b73ffffffffffffffffffffffffffffffffffffffff841661039c576040517fd1bebf0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166103e9576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61040b73ffffffffffffffffffffffffffffffffffffffff851684848461069b565b50505050565b61043d8383837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6106f3565b505050565b5f60605f6104518d8d8d61081a565b90505f88888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525092935061049b925083915089905088856108db565b6104a78b8b838861056a565b9350935050509a509a98505050505050505050565b5f5b86811015610560575f61051a8989848181106104dc576104dc610ed2565b90506020020160208101906104f19190610eff565b88888581811061050357610503610ed2565b90506020028101906105159190610f1f565b61081a565b9050365f86868581811061053057610530610ed2565b90506020028101906105429190610f80565b91509150610552858383866108db565b8360010193505050506104be565b5050505050505050565b5f606082156105e0578573ffffffffffffffffffffffffffffffffffffffff16846040516105989190610fe4565b5f60405180830381855af49150503d805f81146105d0576040519150601f19603f3d011682016040523d82523d5f602084013e6105d5565b606091505b50909250905061064c565b8573ffffffffffffffffffffffffffffffffffffffff1685856040516106069190610fe4565b5f6040518083038185875af1925050503d805f8114610640576040519150601f19603f3d011682016040523d82523d5f602084013e610645565b606091505b5090925090505b816106925780511561066057805160208201fd5b6040517f6b3b657600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b94509492505050565b60405181606052826040528360601b602c526f23b872dd000000000000000000000000600c5260205f6064601c5f895af13d1560015f511417166106e657637939f4245f526004601cfd5b5f60605260405250505050565b73ffffffffffffffffffffffffffffffffffffffff84161561040b5773ffffffffffffffffffffffffffffffffffffffff831661075c576040517f63ba9bff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015283919086169063dd62ed3e90604401602060405180830381865afa1580156107cf573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107f39190610ebb565b101561040b5761040b73ffffffffffffffffffffffffffffffffffffffff85168483610917565b5f5f5f8573ffffffffffffffffffffffffffffffffffffffff168585604051610844929190610ffa565b5f60405180830381855afa9150503d805f811461087c576040519150601f19603f3d011682016040523d82523d5f602084013e610881565b606091505b5091509150816108bd576040517f9711393900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808060200190518101906108d19190610ebb565b9695505050505050565b5f5b8281101561091057610908858585848181106108fb576108fb610ed2565b905060200201358461099e565b6001016108dd565b5050505050565b81601452806034526f095ea7b30000000000000000000000005f5260205f604460105f875af13d1560015f51141716610995575f6034526f095ea7b30000000000000000000000005f525f38604460105f875af1508060345260205f604460105f875af13d1560015f5114171661099557633e3f8f735f526004601cfd5b5f603452505050565b82516109ab836020611009565b11156109e3576040517faaf9032800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b910160200152565b5f5f83601f8401126109fb575f5ffd5b50813567ffffffffffffffff811115610a12575f5ffd5b6020830191508360208260051b8501011115610a2c575f5ffd5b9250929050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a56575f5ffd5b919050565b5f5f83601f840112610a6b575f5ffd5b50813567ffffffffffffffff811115610a82575f5ffd5b602083019150836020828501011115610a2c575f5ffd5b80358015158114610a56575f5ffd5b5f5f5f5f5f5f5f5f5f5f5f60e08c8e031215610ac2575f5ffd5b8b3567ffffffffffffffff811115610ad8575f5ffd5b610ae48e828f016109eb565b909c509a505060208c013567ffffffffffffffff811115610b03575f5ffd5b610b0f8e828f016109eb565b909a509850610b22905060408d01610a33565b965060608c0135955060808c013567ffffffffffffffff811115610b44575f5ffd5b610b508e828f01610a5b565b90965094505060a08c013567ffffffffffffffff811115610b6f575f5ffd5b610b7b8e828f016109eb565b9094509250610b8e905060c08d01610a99565b90509295989b509295989b9093969950565b8215158152604060208201525f82518060408401528060208501606085015e5f6060828501015260607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168401019150509392505050565b5f5f5f5f5f5f5f5f5f5f5f6101008c8e031215610c17575f5ffd5b610c208c610a33565b9a50610c2e60208d01610a33565b995060408c013567ffffffffffffffff811115610c49575f5ffd5b610c558e828f01610a5b565b909a509850610c68905060608d01610a33565b965060808c0135955060a08c013567ffffffffffffffff811115610c8a575f5ffd5b610c968e828f01610a5b565b90965094505060c08c013567ffffffffffffffff811115610cb5575f5ffd5b610cc18e828f016109eb565b9094509250610b8e905060e08d01610a99565b5f5f5f5f5f5f5f5f5f5f5f5f6101008d8f031215610cf0575f5ffd5b610cf98d610a33565b9b5067ffffffffffffffff60208e01351115610d13575f5ffd5b610d238e60208f01358f016109eb565b909b50995067ffffffffffffffff60408e01351115610d40575f5ffd5b610d508e60408f01358f016109eb565b9099509750610d6160608e01610a33565b965060808d0135955067ffffffffffffffff60a08e01351115610d82575f5ffd5b610d928e60a08f01358f01610a5b565b909550935067ffffffffffffffff60c08e01351115610daf575f5ffd5b610dbf8e60c08f01358f016109eb565b9093509150610dd060e08e01610a99565b90509295989b509295989b509295989b565b5f5f5f5f5f5f5f5f5f5f60e08b8d031215610dfb575f5ffd5b610e048b610a33565b995060208b013567ffffffffffffffff811115610e1f575f5ffd5b610e2b8d828e01610a5b565b909a509850610e3e905060408c01610a33565b965060608b0135955060808b013567ffffffffffffffff811115610e60575f5ffd5b610e6c8d828e01610a5b565b90965094505060a08b013567ffffffffffffffff811115610e8b575f5ffd5b610e978d828e016109eb565b9094509250610eaa905060c08c01610a99565b90509295989b9194979a5092959850565b5f60208284031215610ecb575f5ffd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215610f0f575f5ffd5b610f1882610a33565b9392505050565b5f5f83357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610f52575f5ffd5b83018035915067ffffffffffffffff821115610f6c575f5ffd5b602001915036819003821315610a2c575f5ffd5b5f5f83357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610fb3575f5ffd5b83018035915067ffffffffffffffff821115610fcd575f5ffd5b6020019150600581901b3603821315610a2c575f5ffd5b5f82518060208501845e5f920191825250919050565b818382375f9101908152919050565b80820180821115611041577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9291505056fea26469706673582212206a1ca1ea2f7b26e3d9301b1c32450d02966f11d893d7b76b1b39f9703d5b1ffc64736f6c634300081d0033";

type PatcherConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PatcherConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Patcher__factory extends ContractFactory {
  constructor(...args: PatcherConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Patcher> {
    return super.deploy(overrides || {}) as Promise<Patcher>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Patcher {
    return super.attach(address) as Patcher;
  }
  override connect(signer: Signer): Patcher__factory {
    return super.connect(signer) as Patcher__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PatcherInterface {
    return new utils.Interface(_abi) as PatcherInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Patcher {
    return new Contract(address, _abi, signerOrProvider) as Patcher;
  }
}
