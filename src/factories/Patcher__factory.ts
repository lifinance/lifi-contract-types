/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Patcher, PatcherInterface } from "../Patcher";

const _abi = [
  {
    type: "function",
    name: "depositAndExecuteWithDynamicPatches",
    inputs: [
      {
        name: "tokenAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "valueSource",
        type: "address",
        internalType: "address",
      },
      {
        name: "valueGetter",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "finalTarget",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "offsets",
        type: "uint256[]",
        internalType: "uint256[]",
      },
      {
        name: "delegateCall",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "returnData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "depositAndExecuteWithMultiplePatches",
    inputs: [
      {
        name: "tokenAddress",
        type: "address",
        internalType: "address",
      },
      {
        name: "valueSources",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "valueGetters",
        type: "bytes[]",
        internalType: "bytes[]",
      },
      {
        name: "finalTarget",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "offsetGroups",
        type: "uint256[][]",
        internalType: "uint256[][]",
      },
      {
        name: "delegateCall",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "returnData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "executeWithDynamicPatches",
    inputs: [
      {
        name: "valueSource",
        type: "address",
        internalType: "address",
      },
      {
        name: "valueGetter",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "finalTarget",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "offsets",
        type: "uint256[]",
        internalType: "uint256[]",
      },
      {
        name: "delegateCall",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "returnData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "executeWithMultiplePatches",
    inputs: [
      {
        name: "valueSources",
        type: "address[]",
        internalType: "address[]",
      },
      {
        name: "valueGetters",
        type: "bytes[]",
        internalType: "bytes[]",
      },
      {
        name: "finalTarget",
        type: "address",
        internalType: "address",
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "offsetGroups",
        type: "uint256[][]",
        internalType: "uint256[][]",
      },
      {
        name: "delegateCall",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool",
      },
      {
        name: "returnData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "error",
    name: "FailedToGetDynamicValue",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidPatchOffset",
    inputs: [],
  },
  {
    type: "error",
    name: "MismatchedArrayLengths",
    inputs: [],
  },
] as const;

const _bytecode =
  "";

type PatcherConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PatcherConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Patcher__factory extends ContractFactory {
  constructor(...args: PatcherConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Patcher> {
    return super.deploy(overrides || {}) as Promise<Patcher>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Patcher {
    return super.attach(address) as Patcher;
  }
  override connect(signer: Signer): Patcher__factory {
    return super.connect(signer) as Patcher__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PatcherInterface {
    return new utils.Interface(_abi) as PatcherInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Patcher {
    return new Contract(address, _abi, signerOrProvider) as Patcher;
  }
}
