/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IntentReceiver,
  IntentReceiverInterface,
} from "../IntentReceiver";

const _abi = [
  {
    type: "receive",
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "cancelIntent",
    inputs: [
      {
        name: "intent",
        type: "tuple",
        internalType: "struct IntentReceiver.SwapIntent",
        components: [
          {
            name: "fromAsset",
            type: "address",
            internalType: "address",
          },
          {
            name: "toAsset",
            type: "address",
            internalType: "address",
          },
          {
            name: "fromAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "minAmountOut",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "deadline",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "receiver",
            type: "address",
            internalType: "address payable",
          },
        ],
      },
      {
        name: "refundTo",
        type: "address",
        internalType: "address payable",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "cancelOwnershipTransfer",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "confirmOwnershipTransfer",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "executeIntent",
    inputs: [
      {
        name: "intent",
        type: "tuple",
        internalType: "struct IntentReceiver.SwapIntent",
        components: [
          {
            name: "fromAsset",
            type: "address",
            internalType: "address",
          },
          {
            name: "toAsset",
            type: "address",
            internalType: "address",
          },
          {
            name: "fromAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "minAmountOut",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "deadline",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "receiver",
            type: "address",
            internalType: "address payable",
          },
        ],
      },
      {
        name: "exec",
        type: "tuple",
        internalType: "struct IntentReceiver.IntentExecution",
        components: [
          {
            name: "callTo",
            type: "address",
            internalType: "address",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "value",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "feeAmount",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "feeCollector",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getIntentId",
    inputs: [
      {
        name: "intent",
        type: "tuple",
        internalType: "struct IntentReceiver.SwapIntent",
        components: [
          {
            name: "fromAsset",
            type: "address",
            internalType: "address",
          },
          {
            name: "toAsset",
            type: "address",
            internalType: "address",
          },
          {
            name: "fromAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "minAmountOut",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "deadline",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "receiver",
            type: "address",
            internalType: "address payable",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "pure",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "pendingOwner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "refundExpiredIntent",
    inputs: [
      {
        name: "intent",
        type: "tuple",
        internalType: "struct IntentReceiver.SwapIntent",
        components: [
          {
            name: "fromAsset",
            type: "address",
            internalType: "address",
          },
          {
            name: "toAsset",
            type: "address",
            internalType: "address",
          },
          {
            name: "fromAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "minAmountOut",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "deadline",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "receiver",
            type: "address",
            internalType: "address payable",
          },
        ],
      },
      {
        name: "feeAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "swapIntents",
    inputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "_newOwner",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "ExpiredIntentRefunded",
    inputs: [
      {
        name: "details",
        type: "tuple",
        indexed: false,
        internalType: "struct IntentReceiver.SwapIntent",
        components: [
          {
            name: "fromAsset",
            type: "address",
            internalType: "address",
          },
          {
            name: "toAsset",
            type: "address",
            internalType: "address",
          },
          {
            name: "fromAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "minAmountOut",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "deadline",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "receiver",
            type: "address",
            internalType: "address payable",
          },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "IntentAdded",
    inputs: [
      {
        name: "details",
        type: "tuple",
        indexed: false,
        internalType: "struct IntentReceiver.SwapIntent",
        components: [
          {
            name: "fromAsset",
            type: "address",
            internalType: "address",
          },
          {
            name: "toAsset",
            type: "address",
            internalType: "address",
          },
          {
            name: "fromAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "minAmountOut",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "deadline",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "receiver",
            type: "address",
            internalType: "address payable",
          },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "IntentCancelled",
    inputs: [
      {
        name: "details",
        type: "tuple",
        indexed: false,
        internalType: "struct IntentReceiver.SwapIntent",
        components: [
          {
            name: "fromAsset",
            type: "address",
            internalType: "address",
          },
          {
            name: "toAsset",
            type: "address",
            internalType: "address",
          },
          {
            name: "fromAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "minAmountOut",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "deadline",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "receiver",
            type: "address",
            internalType: "address payable",
          },
        ],
      },
      {
        name: "refundedTo",
        type: "address",
        indexed: false,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "IntentExecuted",
    inputs: [
      {
        name: "details",
        type: "tuple",
        indexed: false,
        internalType: "struct IntentReceiver.SwapIntent",
        components: [
          {
            name: "fromAsset",
            type: "address",
            internalType: "address",
          },
          {
            name: "toAsset",
            type: "address",
            internalType: "address",
          },
          {
            name: "fromAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "minAmountOut",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "deadline",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "receiver",
            type: "address",
            internalType: "address payable",
          },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferRequested",
    inputs: [
      {
        name: "_from",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "_to",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "BelowMinAmount",
    inputs: [],
  },
  {
    type: "error",
    name: "Expired",
    inputs: [],
  },
  {
    type: "error",
    name: "ExternalCallFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidCallData",
    inputs: [],
  },
  {
    type: "error",
    name: "NewOwnerMustNotBeSelf",
    inputs: [],
  },
  {
    type: "error",
    name: "NoNullOwner",
    inputs: [],
  },
  {
    type: "error",
    name: "NoPendingOwnershipTransfer",
    inputs: [],
  },
  {
    type: "error",
    name: "NotPendingOwner",
    inputs: [],
  },
  {
    type: "error",
    name: "NotYetExpired",
    inputs: [],
  },
  {
    type: "error",
    name: "ReentrancyError",
    inputs: [],
  },
  {
    type: "error",
    name: "UnAuthorized",
    inputs: [],
  },
] as const;

export class IntentReceiver__factory {
  static readonly abi = _abi;
  static createInterface(): IntentReceiverInterface {
    return new utils.Interface(_abi) as IntentReceiverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IntentReceiver {
    return new Contract(address, _abi, signerOrProvider) as IntentReceiver;
  }
}
