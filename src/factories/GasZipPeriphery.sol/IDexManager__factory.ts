/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IDexManager,
  IDexManagerInterface,
} from "../../GasZipPeriphery.sol/IDexManager";

const _abi = [
  {
    type: "function",
    name: "contractIsAllowed",
    inputs: [
      {
        name: "_contract",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "isFunctionApproved",
    inputs: [
      {
        name: "_signature",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
] as const;

export class IDexManager__factory {
  static readonly abi = _abi;
  static createInterface(): IDexManagerInterface {
    return new utils.Interface(_abi) as IDexManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IDexManager {
    return new Contract(address, _abi, signerOrProvider) as IDexManager;
  }
}
