/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { IntentFactory, IntentFactoryInterface } from "../IntentFactory";

const _abi = [
  {
    type: "constructor",
    inputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "deployAndExecuteIntent",
    inputs: [
      {
        name: "_initData",
        type: "tuple",
        internalType: "struct IIntent.InitData",
        components: [
          {
            name: "intentId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "receiver",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenOut",
            type: "address",
            internalType: "address",
          },
          {
            name: "amountOutMin",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
      {
        name: "_calls",
        type: "tuple[]",
        internalType: "struct IIntent.Call[]",
        components: [
          {
            name: "to",
            type: "address",
            internalType: "address",
          },
          {
            name: "value",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "deployAndWithdrawAll",
    inputs: [
      {
        name: "_initData",
        type: "tuple",
        internalType: "struct IIntent.InitData",
        components: [
          {
            name: "intentId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "receiver",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenOut",
            type: "address",
            internalType: "address",
          },
          {
            name: "amountOutMin",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
      {
        name: "tokens",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getIntentAddress",
    inputs: [
      {
        name: "_initData",
        type: "tuple",
        internalType: "struct IIntent.InitData",
        components: [
          {
            name: "intentId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "receiver",
            type: "address",
            internalType: "address",
          },
          {
            name: "tokenOut",
            type: "address",
            internalType: "address",
          },
          {
            name: "amountOutMin",
            type: "uint256",
            internalType: "uint256",
          },
        ],
      },
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "implementation",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161001d9061004b565b604051809103906000f080158015610039573d6000803e3d6000fd5b506001600160a01b0316608052610058565b610c528061089983390190565b6080516108126100876000396000818160560152818161010e0152818161027801526102d701526108126000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80635c60da1b14610051578063716b2df9146100a15780638760b86b146100b6578063926d43eb146100c9575b600080fd5b6100787f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100b46100af36600461051f565b6100dc565b005b6100786100c4366004610573565b610247565b6100b46100d736600461051f565b6102a5565b6000836040516020016100ef91906105b8565b60405160208183030381529060405280519060200120905060006101337f0000000000000000000000000000000000000000000000000000000000000000836103d7565b6040517ffe0cd20000000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff82169063fe0cd200906101889088906004016105b8565b600060405180830381600087803b1580156101a257600080fd5b505af11580156101b6573d6000803e3d6000fd5b50506040517f6568a27900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169250636568a279915061020e908790879060040161060e565b600060405180830381600087803b15801561022857600080fd5b505af115801561023c573d6000803e3d6000fd5b505050505050505050565b6000808260405160200161025b91906105b8565b60405160208183030381529060405280519060200120905061029e7f000000000000000000000000000000000000000000000000000000000000000082306103e5565b9392505050565b6000836040516020016102b891906105b8565b60405160208183030381529060405280519060200120905060006102fc7f0000000000000000000000000000000000000000000000000000000000000000836103d7565b6040517ffe0cd20000000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff82169063fe0cd200906103519088906004016105b8565b600060405180830381600087803b15801561036b57600080fd5b505af115801561037f573d6000803e3d6000fd5b50506040517f3f707e6b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169250633f707e6b915061020e9087908790600401610667565b600061029e60008484610442565b60008061042c8560006c5af43d3d93803e602a57fd5bf36021528160145273602c3d8160093d39f33d3d3d3d363d3d37363d736000526035600c2090506000602152919050565b9050610439818585610499565b95945050505050565b60006c5af43d3d93803e602a57fd5bf36021528260145273602c3d8160093d39f33d3d3d3d363d3d37363d73600052816035600c86f590508061048d5763301164256000526004601cfd5b60006021529392505050565b600060ff60005350603592835260601b60015260155260556000908120915290565b6000608082840312156104cd57600080fd5b50919050565b60008083601f8401126104e557600080fd5b50813567ffffffffffffffff8111156104fd57600080fd5b6020830191508360208260051b850101111561051857600080fd5b9250929050565b600080600060a0848603121561053457600080fd5b61053e85856104bb565b9250608084013567ffffffffffffffff81111561055a57600080fd5b610566868287016104d3565b9497909650939450505050565b60006080828403121561058557600080fd5b61029e83836104bb565b803573ffffffffffffffffffffffffffffffffffffffff811681146105b357600080fd5b919050565b81358152608081016105cc6020840161058f565b73ffffffffffffffffffffffffffffffffffffffff8082166020850152806105f66040870161058f565b16604085015250506060830135606083015292915050565b60208082528181018390526000908460408401835b8681101561065c5773ffffffffffffffffffffffffffffffffffffffff6106498461058f565b1682529183019190830190600101610623565b509695505050505050565b60208082528181018390526000906040808401600586901b8501820187855b888110156107ce577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa18b36030181126106e757600080fd5b8a01606073ffffffffffffffffffffffffffffffffffffffff6107098361058f565b1685528782013588860152868201357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe183360301811261074857600080fd5b90910187810191903567ffffffffffffffff81111561076657600080fd5b80360383131561077557600080fd5b8188870152808287015260809150808383880137600086820183015295880195601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016909401909301925090850190600101610686565b50909897505050505050505056fea264697066735822122033abaad73aeaaa7399131eb4bf9044ac48bf44923b62fba2b8d5799d1bf7055a64736f6c6343000811003360a06040526006805460ff1916905534801561001a57600080fd5b5030608052608051610c116100416000396000818161012a01526106eb0152610c116000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80636568a27911610081578063d0202d3b1161005b578063d0202d3b146101ad578063f7260d3e146101cd578063fe0cd200146101ed57600080fd5b80636568a27914610171578063bfa0b13314610184578063c45a01551461018d57600080fd5b806331a38c89116100b257806331a38c89146100f35780633f707e6b146101105780635c60da1b1461012557600080fd5b80630ada1b8a146100ce5780632c3bfc08146100ea575b600080fd5b6100d760005481565b6040519081526020015b60405180910390f35b6100d760055481565b6006546101009060ff1681565b60405190151581526020016100e1565b61012361011e366004610986565b610200565b005b61014c7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e1565b61012361017f366004610986565b610546565b6100d760015481565b60035461014c9073ffffffffffffffffffffffffffffffffffffffff1681565b60045461014c9073ffffffffffffffffffffffffffffffffffffffff1681565b60025461014c9073ffffffffffffffffffffffffffffffffffffffff1681565b6101236101fb3660046109c8565b610669565b60035473ffffffffffffffffffffffffffffffffffffffff163314610251576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60065460ff161561028e576040517f0dc1019700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905560005b818110156104065760008383838181106102d8576102d86109e0565b90506020028101906102ea9190610a0f565b6102f8906020810190610a76565b73ffffffffffffffffffffffffffffffffffffffff16848484818110610320576103206109e0565b90506020028101906103329190610a0f565b60200135858585818110610348576103486109e0565b905060200281019061035a9190610a0f565b610368906040810190610a98565b604051610376929190610afd565b60006040518083038185875af1925050503d80600081146103b3576040519150601f19603f3d011682016040523d82523d6000602084013e6103b8565b606091505b50509050806103f3576040517facfdb44400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50806103fe81610b0d565b9150506102bc565b50600554600480546040517f70a08231000000000000000000000000000000000000000000000000000000008152309281019290925273ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049d9190610b6c565b10156104d5576040517f42301c2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60045473ffffffffffffffffffffffffffffffffffffffff16610518576002546105149073ffffffffffffffffffffffffffffffffffffffff1661081b565b5050565b6004546002546105419173ffffffffffffffffffffffffffffffffffffffff908116911661083a565b505050565b60035473ffffffffffffffffffffffffffffffffffffffff163314610597576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156105415760008383838181106105b6576105b66109e0565b90506020020160208101906105cb9190610a76565b73ffffffffffffffffffffffffffffffffffffffff160361060d576002546106089073ffffffffffffffffffffffffffffffffffffffff1661081b565b610657565b610655838383818110610622576106226109e0565b90506020020160208101906106379190610a76565b60025473ffffffffffffffffffffffffffffffffffffffff1661083a565b505b8061066181610b0d565b91505061059a565b8060405160200161067a9190610b85565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101206001819055600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001633908117909155600091610711917f000000000000000000000000000000000000000000000000000000000000000091906108bb565b90503073ffffffffffffffffffffffffffffffffffffffff821614610762576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81356000556107776040830160208401610a76565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790556107cc6060830160408401610a76565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790555060600135600555565b60003860003847855af16108375763b12d13eb6000526004601cfd5b50565b60006370a0823160005230602052602060346024601c865afa601f3d111661086a576390b8ec186000526004601cfd5b8160145260345190506fa9059cbb00000000000000000000000060005260206000604460106000875af13d1560016000511417166108b0576390b8ec186000526004601cfd5b600060345292915050565b6000806109028560006c5af43d3d93803e602a57fd5bf36021528160145273602c3d8160093d39f33d3d3d3d363d3d37363d736000526035600c2090506000602152919050565b905061090f818585610918565b95945050505050565b600060ff60005350603592835260601b60015260155260556000908120915290565b60008083601f84011261094c57600080fd5b50813567ffffffffffffffff81111561096457600080fd5b6020830191508360208260051b850101111561097f57600080fd5b9250929050565b6000806020838503121561099957600080fd5b823567ffffffffffffffff8111156109b057600080fd5b6109bc8582860161093a565b90969095509350505050565b6000608082840312156109da57600080fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1833603018112610a4357600080fd5b9190910192915050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a7157600080fd5b919050565b600060208284031215610a8857600080fd5b610a9182610a4d565b9392505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610acd57600080fd5b83018035915067ffffffffffffffff821115610ae857600080fd5b60200191503681900382131561097f57600080fd5b8183823760009101908152919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b65577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b600060208284031215610b7e57600080fd5b5051919050565b8135815260808101610b9960208401610a4d565b73ffffffffffffffffffffffffffffffffffffffff808216602085015280610bc360408701610a4d565b1660408501525050606083013560608301529291505056fea2646970667358221220b812659dcd60b24115707a7dd02961e427f58172d0fd35ce0585c7e5e5129d8764736f6c63430008110033";

type IntentFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IntentFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IntentFactory__factory extends ContractFactory {
  constructor(...args: IntentFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<IntentFactory> {
    return super.deploy(overrides || {}) as Promise<IntentFactory>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): IntentFactory {
    return super.attach(address) as IntentFactory;
  }
  override connect(signer: Signer): IntentFactory__factory {
    return super.connect(signer) as IntentFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IntentFactoryInterface {
    return new utils.Interface(_abi) as IntentFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IntentFactory {
    return new Contract(address, _abi, signerOrProvider) as IntentFactory;
  }
}
