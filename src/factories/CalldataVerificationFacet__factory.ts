/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  CalldataVerificationFacet,
  CalldataVerificationFacetInterface,
} from "../CalldataVerificationFacet";

const _abi = [
  {
    inputs: [],
    name: "SliceOutOfBounds",
    type: "error",
  },
  {
    inputs: [],
    name: "SliceOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "extractBridgeData",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "transactionId",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "bridge",
            type: "string",
          },
          {
            internalType: "string",
            name: "integrator",
            type: "string",
          },
          {
            internalType: "address",
            name: "referrer",
            type: "address",
          },
          {
            internalType: "address",
            name: "sendingAssetId",
            type: "address",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "minAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "destinationChainId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "hasSourceSwaps",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "hasDestinationCall",
            type: "bool",
          },
        ],
        internalType: "struct ILiFi.BridgeData",
        name: "bridgeData",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "extractData",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "transactionId",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "bridge",
            type: "string",
          },
          {
            internalType: "string",
            name: "integrator",
            type: "string",
          },
          {
            internalType: "address",
            name: "referrer",
            type: "address",
          },
          {
            internalType: "address",
            name: "sendingAssetId",
            type: "address",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "minAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "destinationChainId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "hasSourceSwaps",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "hasDestinationCall",
            type: "bool",
          },
        ],
        internalType: "struct ILiFi.BridgeData",
        name: "bridgeData",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "callTo",
            type: "address",
          },
          {
            internalType: "address",
            name: "approveTo",
            type: "address",
          },
          {
            internalType: "address",
            name: "sendingAssetId",
            type: "address",
          },
          {
            internalType: "address",
            name: "receivingAssetId",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fromAmount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "requiresDeposit",
            type: "bool",
          },
        ],
        internalType: "struct LibSwap.SwapData[]",
        name: "swapData",
        type: "tuple[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "extractGenericSwapParameters",
    outputs: [
      {
        internalType: "address",
        name: "sendingAssetId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "address",
        name: "receivingAssetId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "receivingAmount",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "extractMainParameters",
    outputs: [
      {
        internalType: "string",
        name: "bridge",
        type: "string",
      },
      {
        internalType: "address",
        name: "sendingAssetId",
        type: "address",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "destinationChainId",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "hasSourceSwaps",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "hasDestinationCall",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "extractSwapData",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "callTo",
            type: "address",
          },
          {
            internalType: "address",
            name: "approveTo",
            type: "address",
          },
          {
            internalType: "address",
            name: "sendingAssetId",
            type: "address",
          },
          {
            internalType: "address",
            name: "receivingAssetId",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fromAmount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "requiresDeposit",
            type: "bool",
          },
        ],
        internalType: "struct LibSwap.SwapData[]",
        name: "swapData",
        type: "tuple[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "bridge",
        type: "string",
      },
      {
        internalType: "address",
        name: "sendingAssetId",
        type: "address",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "destinationChainId",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "hasSourceSwaps",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "hasDestinationCall",
        type: "bool",
      },
    ],
    name: "validateCalldata",
    outputs: [
      {
        internalType: "bool",
        name: "isValid",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "callTo",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "dstCalldata",
        type: "bytes",
      },
    ],
    name: "validateDestinationCalldata",
    outputs: [
      {
        internalType: "bool",
        name: "isValid",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50612342806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c318eeda1161005b578063c318eeda146100ec578063d53482cf14610147578063ee0aa3201461016a578063f58ae2ce1461019057600080fd5b8063070e81f114610082578063103c5200146100ab5780637f99d7af146100cc575b600080fd5b610095610090366004610f76565b6101a3565b6040516100a29190611113565b60405180910390f35b6100be6100b9366004610f76565b6101b6565b6040516100a292919061121b565b6100df6100da366004610f76565b610231565b6040516100a29190611249565b6100ff6100fa366004610f76565b61028d565b6040805173ffffffffffffffffffffffffffffffffffffffff96871681526020810195909552928516928401929092529092166060820152608081019190915260a0016100a2565b61015a6101553660046112aa565b6103fb565b60405190151581526020016100a2565b61017d610178366004610f76565b61068c565b6040516100a29796959493929190611379565b61015a61019e3660046113d7565b610747565b60606101af8383610c48565b9392505050565b604080516101408101825260008082526060602083018190529282018390528282018190526080820181905260a0820181905260c0820181905260e082018190526101008201819052610120820152906102108484610d0f565b91508161010001511561022a576102278484610c48565b90505b9250929050565b604080516101408101825260008082526060602083018190529282018390529181018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101919091526101af8383610d0f565b60008060008060006060600088888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509293507fd6a4bc50000000000000000000000000000000000000000000000000000000009250610301915050898b018b61149f565b7fffffffff00000000000000000000000000000000000000000000000000000000160361034557610335886004818c6114bc565b8101906103429190611694565b90505b61035f60048083516103579190611700565b839190610e1a565b80602001905181019061037291906118d9565b8051929a509097509550859350600092501515905061039357610393611987565b6020026020010151604001519650816000815181106103b4576103b4611987565b602002602001015160800151955081600183516103d19190611700565b815181106103e1576103e1611987565b602002602001015160600151935050509295509295909350565b604080516101408101825260008082526060602083018190529282018390529181018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526104568c8c61068c565b1515610120880152151561010087015260e086015260c085015273ffffffffffffffffffffffffffffffffffffffff90811660a0850152166080830152602080830191909152604080516000815291820180825282519020916104bd918d918d91016119b6565b604051602081830303815290604052805190602001201480610530575089896040516020016104ed9291906119b6565b60405160208183030381529060405280519060200120816020015160405160200161051891906119c6565b60405160208183030381529060405280519060200120145b801561058a575073ffffffffffffffffffffffffffffffffffffffff808916148061058a57508773ffffffffffffffffffffffffffffffffffffffff16816080015173ffffffffffffffffffffffffffffffffffffffff16145b80156105e4575073ffffffffffffffffffffffffffffffffffffffff80881614806105e457508673ffffffffffffffffffffffffffffffffffffffff168160a0015173ffffffffffffffffffffffffffffffffffffffff16145b801561061c57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86148061061c5750858160c00151145b801561065457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8514806106545750848160e00151145b801561066857508315158161010001511515145b801561067c57508215158161012001511515145b9c9b505050505050505050505050565b606060008060008060008060006106a38a8a610d0f565b9050806101000151156107065760006106bc8b8b610c48565b9050806000815181106106d1576106d1611987565b6020026020010151604001519750806000815181106106f2576106f2611987565b602002602001015160800151955050610715565b806080015196508060c0015194505b602081015160a082015160e083015161010084015161012090940151929d999c50909a50959850949690955092505050565b60008087878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509293507fd6a4bc500000000000000000000000000000000000000000000000000000000092506107b2915050888a018a61149f565b7fffffffff0000000000000000000000000000000000000000000000000000000016036107f6576107e6876004818b6114bc565b8101906107f39190611694565b90505b60008180602001905181019061080c91906119e2565b90507f72366cd3000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016108fe576000610873600480855161086b9190611700565b859190610e1a565b8060200190518101906108869190611b98565b91505080600001518051906020012086866040516108a59291906119b6565b60405180910390201480156108f45750602081015173ffffffffffffffffffffffffffffffffffffffff166108dc888a018a611bfc565b73ffffffffffffffffffffffffffffffffffffffff16145b9350505050610c3e565b7f7c0ce6e9000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000082160161098e57600061095b600480855161086b9190611700565b80602001905181019061096e9190611c19565b9250505080600001518051906020012086866040516108a59291906119b6565b7f41e15319000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610a5c5760006109eb600480855161086b9190611700565b8060200190518101906109fe9190611d54565b9150508060e00151805190602001208686604051610a1d9291906119b6565b60405180910390201480156108f457508060c00151805190602001208888604051610a499291906119b6565b6040518091039020149350505050610c3e565b7f12e879e7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610aec576000610ab9600480855161086b9190611700565b806020019051810190610acc9190611dae565b925050508060e00151805190602001208686604051610a1d9291906119b6565b7ffaf6a213000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610ba7576000610b49600480855161086b9190611700565b806020019051810190610b5c9190611eff565b9150508060600151805190602001208686604051610b7b9291906119b6565b60405180910390201480156108f457508060400151805190602001208888604051610a499291906119b6565b7f4f93ad26000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610c37576000610c04600480855161086b9190611700565b806020019051810190610c179190611f59565b925050508060600151805190602001208686604051610b7b9291906119b6565b6000925050505b9695505050505050565b60607fd6a4bc5000000000000000000000000000000000000000000000000000000000610c778385018561149f565b7fffffffff000000000000000000000000000000000000000000000000000000001603610ceb576000610cad83600481876114bc565b810190610cba9190611694565b9050610cce60048083516103579190611700565b806020019051810190610ce19190611fd7565b9250610d09915050565b610cf882600481866114bc565b810190610d05919061210c565b9150505b92915050565b604080516101408101825260008082526060602083018190529282018390529181018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101919091527fd6a4bc5000000000000000000000000000000000000000000000000000000000610d8e8385018561149f565b7fffffffff000000000000000000000000000000000000000000000000000000001603610e00576000610dc483600481876114bc565b810190610dd19190611694565b9050610de560048083516103579190611700565b806020019051810190610df8919061228f565b915050610d09565b610e0d82600481866114bc565b8101906101af91906122c4565b606081610e2881601f6122f9565b1015610e60576040517f47aaf07a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e6a82846122f9565b84511015610ea4576040517f3b99b53d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606082158015610ec35760405191506000825260208201604052610f2b565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610efc578051835260209283019201610ee4565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b60008083601f840112610f4657600080fd5b50813567ffffffffffffffff811115610f5e57600080fd5b60208301915083602082850101111561022a57600080fd5b60008060208385031215610f8957600080fd5b823567ffffffffffffffff811115610fa057600080fd5b610fac85828601610f34565b90969095509350505050565b60005b83811015610fd3578181015183820152602001610fbb565b50506000910152565b60008151808452610ff4816020860160208601610fb8565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b84811015611106577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08684030189528151805173ffffffffffffffffffffffffffffffffffffffff908116855285820151811686860152604080830151821690860152606080830151909116908501526080808201519085015260a08082015160e082870181905291906110d983880182610fdc565b9250505060c08083015192506110f28187018415159052565b509985019993505090830190600101611043565b5090979650505050505050565b6020815260006101af6020830184611026565b600061014082518452602083015181602086015261114682860182610fdc565b915050604083015184820360408601526111608282610fdc565b915050606083015161118a606086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060808301516111b2608086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060a08301516111da60a086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160c085015260e083015160e0850152610100808401516112038287018215159052565b50506101209283015115159390920192909252919050565b60408152600061122e6040830185611126565b82810360208401526112408185611026565b95945050505050565b6020815260006101af6020830184611126565b73ffffffffffffffffffffffffffffffffffffffff8116811461127e57600080fd5b50565b803561128c8161125c565b919050565b801515811461127e57600080fd5b803561128c81611291565b6000806000806000806000806000806101008b8d0312156112ca57600080fd5b8a3567ffffffffffffffff808211156112e257600080fd5b6112ee8e838f01610f34565b909c509a5060208d013591508082111561130757600080fd5b506113148d828e01610f34565b90995097505060408b01356113288161125c565b955060608b01356113388161125c565b945060808b0135935060a08b0135925060c08b013561135681611291565b915060e08b013561136681611291565b809150509295989b9194979a5092959850565b60e08152600061138c60e083018a610fdc565b73ffffffffffffffffffffffffffffffffffffffff988916602084015296909716604082015260608101949094526080840192909252151560a0830152151560c09091015292915050565b600080600080600080606087890312156113f057600080fd5b863567ffffffffffffffff8082111561140857600080fd5b6114148a838b01610f34565b9098509650602089013591508082111561142d57600080fd5b6114398a838b01610f34565b9096509450604089013591508082111561145257600080fd5b5061145f89828a01610f34565b979a9699509497509295939492505050565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461127e57600080fd5b6000602082840312156114b157600080fd5b81356101af81611471565b600080858511156114cc57600080fd5b838611156114d957600080fd5b5050820193919092039150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715611538576115386114e6565b60405290565b604051610140810167ffffffffffffffff81118282101715611538576115386114e6565b604051610100810167ffffffffffffffff81118282101715611538576115386114e6565b60405160c0810167ffffffffffffffff81118282101715611538576115386114e6565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156115f0576115f06114e6565b604052919050565b600067ffffffffffffffff821115611612576116126114e6565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261164f57600080fd5b813561166261165d826115f8565b6115a9565b81815284602083860101111561167757600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156116a657600080fd5b813567ffffffffffffffff8111156116bd57600080fd5b6116c98482850161163e565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115610d0957610d096116d1565b600082601f83011261172457600080fd5b815161173261165d826115f8565b81815284602083860101111561174757600080fd5b6116c9826020830160208701610fb8565b805161128c8161125c565b600067ffffffffffffffff82111561177d5761177d6114e6565b5060051b60200190565b805161128c81611291565b600082601f8301126117a357600080fd5b815160206117b361165d83611763565b82815260059290921b840181019181810190868411156117d257600080fd5b8286015b848110156118ce57805167ffffffffffffffff808211156117f75760008081fd5b818901915060e0807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d030112156118305760008081fd5b611838611515565b611843888501611758565b81526040611852818601611758565b898301526060611863818701611758565b8284015260809150611876828701611758565b818401525060a0808601518284015260c09150818601518581111561189b5760008081fd5b6118a98f8c838a0101611713565b8285015250506118ba838601611787565b9082015286525050509183019183016117d6565b509695505050505050565b60008060008060008060c087890312156118f257600080fd5b86519550602087015167ffffffffffffffff8082111561191157600080fd5b61191d8a838b01611713565b9650604089015191508082111561193357600080fd5b61193f8a838b01611713565b9550606089015191506119518261125c565b608089015160a08a015192955093508082111561196d57600080fd5b5061197a89828a01611792565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8183823760009101908152919050565b600082516119d8818460208701610fb8565b9190910192915050565b6000602082840312156119f457600080fd5b81516101af81611471565b60006101408284031215611a1257600080fd5b611a1a61153e565b905081518152602082015167ffffffffffffffff80821115611a3b57600080fd5b611a4785838601611713565b60208401526040840151915080821115611a6057600080fd5b50611a6d84828501611713565b604083015250611a7f60608301611758565b6060820152611a9060808301611758565b6080820152611aa160a08301611758565b60a082015260c082015160c082015260e082015160e0820152610100611ac8818401611787565b90820152610120611ada838201611787565b9082015292915050565b805163ffffffff8116811461128c57600080fd5b600060e08284031215611b0a57600080fd5b611b12611515565b9050815167ffffffffffffffff811115611b2b57600080fd5b611b3784828501611713565b825250611b4660208301611758565b60208201526040820151604082015260608201516060820152611b6b60808301611758565b6080820152611b7c60a08301611ae4565b60a0820152611b8d60c08301611787565b60c082015292915050565b60008060408385031215611bab57600080fd5b825167ffffffffffffffff80821115611bc357600080fd5b611bcf868387016119ff565b93506020850151915080821115611be557600080fd5b50611bf285828601611af8565b9150509250929050565b600060208284031215611c0e57600080fd5b81356101af8161125c565b600080600060608486031215611c2e57600080fd5b835167ffffffffffffffff80821115611c4657600080fd5b611c52878388016119ff565b94506020860151915080821115611c6857600080fd5b611c7487838801611792565b93506040860151915080821115611c8a57600080fd5b50611c9786828701611af8565b9150509250925092565b60006101008284031215611cb457600080fd5b611cbc611562565b90508151815260208201516020820152604082015160408201526060820151606082015260808201516080820152611cf660a08301611758565b60a082015260c082015167ffffffffffffffff80821115611d1657600080fd5b611d2285838601611713565b60c084015260e0840151915080821115611d3b57600080fd5b50611d4884828501611713565b60e08301525092915050565b60008060408385031215611d6757600080fd5b825167ffffffffffffffff80821115611d7f57600080fd5b611d8b868387016119ff565b93506020850151915080821115611da157600080fd5b50611bf285828601611ca1565b600080600060608486031215611dc357600080fd5b835167ffffffffffffffff80821115611ddb57600080fd5b611de7878388016119ff565b94506020860151915080821115611dfd57600080fd5b611e0987838801611792565b93506040860151915080821115611e1f57600080fd5b50611c9786828701611ca1565b805167ffffffffffffffff8116811461128c57600080fd5b80516007811061128c57600080fd5b600060c08284031215611e6557600080fd5b611e6d611586565b9050611e7882611ae4565b8152611e8660208301611e2c565b6020820152604082015167ffffffffffffffff80821115611ea657600080fd5b611eb285838601611713565b60408401526060840151915080821115611ecb57600080fd5b50611ed884828501611713565b60608301525060808201516080820152611ef460a08301611e44565b60a082015292915050565b60008060408385031215611f1257600080fd5b825167ffffffffffffffff80821115611f2a57600080fd5b611f36868387016119ff565b93506020850151915080821115611f4c57600080fd5b50611bf285828601611e53565b600080600060608486031215611f6e57600080fd5b835167ffffffffffffffff80821115611f8657600080fd5b611f92878388016119ff565b94506020860151915080821115611fa857600080fd5b611fb487838801611792565b93506040860151915080821115611fca57600080fd5b50611c9786828701611e53565b60008060408385031215611fea57600080fd5b825167ffffffffffffffff8082111561200257600080fd5b61200e868387016119ff565b9350602085015191508082111561202457600080fd5b50611bf285828601611792565b6000610140828403121561204457600080fd5b61204c61153e565b905081358152602082013567ffffffffffffffff8082111561206d57600080fd5b6120798583860161163e565b6020840152604084013591508082111561209257600080fd5b5061209f8482850161163e565b6040830152506120b160608301611281565b60608201526120c260808301611281565b60808201526120d360a08301611281565b60a082015260c082013560c082015260e082013560e08201526101006120fa81840161129f565b90820152610120611ada83820161129f565b6000806040838503121561211f57600080fd5b823567ffffffffffffffff8082111561213757600080fd5b61214386838701612031565b935060209150818501358181111561215a57600080fd5b8501601f8101871361216b57600080fd5b803561217961165d82611763565b81815260059190911b8201840190848101908983111561219857600080fd5b8584015b8381101561227e578035868111156121b357600080fd5b850160e0818d037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00112156121e757600080fd5b6121ef611515565b6121fa898301611281565b815261220860408301611281565b8982015261221860608301611281565b604082015261222960808301611281565b606082015260a0820135608082015260c0808301358981111561224c5760008081fd5b61225a8f8c8387010161163e565b60a08401525061226c60e0840161129f565b9082015284525091860191860161219c565b508096505050505050509250929050565b6000602082840312156122a157600080fd5b815167ffffffffffffffff8111156122b857600080fd5b6116c9848285016119ff565b6000602082840312156122d657600080fd5b813567ffffffffffffffff8111156122ed57600080fd5b6116c984828501612031565b80820180821115610d0957610d096116d156fea2646970667358221220e7e95966da6caaf1df28da270b007c5c36382a0a049a413c5ac8fb1437b823bf64736f6c63430008110033";

type CalldataVerificationFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CalldataVerificationFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CalldataVerificationFacet__factory extends ContractFactory {
  constructor(...args: CalldataVerificationFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CalldataVerificationFacet> {
    return super.deploy(overrides || {}) as Promise<CalldataVerificationFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CalldataVerificationFacet {
    return super.attach(address) as CalldataVerificationFacet;
  }
  override connect(signer: Signer): CalldataVerificationFacet__factory {
    return super.connect(signer) as CalldataVerificationFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CalldataVerificationFacetInterface {
    return new utils.Interface(_abi) as CalldataVerificationFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CalldataVerificationFacet {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CalldataVerificationFacet;
  }
}
