/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IWormholeRouter,
  IWormholeRouterInterface,
} from "../IWormholeRouter";

const _abi = [
  {
    type: "function",
    name: "transferTokens",
    inputs: [
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "recipientChain",
        type: "uint16",
        internalType: "uint16",
      },
      {
        name: "recipient",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "arbiterFee",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "nonce",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "wrapAndTransferETH",
    inputs: [
      {
        name: "recipientChain",
        type: "uint16",
        internalType: "uint16",
      },
      {
        name: "recipient",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "arbiterFee",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "nonce",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    outputs: [
      {
        name: "sequence",
        type: "uint64",
        internalType: "uint64",
      },
    ],
    stateMutability: "payable",
  },
] as const;

export class IWormholeRouter__factory {
  static readonly abi = _abi;
  static createInterface(): IWormholeRouterInterface {
    return new utils.Interface(_abi) as IWormholeRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IWormholeRouter {
    return new Contract(address, _abi, signerOrProvider) as IWormholeRouter;
  }
}
