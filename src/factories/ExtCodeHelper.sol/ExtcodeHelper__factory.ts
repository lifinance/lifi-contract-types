/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ExtcodeHelper,
  ExtcodeHelperInterface,
} from "../../ExtCodeHelper.sol/ExtcodeHelper";

const _abi = [
  {
    type: "function",
    name: "getDelegationInfo",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "prefix",
        type: "bytes3",
        internalType: "bytes3",
      },
      {
        name: "delegate",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b506101478061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c8063fab46d661461002d575b5f5ffd5b61004061003b3660046100d7565b610091565b604080517fffffff0000000000000000000000000000000000000000000000000000000000909316835273ffffffffffffffffffffffffffffffffffffffff90911660208301520160405180910390f35b6040805160178082528183019092525f918291829160208201818036833701905050905060175f60208301863c6020810180519350600381015160601c92505050915091565b5f602082840312156100e7575f5ffd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461010a575f5ffd5b939250505056fea2646970667358221220b28fce73db745a48ce26c512cff086c704ecd6ccf6443aea5772c3e9abc1a56264736f6c634300081d0033";

type ExtcodeHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExtcodeHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExtcodeHelper__factory extends ContractFactory {
  constructor(...args: ExtcodeHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ExtcodeHelper> {
    return super.deploy(overrides || {}) as Promise<ExtcodeHelper>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ExtcodeHelper {
    return super.attach(address) as ExtcodeHelper;
  }
  override connect(signer: Signer): ExtcodeHelper__factory {
    return super.connect(signer) as ExtcodeHelper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExtcodeHelperInterface {
    return new utils.Interface(_abi) as ExtcodeHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExtcodeHelper {
    return new Contract(address, _abi, signerOrProvider) as ExtcodeHelper;
  }
}
