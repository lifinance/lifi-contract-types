/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  DexManagerFacet,
  DexManagerFacetInterface,
} from "../DexManagerFacet";

const _abi = [
  {
    type: "function",
    name: "addDex",
    inputs: [
      {
        name: "_dex",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "approvedDexs",
    inputs: [],
    outputs: [
      {
        name: "addresses",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "batchAddDex",
    inputs: [
      {
        name: "_dexs",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "batchRemoveDex",
    inputs: [
      {
        name: "_dexs",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "batchSetFunctionApprovalBySignature",
    inputs: [
      {
        name: "_signatures",
        type: "bytes4[]",
        internalType: "bytes4[]",
      },
      {
        name: "_approval",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "isFunctionApproved",
    inputs: [
      {
        name: "_signature",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    outputs: [
      {
        name: "approved",
        type: "bool",
        internalType: "bool",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "removeDex",
    inputs: [
      {
        name: "_dex",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setFunctionApprovalBySignature",
    inputs: [
      {
        name: "_signature",
        type: "bytes4",
        internalType: "bytes4",
      },
      {
        name: "_approval",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "event",
    name: "DexAdded",
    inputs: [
      {
        name: "dexAddress",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "DexRemoved",
    inputs: [
      {
        name: "dexAddress",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "FunctionSignatureApprovalChanged",
    inputs: [
      {
        name: "functionSignature",
        type: "bytes4",
        indexed: true,
        internalType: "bytes4",
      },
      {
        name: "approved",
        type: "bool",
        indexed: true,
        internalType: "bool",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "CannotAuthoriseSelf",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidContract",
    inputs: [],
  },
  {
    type: "error",
    name: "UnAuthorized",
    inputs: [],
  },
] as const;

const _bytecode =
  "";

type DexManagerFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DexManagerFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DexManagerFacet__factory extends ContractFactory {
  constructor(...args: DexManagerFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DexManagerFacet> {
    return super.deploy(overrides || {}) as Promise<DexManagerFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DexManagerFacet {
    return super.attach(address) as DexManagerFacet;
  }
  override connect(signer: Signer): DexManagerFacet__factory {
    return super.connect(signer) as DexManagerFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DexManagerFacetInterface {
    return new utils.Interface(_abi) as DexManagerFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DexManagerFacet {
    return new Contract(address, _abi, signerOrProvider) as DexManagerFacet;
  }
}
