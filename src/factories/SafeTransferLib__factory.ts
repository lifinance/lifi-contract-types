/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  SafeTransferLib,
  SafeTransferLibInterface,
} from "../SafeTransferLib";

const _abi = [
  {
    type: "error",
    name: "ApproveFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "ETHTransferFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "Permit2AmountOverflow",
    inputs: [],
  },
  {
    type: "error",
    name: "Permit2Failed",
    inputs: [],
  },
  {
    type: "error",
    name: "TransferFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "TransferFromFailed",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122099173fa605b5e4ecb99501f422d299b45dd7647e73c0b7bfdca8accf4b10c9e564736f6c63430008110033";

type SafeTransferLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SafeTransferLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SafeTransferLib__factory extends ContractFactory {
  constructor(...args: SafeTransferLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SafeTransferLib> {
    return super.deploy(overrides || {}) as Promise<SafeTransferLib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SafeTransferLib {
    return super.attach(address) as SafeTransferLib;
  }
  override connect(signer: Signer): SafeTransferLib__factory {
    return super.connect(signer) as SafeTransferLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SafeTransferLibInterface {
    return new utils.Interface(_abi) as SafeTransferLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SafeTransferLib {
    return new Contract(address, _abi, signerOrProvider) as SafeTransferLib;
  }
}
