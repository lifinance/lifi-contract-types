/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { ISquidRouter, ISquidRouterInterface } from "../ISquidRouter";

const _abi = [
  {
    type: "function",
    name: "bridgeCall",
    inputs: [
      {
        name: "bridgedTokenSymbol",
        type: "string",
        internalType: "string",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "destinationChain",
        type: "string",
        internalType: "string",
      },
      {
        name: "destinationAddress",
        type: "string",
        internalType: "string",
      },
      {
        name: "payload",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "gasRefundRecipient",
        type: "address",
        internalType: "address",
      },
      {
        name: "enableExpress",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "callBridge",
    inputs: [
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "calls",
        type: "tuple[]",
        internalType: "struct ISquidMulticall.Call[]",
        components: [
          {
            name: "callType",
            type: "uint8",
            internalType: "enum ISquidMulticall.CallType",
          },
          {
            name: "target",
            type: "address",
            internalType: "address",
          },
          {
            name: "value",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "payload",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
      {
        name: "bridgedTokenSymbol",
        type: "string",
        internalType: "string",
      },
      {
        name: "destinationChain",
        type: "string",
        internalType: "string",
      },
      {
        name: "destinationAddress",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "callBridgeCall",
    inputs: [
      {
        name: "token",
        type: "address",
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "calls",
        type: "tuple[]",
        internalType: "struct ISquidMulticall.Call[]",
        components: [
          {
            name: "callType",
            type: "uint8",
            internalType: "enum ISquidMulticall.CallType",
          },
          {
            name: "target",
            type: "address",
            internalType: "address",
          },
          {
            name: "value",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "payload",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
      {
        name: "bridgedTokenSymbol",
        type: "string",
        internalType: "string",
      },
      {
        name: "destinationChain",
        type: "string",
        internalType: "string",
      },
      {
        name: "destinationAddress",
        type: "string",
        internalType: "string",
      },
      {
        name: "payload",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "gasRefundRecipient",
        type: "address",
        internalType: "address",
      },
      {
        name: "enableExpress",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
] as const;

export class ISquidRouter__factory {
  static readonly abi = _abi;
  static createInterface(): ISquidRouterInterface {
    return new utils.Interface(_abi) as ISquidRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ISquidRouter {
    return new Contract(address, _abi, signerOrProvider) as ISquidRouter;
  }
}
