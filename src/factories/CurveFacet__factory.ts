/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { CurveFacet, CurveFacetInterface } from "../CurveFacet";

const _abi = [
  {
    type: "function",
    name: "swapCurve",
    inputs: [
      {
        name: "stream",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenIn",
        type: "address",
        internalType: "address",
      },
      {
        name: "amountIn",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b50610bb98061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c8063a691f4bc1461002d575b5f5ffd5b61004061003b366004610a5e565b610052565b60405190815260200160405180910390f35b5f5f6100648680516014018051915290565b90505f6100778780516001018051915290565b90505f61008a8880516001018051915290565b5f0b90505f61009f8980516001018051915290565b5f0b90505f6100b48a80516014018051915290565b90505f6100c78b80516014018051915290565b90505f7fffffffffffffffffffffffff111111111111111111111111111111111111111273ffffffffffffffffffffffffffffffffffffffff8b16016101b7576040517f3df02124000000000000000000000000000000000000000000000000000000008152600f86810b600483015285900b6024820152604481018a90525f606482015273ffffffffffffffffffffffffffffffffffffffff881690633df02124908b9060840160206040518083038185885af115801561018b573d5f5f3e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906101b09190610a9f565b905061048b565b3373ffffffffffffffffffffffffffffffffffffffff8c16036101f6576101f673ffffffffffffffffffffffffffffffffffffffff8b1633308c610526565b61021773ffffffffffffffffffffffffffffffffffffffff8b16888b610608565b508560ff165f036102c8576040517f3df02124000000000000000000000000000000000000000000000000000000008152600f86810b600483015285900b6024820152604481018a90525f606482015273ffffffffffffffffffffffffffffffffffffffff881690633df02124906084016020604051808303815f875af11580156102a4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101b09190610a9f565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610332573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103569190610a9f565b6040517f3df02124000000000000000000000000000000000000000000000000000000008152600f88810b600483015287900b6024820152604481018c90525f606482015290915073ffffffffffffffffffffffffffffffffffffffff891690633df02124906084015f604051808303815f87803b1580156103d6575f5ffd5b505af11580156103e8573d5f5f3e3d5ffd5b50506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f925073ffffffffffffffffffffffffffffffffffffffff861691506370a0823190602401602060405180830381865afa158015610456573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061047a9190610a9f565b90506104868282610ab6565b925050505b73ffffffffffffffffffffffffffffffffffffffff83163014610515577fffffffffffffffffffffffff111111111111111111111111111111111111111273ffffffffffffffffffffffffffffffffffffffff8316016104f4576104ef8382610637565b610515565b61051573ffffffffffffffffffffffffffffffffffffffff83168483610654565b96505050505050505b949350505050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526106029085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526106af565b50505050565b5f6106148484846107c1565b8061051e575061062584845f6107c1565b801561051e575061051e8484846107c1565b5f385f3884865af16106505763b12d13eb5f526004601cfd5b5050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106aa9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610580565b505050565b5f610710826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166108cb9092919063ffffffff16565b905080515f14806107305750808060200190518101906107309190610af4565b6106aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905291515f9283928392918816916108599190610b1a565b5f604051808303815f865af19150503d805f8114610892576040519150601f19603f3d011682016040523d82523d5f602084013e610897565b606091505b50915091508180156108c15750805115806108c15750808060200190518101906108c19190610af4565b9695505050505050565b606061051e84845f85855f5f8673ffffffffffffffffffffffffffffffffffffffff1685876040516108fd9190610b1a565b5f6040518083038185875af1925050503d805f8114610937576040519150601f19603f3d011682016040523d82523d5f602084013e61093c565b606091505b509150915061094d87838387610958565b979650505050505050565b606083156109ed5782515f036109e65773ffffffffffffffffffffffffffffffffffffffff85163b6109e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107b8565b508161051e565b61051e8383815115610a025781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b89190610b30565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a59575f5ffd5b919050565b5f5f5f5f60808587031215610a71575f5ffd5b84359350610a8160208601610a36565b9250610a8f60408601610a36565b9396929550929360600135925050565b5f60208284031215610aaf575f5ffd5b5051919050565b81810381811115610aee577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b92915050565b5f60208284031215610b04575f5ffd5b81518015158114610b13575f5ffd5b9392505050565b5f82518060208501845e5f920191825250919050565b602081525f82518060208401528060208501604085015e5f6040828501015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168401019150509291505056fea26469706673582212209637bf7d944890be1500575946177120bcea731ed483a0be3c90660bc5f51a7764736f6c634300081d0033";

type CurveFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveFacet__factory extends ContractFactory {
  constructor(...args: CurveFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CurveFacet> {
    return super.deploy(overrides || {}) as Promise<CurveFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CurveFacet {
    return super.attach(address) as CurveFacet;
  }
  override connect(signer: Signer): CurveFacet__factory {
    return super.connect(signer) as CurveFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveFacetInterface {
    return new utils.Interface(_abi) as CurveFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveFacet {
    return new Contract(address, _abi, signerOrProvider) as CurveFacet;
  }
}
