/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { CurveFacet, CurveFacetInterface } from "../CurveFacet";

const _abi = [
  {
    type: "function",
    name: "swapCurve",
    inputs: [
      {
        name: "swapData",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenIn",
        type: "address",
        internalType: "address",
      },
      {
        name: "amountIn",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "error",
    name: "InvalidAmount",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidCallData",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidReceiver",
    inputs: [],
  },
  {
    type: "error",
    name: "NullAddrIsNotAValidSpender",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b50610b808061001c5f395ff3fe60806040526004361061001d575f3560e01c80633d24b48814610021575b5f5ffd5b61003461002f3660046109dd565b610036565b005b835160408051602080880182529287018301928101929092528181019052805180516014820180845251601583018085525160168401808652516017850180875251602b860180885251603f9096018752606094851c955f94851a15159593851a949290921a9290811c91901c8515806100c4575073ffffffffffffffffffffffffffffffffffffffff8216155b156100fb576040517f1c49f4d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff8b1603610122576101228989610533565b73ffffffffffffffffffffffffffffffffffffffff81811615908a16158061014f5761014f8b898c6105e7565b5f87158015610174575073ffffffffffffffffffffffffffffffffffffffff85163014155b15610214578261020f576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa1580156101e6573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061020a9190610af5565b610211565b475b90505b87156103a3578115610252576040517f1c49f4d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff8e1601610330576040517fafb43012000000000000000000000000000000000000000000000000000000008152600f88810b600483015287900b6024820152600160448201525f606482015273ffffffffffffffffffffffffffffffffffffffff86811660848301528a169063afb430129060a4015b5f604051808303815f87803b158015610315575f5ffd5b505af1158015610327573d5f5f3e3d5ffd5b50505050610449565b6040517fddc1f59d000000000000000000000000000000000000000000000000000000008152600f88810b600483015287900b6024820152604481018c90525f606482015273ffffffffffffffffffffffffffffffffffffffff86811660848301528a169063ddc1f59d9060a4016102fe565b8873ffffffffffffffffffffffffffffffffffffffff16633df02124836103ca575f6103cc565b8c5b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152600f8b810b60048301528a900b6024820152604481018f90525f60648201526084015f604051808303818588803b158015610431575f5ffd5b505af1158015610443573d5f5f3e3d5ffd5b50505050505b8715801561046d575073ffffffffffffffffffffffffffffffffffffffff85163014155b15610523575f83610509576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa1580156104e0573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105049190610af5565b61050b565b475b9050610521858761051c8585610b0c565b610618565b505b5050505050505050505050505050565b805f0361056c576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166105c557803410156105c1576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6105c173ffffffffffffffffffffffffffffffffffffffff8316333084610648565b6106138383837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6106a0565b505050565b73ffffffffffffffffffffffffffffffffffffffff831661063d5761061382826107cd565b61061383838361083a565b60405181606052826040528360601b602c526f23b872dd000000000000000000000000600c5260205f6064601c5f895af13d1560015f5114171661069357637939f4245f526004601cfd5b5f60605260405250505050565b73ffffffffffffffffffffffffffffffffffffffff8416156107c75773ffffffffffffffffffffffffffffffffffffffff8316610709576040517f63ba9bff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015283919086169063dd62ed3e90604401602060405180830381865afa15801561077c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107a09190610af5565b10156107c7576107c773ffffffffffffffffffffffffffffffffffffffff851684836108a8565b50505050565b73ffffffffffffffffffffffffffffffffffffffff821661081a576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105c173ffffffffffffffffffffffffffffffffffffffff83168261092f565b73ffffffffffffffffffffffffffffffffffffffff8216610887576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61061373ffffffffffffffffffffffffffffffffffffffff84168383610948565b81601452806034526f095ea7b30000000000000000000000005f5260205f604460105f875af13d1560015f51141716610926575f6034526f095ea7b30000000000000000000000005f525f38604460105f875af1508060345260205f604460105f875af13d1560015f5114171661092657633e3f8f735f526004601cfd5b5f603452505050565b5f385f3884865af16105c15763b12d13eb5f526004601cfd5b81601452806034526fa9059cbb0000000000000000000000005f5260205f604460105f875af13d1560015f51141716610926576390b8ec185f526004601cfd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b803573ffffffffffffffffffffffffffffffffffffffff811681146109d8575f5ffd5b919050565b5f5f5f5f608085870312156109f0575f5ffd5b843567ffffffffffffffff811115610a06575f5ffd5b8501601f81018713610a16575f5ffd5b803567ffffffffffffffff811115610a3057610a30610988565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff82111715610a9c57610a9c610988565b604052818152828201602001891015610ab3575f5ffd5b816020840160208301375f60208383010152809650505050610ad7602086016109b5565b9250610ae5604086016109b5565b9396929550929360600135925050565b5f60208284031215610b05575f5ffd5b5051919050565b81810381811115610b44577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9291505056fea2646970667358221220810adf032c6e9228dc39d247db1ad47b477128892f47d033d067d4f3a4d2aa0f64736f6c634300081d0033";

type CurveFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveFacet__factory extends ContractFactory {
  constructor(...args: CurveFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CurveFacet> {
    return super.deploy(overrides || {}) as Promise<CurveFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CurveFacet {
    return super.attach(address) as CurveFacet;
  }
  override connect(signer: Signer): CurveFacet__factory {
    return super.connect(signer) as CurveFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveFacetInterface {
    return new utils.Interface(_abi) as CurveFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveFacet {
    return new Contract(address, _abi, signerOrProvider) as CurveFacet;
  }
}
