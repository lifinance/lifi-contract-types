/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { CurveFacet, CurveFacetInterface } from "../CurveFacet";

const _abi = [
  {
    type: "function",
    name: "swapCurve",
    inputs: [
      {
        name: "swapData",
        type: "bytes",
        internalType: "bytes",
      },
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenIn",
        type: "address",
        internalType: "address",
      },
      {
        name: "amountIn",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "error",
    name: "InvalidAmount",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidCallData",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidReceiver",
    inputs: [],
  },
  {
    type: "error",
    name: "NullAddrIsNotAValidSpender",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b50610b4c8061001c5f395ff3fe60806040526004361061001d575f3560e01c80633d24b48814610021575b5f5ffd5b61003461002f3660046109a9565b610036565b005b835160408051602080880182529287018301928101929092528181019052805180516014820180845251601583018085525160168401808652516017850180875251602b860180885251603f9096018752606094851c955f94851a15159593851a850b9492831a90920b9290811c91901c8515806100c8575073ffffffffffffffffffffffffffffffffffffffff8216155b156100ff576040517f1c49f4d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff8b16036101265761012689896104ff565b73ffffffffffffffffffffffffffffffffffffffff81811615908a161580610153576101538b898c6105b3565b5f87158015610178575073ffffffffffffffffffffffffffffffffffffffff85163014155b156102185782610213576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa1580156101ea573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061020e9190610ac1565b610215565b475b90505b871561036f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff73ffffffffffffffffffffffffffffffffffffffff8e16016102fc576040517fafb43012000000000000000000000000000000000000000000000000000000008152600f88810b600483015287900b6024820152600160448201525f606482015273ffffffffffffffffffffffffffffffffffffffff86811660848301528a169063afb430129060a4015b5f604051808303815f87803b1580156102e1575f5ffd5b505af11580156102f3573d5f5f3e3d5ffd5b50505050610415565b6040517fddc1f59d000000000000000000000000000000000000000000000000000000008152600f88810b600483015287900b6024820152604481018c90525f606482015273ffffffffffffffffffffffffffffffffffffffff86811660848301528a169063ddc1f59d9060a4016102ca565b8873ffffffffffffffffffffffffffffffffffffffff16633df0212483610396575f610398565b8c5b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152600f8b810b60048301528a900b6024820152604481018f90525f60648201526084015f604051808303818588803b1580156103fd575f5ffd5b505af115801561040f573d5f5f3e3d5ffd5b50505050505b87158015610439575073ffffffffffffffffffffffffffffffffffffffff85163014155b156104ef575f836104d5576040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa1580156104ac573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104d09190610ac1565b6104d7565b475b90506104ed85876104e88585610ad8565b6105e4565b505b5050505050505050505050505050565b805f03610538576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610591578034101561058d576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b61058d73ffffffffffffffffffffffffffffffffffffffff8316333084610614565b6105df8383837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61066c565b505050565b73ffffffffffffffffffffffffffffffffffffffff8316610609576105df8282610799565b6105df838383610806565b60405181606052826040528360601b602c526f23b872dd000000000000000000000000600c5260205f6064601c5f895af13d1560015f5114171661065f57637939f4245f526004601cfd5b5f60605260405250505050565b73ffffffffffffffffffffffffffffffffffffffff8416156107935773ffffffffffffffffffffffffffffffffffffffff83166106d5576040517f63ba9bff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015283919086169063dd62ed3e90604401602060405180830381865afa158015610748573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061076c9190610ac1565b10156107935761079373ffffffffffffffffffffffffffffffffffffffff85168483610874565b50505050565b73ffffffffffffffffffffffffffffffffffffffff82166107e6576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61058d73ffffffffffffffffffffffffffffffffffffffff8316826108fb565b73ffffffffffffffffffffffffffffffffffffffff8216610853576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105df73ffffffffffffffffffffffffffffffffffffffff84168383610914565b81601452806034526f095ea7b30000000000000000000000005f5260205f604460105f875af13d1560015f511417166108f2575f6034526f095ea7b30000000000000000000000005f525f38604460105f875af1508060345260205f604460105f875af13d1560015f511417166108f257633e3f8f735f526004601cfd5b5f603452505050565b5f385f3884865af161058d5763b12d13eb5f526004601cfd5b81601452806034526fa9059cbb0000000000000000000000005f5260205f604460105f875af13d1560015f511417166108f2576390b8ec185f526004601cfd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b803573ffffffffffffffffffffffffffffffffffffffff811681146109a4575f5ffd5b919050565b5f5f5f5f608085870312156109bc575f5ffd5b843567ffffffffffffffff8111156109d2575f5ffd5b8501601f810187136109e2575f5ffd5b803567ffffffffffffffff8111156109fc576109fc610954565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff82111715610a6857610a68610954565b604052818152828201602001891015610a7f575f5ffd5b816020840160208301375f60208383010152809650505050610aa360208601610981565b9250610ab160408601610981565b9396929550929360600135925050565b5f60208284031215610ad1575f5ffd5b5051919050565b81810381811115610b10577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9291505056fea264697066735822122017b6ff789cc7cd57947feb2818704022fb29740d4cdfe36470b26377e3c584f464736f6c634300081d0033";

type CurveFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveFacet__factory extends ContractFactory {
  constructor(...args: CurveFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CurveFacet> {
    return super.deploy(overrides || {}) as Promise<CurveFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CurveFacet {
    return super.attach(address) as CurveFacet;
  }
  override connect(signer: Signer): CurveFacet__factory {
    return super.connect(signer) as CurveFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveFacetInterface {
    return new utils.Interface(_abi) as CurveFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveFacet {
    return new Contract(address, _abi, signerOrProvider) as CurveFacet;
  }
}
