/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { CurveFacet, CurveFacetInterface } from "../CurveFacet";

const _abi = [
  {
    type: "function",
    name: "swapCurve",
    inputs: [
      {
        name: "stream",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "from",
        type: "address",
        internalType: "address",
      },
      {
        name: "tokenIn",
        type: "address",
        internalType: "address",
      },
      {
        name: "amountIn",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "error",
    name: "InvalidReceiver",
    inputs: [],
  },
  {
    type: "error",
    name: "NullAddrIsNotAValidSpender",
    inputs: [],
  },
  {
    type: "error",
    name: "NullAddrIsNotAnERC20Token",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b506109c88061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c8063a691f4bc1461002d575b5f5ffd5b61004061003b3660046108fc565b610052565b60405190815260200160405180910390f35b5f5f6100648680516014018051915290565b90505f6100778780516001018051915290565b90505f61008a8880516001018051915290565b5f0b90505f61009f8980516001018051915290565b5f0b90505f6100b48a80516014018051915290565b90505f6100c78b80516014018051915290565b90505f73ffffffffffffffffffffffffffffffffffffffff8a16610195576040517f3df02124000000000000000000000000000000000000000000000000000000008152600f86810b600483015285900b6024820152604481018a90525f606482015273ffffffffffffffffffffffffffffffffffffffff881690633df02124908b9060840160206040518083038185885af1158015610169573d5f5f3e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061018e919061093d565b905061043c565b3373ffffffffffffffffffffffffffffffffffffffff8c16036101be576101be8a33308c610473565b6101c98a888b610535565b8560ff165f03610279576040517f3df02124000000000000000000000000000000000000000000000000000000008152600f86810b600483015285900b6024820152604481018a90525f606482015273ffffffffffffffffffffffffffffffffffffffff881690633df02124906084016020604051808303815f875af1158015610255573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061018e919061093d565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa1580156102e3573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610307919061093d565b6040517f3df02124000000000000000000000000000000000000000000000000000000008152600f88810b600483015287900b6024820152604481018c90525f606482015290915073ffffffffffffffffffffffffffffffffffffffff891690633df02124906084015f604051808303815f87803b158015610387575f5ffd5b505af1158015610399573d5f5f3e3d5ffd5b50506040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f925073ffffffffffffffffffffffffffffffffffffffff861691506370a0823190602401602060405180830381865afa158015610407573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061042b919061093d565b90506104378282610954565b925050505b73ffffffffffffffffffffffffffffffffffffffff8316301461046457610464828483610566565b9b9a5050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff84166104c0576040517fd1bebf0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821661050d576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61052f73ffffffffffffffffffffffffffffffffffffffff8516848484610596565b50505050565b6105618383837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6105ee565b505050565b73ffffffffffffffffffffffffffffffffffffffff831661058b576105618282610715565b610561838383610786565b60405181606052826040528360601b602c526f23b872dd000000000000000000000000600c5260205f6064601c5f895af13d1560015f511417166105e157637939f4245f526004601cfd5b5f60605260405250505050565b73ffffffffffffffffffffffffffffffffffffffff84161561052f5773ffffffffffffffffffffffffffffffffffffffff8316610657576040517f63ba9bff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015283919086169063dd62ed3e90604401602060405180830381865afa1580156106ca573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106ee919061093d565b101561052f5761052f73ffffffffffffffffffffffffffffffffffffffff851684836107f4565b73ffffffffffffffffffffffffffffffffffffffff8216610762576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61078273ffffffffffffffffffffffffffffffffffffffff83168261087b565b5050565b73ffffffffffffffffffffffffffffffffffffffff82166107d3576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61056173ffffffffffffffffffffffffffffffffffffffff84168383610894565b81601452806034526f095ea7b30000000000000000000000005f5260205f604460105f875af13d1560015f51141716610872575f6034526f095ea7b30000000000000000000000005f525f38604460105f875af1508060345260205f604460105f875af13d1560015f5114171661087257633e3f8f735f526004601cfd5b5f603452505050565b5f385f3884865af16107825763b12d13eb5f526004601cfd5b81601452806034526fa9059cbb0000000000000000000000005f5260205f604460105f875af13d1560015f51141716610872576390b8ec185f526004601cfd5b803573ffffffffffffffffffffffffffffffffffffffff811681146108f7575f5ffd5b919050565b5f5f5f5f6080858703121561090f575f5ffd5b8435935061091f602086016108d4565b925061092d604086016108d4565b9396929550929360600135925050565b5f6020828403121561094d575f5ffd5b5051919050565b8181038181111561098c577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9291505056fea2646970667358221220a5326d1846574e2d44e25c0107d8330033d59b83596d14ef89bdf1c55cba754864736f6c634300081d0033";

type CurveFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveFacet__factory extends ContractFactory {
  constructor(...args: CurveFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CurveFacet> {
    return super.deploy(overrides || {}) as Promise<CurveFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CurveFacet {
    return super.attach(address) as CurveFacet;
  }
  override connect(signer: Signer): CurveFacet__factory {
    return super.connect(signer) as CurveFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveFacetInterface {
    return new utils.Interface(_abi) as CurveFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveFacet {
    return new Contract(address, _abi, signerOrProvider) as CurveFacet;
  }
}
