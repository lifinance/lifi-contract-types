/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { LiFiDiamond, LiFiDiamondInterface } from "../LiFiDiamond";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_contractOwner",
        type: "address",
        internalType: "address",
      },
      {
        name: "_diamondCutFacet",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "fallback",
    stateMutability: "payable",
  },
  {
    type: "receive",
    stateMutability: "payable",
  },
  {
    type: "event",
    name: "DiamondCut",
    inputs: [
      {
        name: "_diamondCut",
        type: "tuple[]",
        indexed: false,
        internalType: "struct LibDiamond.FacetCut[]",
        components: [
          {
            name: "facetAddress",
            type: "address",
            internalType: "address",
          },
          {
            name: "action",
            type: "uint8",
            internalType: "enum LibDiamond.FacetCutAction",
          },
          {
            name: "functionSelectors",
            type: "bytes4[]",
            internalType: "bytes4[]",
          },
        ],
      },
      {
        name: "_init",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "_calldata",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "previousOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "newOwner",
        type: "address",
        indexed: true,
        internalType: "address",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "CalldataEmptyButInitNotZero",
    inputs: [],
  },
  {
    type: "error",
    name: "FacetAddressIsNotZero",
    inputs: [],
  },
  {
    type: "error",
    name: "FacetAddressIsZero",
    inputs: [],
  },
  {
    type: "error",
    name: "FacetContainsNoCode",
    inputs: [],
  },
  {
    type: "error",
    name: "FunctionAlreadyExists",
    inputs: [],
  },
  {
    type: "error",
    name: "FunctionDoesNotExist",
    inputs: [],
  },
  {
    type: "error",
    name: "FunctionIsImmutable",
    inputs: [],
  },
  {
    type: "error",
    name: "IncorrectFacetCutAction",
    inputs: [],
  },
  {
    type: "error",
    name: "InitReverted",
    inputs: [],
  },
  {
    type: "error",
    name: "InitZeroButCalldataNotEmpty",
    inputs: [],
  },
  {
    type: "error",
    name: "NoSelectorsInFace",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x6080604052604051610f71380380610f7183398101604081905261002291610c4e565b61002b8261012e565b6040805160018082528183019092525f91816020015b60408051606080820183525f8083526020830152918101919091528152602001906001900390816100415750506040805160018082528183019092529192505f919060208083019080368337019050509050631f931c1c60e01b815f815181106100ad576100ad610c7f565b6001600160e01b031990921660209283029190910182015260408051606081019091526001600160a01b03851681529081015f815260200182815250825f815181106100fb576100fb610c7f565b6020026020010181905250610125825f60405180602001604052805f8152506101af60201b60201c565b50505050610e47565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c132080546001600160a01b031981166001600160a01b038481169182179093556040515f516020610f515f395f51905f52939092169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f5b8351811015610338575f8482815181106101cd576101cd610c7f565b60200260200101516020015190505f60028111156101ed576101ed610c93565b8160028111156101ff576101ff610c93565b036102525761024d85838151811061021957610219610c7f565b60200260200101515f015186848151811061023657610236610c7f565b60200260200101516040015161038360201b60201c565b61032f565b600181600281111561026657610266610c93565b036102b45761024d85838151811061028057610280610c7f565b60200260200101515f015186848151811061029d5761029d610c7f565b60200260200101516040015161052860201b60201c565b60028160028111156102c8576102c8610c93565b036103165761024d8583815181106102e2576102e2610c7f565b60200260200101515f01518684815181106102ff576102ff610c7f565b6020026020010151604001516106d660201b60201c565b60405163e548e6b560e01b815260040160405180910390fd5b506001016101b1565b507f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb67383838360405161036c93929190610cd5565b60405180910390a161037e8282610797565b505050565b80515f036103a4576040516307bc559560e41b815260040160405180910390fd5b5f516020610f515f395f51905f526001600160a01b0383166103d957604051636347641d60e11b815260040160405180910390fd5b6001600160a01b0383165f908152600182016020526040812054906001600160601b038216900361040e5761040e82856108a7565b5f5b8351811015610521575f84828151811061042c5761042c610c7f565b6020908102919091018101516001600160e01b031981165f908152918690526040909120549091506001600160a01b0316801561047c5760405163a023275d60e01b815260040160405180910390fd5b6001600160e01b031982165f8181526020878152604080832080546001600160a01b03908116600160a01b6001600160601b038c16021782558c168085526001808c0185529285208054938401815585528385206008840401805463ffffffff60079095166004026101000a948502191660e08a901c94909402939093179092559390925287905281546001600160a01b031916179055505060019182019101610410565b5050505050565b80515f03610549576040516307bc559560e41b815260040160405180910390fd5b5f516020610f515f395f51905f526001600160a01b03831661057e57604051636347641d60e11b815260040160405180910390fd5b6001600160a01b0383165f908152600182016020526040812054906001600160601b03821690036105b3576105b382856108a7565b5f5b8351811015610521575f8482815181106105d1576105d1610c7f565b6020908102919091018101516001600160e01b031981165f908152918690526040909120549091506001600160a01b0390811690871681036106265760405163a023275d60e01b815260040160405180910390fd5b6106318582846108f7565b6001600160e01b031982165f8181526020878152604080832080546001600160a01b03908116600160a01b6001600160601b038c16021782558c168085526001808c0185529285208054938401815585528385206008840401805463ffffffff60079095166004026101000a948502191660e08a901c94909402939093179092559390925287905281546001600160a01b0319161790555050600191820191016105b5565b80515f036106f7576040516307bc559560e41b815260040160405180910390fd5b5f516020610f515f395f51905f526001600160a01b0383161561072d57604051633ce4ef9160e11b815260040160405180910390fd5b5f5b8251811015610791575f83828151811061074b5761074b610c7f565b6020908102919091018101516001600160e01b031981165f908152918590526040909120549091506001600160a01b03166107878482846108f7565b505060010161072f565b50505050565b6001600160a01b0382166107c9578051156107c5576040516304c08b4360e51b815260040160405180910390fd5b5050565b80515f036107ea5760405163211002b360e11b815260040160405180910390fd5b6001600160a01b03821630146108035761080382610c11565b5f5f836001600160a01b03168360405161081d9190610ddf565b5f60405180830381855af49150503d805f8114610855576040519150601f19603f3d011682016040523d82523d5f602084013e61085a565b606091505b5091509150816107915780511561088e578060405162461bcd60e51b81526004016108859190610df5565b60405180910390fd5b60405163c53ebed560e01b815260040160405180910390fd5b6108b081610c11565b6002820180546001600160a01b039092165f8181526001948501602090815260408220860185905594840183559182529290200180546001600160a01b0319169091179055565b6001600160a01b03821661091e57604051631535ac5f60e31b815260040160405180910390fd5b306001600160a01b038316036109475760405163c3c5ec3760e01b815260040160405180910390fd5b6001600160e01b031981165f90815260208481526040808320546001600160a01b0386168452600180880190935290832054600160a01b9091046001600160601b0316929161099591610e0e565b9050808214610a84576001600160a01b0384165f90815260018601602052604081208054839081106109c9576109c9610c7f565b5f91825260208083206008830401546001600160a01b038916845260018a019091526040909220805460079092166004026101000a90920460e01b925082919085908110610a1957610a19610c7f565b5f91825260208083206008830401805463ffffffff60079094166004026101000a938402191660e09590951c929092029390931790556001600160e01b03199290921682528690526040902080546001600160a01b0316600160a01b6001600160601b038516021790555b6001600160a01b0384165f9081526001860160205260409020805480610aac57610aac610e33565b5f828152602080822060085f1990940193840401805463ffffffff600460078716026101000a0219169055919092556001600160e01b031985168252869052604081208190558190036105215760028501545f90610b0c90600190610e0e565b6001600160a01b0386165f908152600180890160205260409091200154909150808214610bb7575f876002018381548110610b4957610b49610c7f565b5f918252602090912001546002890180546001600160a01b039092169250829184908110610b7957610b79610c7f565b5f91825260208083209190910180546001600160a01b0319166001600160a01b03948516179055929091168152600189810190925260409020018190555b86600201805480610bca57610bca610e33565b5f828152602080822083015f1990810180546001600160a01b03191690559092019092556001600160a01b0388168252600189810190915260408220015550505050505050565b803b5f8190036107c5576040516271a80360e91b815260040160405180910390fd5b80516001600160a01b0381168114610c49575f5ffd5b919050565b5f5f60408385031215610c5f575f5ffd5b610c6883610c33565b9150610c7660208401610c33565b90509250929050565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52602160045260245ffd5b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b5f606082016060835280865180835260808501915060808160051b8601019250602088015f5b82811015610db057868503607f19018452815180516001600160a01b031686526020810151606087019060038110610d4157634e487b7160e01b5f52602160045260245ffd5b8060208901525060408201519150606060408801528082518083526080890191506020840193505f92505b80831015610d985783516001600160e01b03191682526020938401936001939093019290910190610d6c565b50965050506020938401939190910190600101610cfb565b5050506001600160a01b0386166020850152508281036040840152610dd58185610ca7565b9695505050505050565b5f82518060208501845e5f920191825250919050565b602081525f610e076020830184610ca7565b9392505050565b81810381811115610e2d57634e487b7160e01b5f52601160045260245ffd5b92915050565b634e487b7160e01b5f52603160045260245ffd5b60fe80610e535f395ff3fe608060405236600a57005b5f80357fffffffff000000000000000000000000000000000000000000000000000000001681527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c6020819052604090912054819073ffffffffffffffffffffffffffffffffffffffff168060ab576040517fa9ad62f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b365f5f375f5f365f845af43d5f5f3e80801560c4573d5ff35b3d5ffdfea2646970667358221220259bdd9ccfd5453188908dfc51789eaeaddb490689de2c51d030456aaca27cdc64736f6c634300081d0033c8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c";

type LiFiDiamondConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiFiDiamondConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiFiDiamond__factory extends ContractFactory {
  constructor(...args: LiFiDiamondConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _contractOwner: PromiseOrValue<string>,
    _diamondCutFacet: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<LiFiDiamond> {
    return super.deploy(
      _contractOwner,
      _diamondCutFacet,
      overrides || {}
    ) as Promise<LiFiDiamond>;
  }
  override getDeployTransaction(
    _contractOwner: PromiseOrValue<string>,
    _diamondCutFacet: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _contractOwner,
      _diamondCutFacet,
      overrides || {}
    );
  }
  override attach(address: string): LiFiDiamond {
    return super.attach(address) as LiFiDiamond;
  }
  override connect(signer: Signer): LiFiDiamond__factory {
    return super.connect(signer) as LiFiDiamond__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiFiDiamondInterface {
    return new utils.Interface(_abi) as LiFiDiamondInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiFiDiamond {
    return new Contract(address, _abi, signerOrProvider) as LiFiDiamond;
  }
}
