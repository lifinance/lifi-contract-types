/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  ContractTestTwo,
  ContractTestTwoInterface,
} from "../ContractTestTwo";

const _abi = [
  {
    type: "constructor",
    inputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "receive",
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "emergencyWithdrawForAdmin",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address payable",
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f5ffd5b505f80546001600160a01b031916331790556101688061002d5f395ff3fe60806040526004361061002b575f3560e01c80638da5cb5b14610036578063f85f25931461008a575f5ffd5b3661003257005b5f5ffd5b348015610041575f5ffd5b505f546100619073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b348015610095575f5ffd5b506100a96100a43660046100f0565b6100ab565b005b60405173ffffffffffffffffffffffffffffffffffffffff83169082156108fc029083905f818181858888f193505050501580156100eb573d5f5f3e3d5ffd5b505050565b5f5f60408385031215610101575f5ffd5b823573ffffffffffffffffffffffffffffffffffffffff81168114610124575f5ffd5b94602093909301359350505056fea26469706673582212203fc0160480d6475bb2aa45b8fdde11d722a44ba85e436ead40c286d833832e2d64736f6c634300081d0033";

type ContractTestTwoConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ContractTestTwoConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ContractTestTwo__factory extends ContractFactory {
  constructor(...args: ContractTestTwoConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTestTwo> {
    return super.deploy(overrides || {}) as Promise<ContractTestTwo>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ContractTestTwo {
    return super.attach(address) as ContractTestTwo;
  }
  override connect(signer: Signer): ContractTestTwo__factory {
    return super.connect(signer) as ContractTestTwo__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ContractTestTwoInterface {
    return new utils.Interface(_abi) as ContractTestTwoInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ContractTestTwo {
    return new Contract(address, _abi, signerOrProvider) as ContractTestTwo;
  }
}
