/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  GenericSwapFacet,
  GenericSwapFacetInterface,
} from "../GenericSwapFacet";

const _abi = [
  {
    type: "function",
    name: "swapTokensGeneric",
    inputs: [
      {
        name: "_transactionId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_integrator",
        type: "string",
        internalType: "string",
      },
      {
        name: "_referrer",
        type: "string",
        internalType: "string",
      },
      {
        name: "_receiver",
        type: "address",
        internalType: "address payable",
      },
      {
        name: "_minAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_swapData",
        type: "tuple[]",
        internalType: "struct LibSwap.SwapData[]",
        components: [
          {
            name: "callTo",
            type: "address",
            internalType: "address",
          },
          {
            name: "approveTo",
            type: "address",
            internalType: "address",
          },
          {
            name: "sendingAssetId",
            type: "address",
            internalType: "address",
          },
          {
            name: "receivingAssetId",
            type: "address",
            internalType: "address",
          },
          {
            name: "fromAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "requiresDeposit",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "event",
    name: "LiFiGenericSwapCompleted",
    inputs: [
      {
        name: "transactionId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "integrator",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "referrer",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "receiver",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "fromAssetId",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "toAssetId",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "fromAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "toAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "LiFiSwappedGeneric",
    inputs: [
      {
        name: "transactionId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "integrator",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "referrer",
        type: "string",
        indexed: false,
        internalType: "string",
      },
      {
        name: "fromAssetId",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "toAssetId",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "fromAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "toAmount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "LiFiTransferCompleted",
    inputs: [
      {
        name: "transactionId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "receivingAssetId",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "receiver",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "timestamp",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "LiFiTransferRecovered",
    inputs: [
      {
        name: "transactionId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "receivingAssetId",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "receiver",
        type: "address",
        indexed: false,
        internalType: "address",
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "timestamp",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "LiFiTransferStarted",
    inputs: [
      {
        name: "bridgeData",
        type: "tuple",
        indexed: false,
        internalType: "struct ILiFi.BridgeData",
        components: [
          {
            name: "transactionId",
            type: "bytes32",
            internalType: "bytes32",
          },
          {
            name: "bridge",
            type: "string",
            internalType: "string",
          },
          {
            name: "integrator",
            type: "string",
            internalType: "string",
          },
          {
            name: "referrer",
            type: "address",
            internalType: "address",
          },
          {
            name: "sendingAssetId",
            type: "address",
            internalType: "address",
          },
          {
            name: "receiver",
            type: "address",
            internalType: "address",
          },
          {
            name: "minAmount",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "destinationChainId",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "hasSourceSwaps",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "hasDestinationCall",
            type: "bool",
            internalType: "bool",
          },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "ContractCallNotAllowed",
    inputs: [],
  },
  {
    type: "error",
    name: "CumulativeSlippageTooHigh",
    inputs: [
      {
        name: "minAmount",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "receivedAmount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "InsufficientBalance",
    inputs: [
      {
        name: "required",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "balance",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidAmount",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidContract",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidReceiver",
    inputs: [],
  },
  {
    type: "error",
    name: "NoSwapDataProvided",
    inputs: [],
  },
  {
    type: "error",
    name: "NoSwapFromZeroBalance",
    inputs: [],
  },
  {
    type: "error",
    name: "NullAddrIsNotAValidSpender",
    inputs: [],
  },
  {
    type: "error",
    name: "ReentrancyError",
    inputs: [],
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611502806100206000396000f3fe60806040526004361061001e5760003560e01c80634630a0d814610023575b600080fd5b61003661003136600461110b565b610038565b005b7fa65bb2f450488ab0858c00edc14abc5297769bf42adb48cfb77752890e8b697b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016100b3576040517f29f745a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600181558460006100c434476111fc565b905073ffffffffffffffffffffffffffffffffffffffff8716610113576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006101228d8888888c61024b565b9050600086866101336001826111fc565b81811061014257610142611236565b90506020028101906101549190611265565b6101659060808101906060016112a3565b9050610172818a84610393565b8d7f38eee76fd911eabac79da7af16053e809be0e12c8637f156e77e1af309b995378e8e8e8e8e8d8d60008181106101ac576101ac611236565b90506020028101906101be9190611265565b6101cf9060608101906040016112a3565b888f8f60008181106101e3576101e3611236565b90506020028101906101f59190611265565b608001358b60405161020f99989796959493929190611310565b60405180910390a250479050818111156102385761023860008461023385856111fc565b610393565b5050600090915550505050505050505050565b600082808203610287576040517f0503c3ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600085856102966001856111fc565b8181106102a5576102a5611236565b90506020028101906102b79190611265565b6102c89060808101906060016112a3565b905060006102d5826103c8565b905073ffffffffffffffffffffffffffffffffffffffff82166102ff576102fc34826111fc565b90505b600061030b8888610413565b9050610317888861051f565b6103248a8989898561058c565b600082610330856103c8565b61033a91906111fc565b905089811015610385576040517f275c273c000000000000000000000000000000000000000000000000000000008152600481018b9052602481018290526044015b60405180910390fd5b9a9950505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff83166103bd576103b8828261093e565b505050565b6103b88383836109af565b600073ffffffffffffffffffffffffffffffffffffffff82161561040b5761040673ffffffffffffffffffffffffffffffffffffffff831630610a1d565b61040d565b475b92915050565b60608160008167ffffffffffffffff8111156104315761043161137b565b60405190808252806020026020018201604052801561045a578160200160208202803683370190505b5090506000805b838110156105145786868281811061047b5761047b611236565b905060200281019061048d9190611265565b61049e9060808101906060016112a3565b91506104a9826103c8565b8382815181106104bb576104bb611236565b602090810291909101015273ffffffffffffffffffffffffffffffffffffffff821661050c57348382815181106104f4576104f4611236565b6020026020010181815161050891906111fc565b9052505b600101610461565b509095945050505050565b60005b818110156103b8573683838381811061053d5761053d611236565b905060200281019061054f9190611265565b905061056160e0820160c083016113aa565b156105835761058361057960608301604084016112a3565b8260800135610a52565b50600101610522565b83838383826001811461085957600085856105a86001856111fc565b8181106105b7576105b7611236565b90506020028101906105c99190611265565b6105da9060808101906060016112a3565b9050600089815b8181101561078557368d8d838181106105fc576105fc611236565b905060200281019061060e9190611265565b905061063d61062360608301604084016112a3565b73ffffffffffffffffffffffffffffffffffffffff161590565b806106a057506106a061065660408301602084016112a3565b73ffffffffffffffffffffffffffffffffffffffff1660009081527f7a8ac5d3b7183f220a0602439da45ea337311d699902d1ed11a3725a714e7f1e602052604090205460ff1690565b80156106b757506106b761065660208301836112a3565b801561073c575061073c6106ce60a08301836113cc565b6106dd91600491600091611431565b6106e69161145b565b7fffffffff000000000000000000000000000000000000000000000000000000001660009081527f7a8ac5d3b7183f220a0602439da45ea337311d699902d1ed11a3725a714e7f1f602052604090205460ff1690565b610772576040517f9453980400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61077c8f82610b03565b506001016105e1565b505060005b6107956001856111fc565b8110156108515760008888838181106107b0576107b0611236565b90506020028101906107c29190611265565b6107d39060808101906060016112a3565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108485785828151811061081a5761081a611236565b602002602001015161082b826103c8565b61083591906111fc565b9250821561084857610848818885610393565b5060010161078a565b505050610932565b8760005b8181101561092f57368b8b8381811061087857610878611236565b905060200281019061088a9190611265565b905061089f61062360608301604084016112a3565b806108b857506108b861065660408301602084016112a3565b80156108cf57506108cf61065660208301836112a3565b80156108e657506108e66106ce60a08301836113cc565b61091c576040517f9453980400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109268d82610b03565b5060010161085d565b50505b50505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff821661098b576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109ab73ffffffffffffffffffffffffffffffffffffffff831682610e02565b5050565b73ffffffffffffffffffffffffffffffffffffffff82166109fc576040517f1e4ec46b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103b873ffffffffffffffffffffffffffffffffffffffff84168383610e1e565b6000816014526f70a0823100000000000000000000000060005260208060246010865afa601f3d111660205102905092915050565b80600003610a8c576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610ae157803410156109ab576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109ab73ffffffffffffffffffffffffffffffffffffffff8316333084610e6d565b610b3a610b1360208301836112a3565b3f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470141590565b610b70576040517f6eefed2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60808101356000819003610bb0576040517fe46e079c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610bc561062360608501604086016112a3565b610bd0576000610bd6565b82608001355b90506000610bf2610bed60608601604087016112a3565b6103c8565b90506000610c09610bed60808701606088016112a3565b905082600003610c4057610c40610c2660608701604088016112a3565b610c3660408801602089016112a3565b8760800135610eca565b8460800135821015610c8b576040517fcf479181000000000000000000000000000000000000000000000000000000008152608086013560048201526024810183905260440161037c565b600080610c9b60208801886112a3565b73ffffffffffffffffffffffffffffffffffffffff1685610cbf60a08a018a6113cc565b604051610ccd9291906114a3565b60006040518083038185875af1925050503d8060008114610d0a576040519150601f19603f3d011682016040523d82523d6000602084013e610d0f565b606091505b509150915081610d2257610d2281610ef6565b6000610d37610bed60808a0160608b016112a3565b90507f7bfdfdb5e3a3776976e53cb0607060f54c5312701c8cba1155cc4d5394440b3889610d6860208b018b6112a3565b610d7860608c0160408d016112a3565b610d8860808d0160608e016112a3565b8c60800135898711610d9a5786610da4565b610da48a886111fc565b6040805196875273ffffffffffffffffffffffffffffffffffffffff95861660208801529385169386019390935292166060840152608083019190915260a08201524260c082015260e00160405180910390a1505050505050505050565b60003860003884865af16109ab5763b12d13eb6000526004601cfd5b81601452806034526fa9059cbb00000000000000000000000060005260206000604460106000875af13d156001600051141716610e63576390b8ec186000526004601cfd5b6000603452505050565b60405181606052826040528360601b602c526f23b872dd000000000000000000000000600c52602060006064601c6000895af13d156001600051141716610ebc57637939f4246000526004601cfd5b600060605260405250505050565b6103b88383837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610f00565b8051602082018181fd5b73ffffffffffffffffffffffffffffffffffffffff8316610f4d576040517f63ba9bff00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff848116602483015283919086169063dd62ed3e90604401602060405180830381865afa158015610fc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe691906114b3565b101561100d5761100d73ffffffffffffffffffffffffffffffffffffffff85168483611013565b50505050565b81601452806034526f095ea7b300000000000000000000000060005260206000604460106000875af13d156001600051141716610e635760006034526f095ea7b3000000000000000000000000600052600038604460106000875af1508060345260206000604460106000875af13d156001600051141716610e6357633e3f8f736000526004601cfd5b60008083601f8401126110af57600080fd5b50813567ffffffffffffffff8111156110c757600080fd5b6020830191508360208285010111156110df57600080fd5b9250929050565b73ffffffffffffffffffffffffffffffffffffffff8116811461110857600080fd5b50565b600080600080600080600080600060c08a8c03121561112957600080fd5b8935985060208a013567ffffffffffffffff8082111561114857600080fd5b6111548d838e0161109d565b909a50985060408c013591508082111561116d57600080fd5b6111798d838e0161109d565b909850965060608c0135915061118e826110e6565b90945060808b0135935060a08b013590808211156111ab57600080fd5b818c0191508c601f8301126111bf57600080fd5b8135818111156111ce57600080fd5b8d60208260051b85010111156111e357600080fd5b6020830194508093505050509295985092959850929598565b8181038181111561040d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2183360301811261129957600080fd5b9190910192915050565b6000602082840312156112b557600080fd5b81356112c0816110e6565b9392505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60e08152600061132460e083018b8d6112c7565b8281036020840152611337818a8c6112c7565b73ffffffffffffffffffffffffffffffffffffffff98891660408501529688166060840152505092909416608083015260a082015260c00191909152949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156113bc57600080fd5b813580151581146112c057600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261140157600080fd5b83018035915067ffffffffffffffff82111561141c57600080fd5b6020019150368190038213156110df57600080fd5b6000808585111561144157600080fd5b8386111561144e57600080fd5b5050820193919092039150565b7fffffffff00000000000000000000000000000000000000000000000000000000813581811691600485101561149b5780818660040360031b1b83161692505b505092915050565b8183823760009101908152919050565b6000602082840312156114c557600080fd5b505191905056fea264697066735822122038c392c348296aa2eaf8df7334617a6b0bb05c0bffb42b8f9d237775c66320c164736f6c63430008110033";

type GenericSwapFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GenericSwapFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GenericSwapFacet__factory extends ContractFactory {
  constructor(...args: GenericSwapFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<GenericSwapFacet> {
    return super.deploy(overrides || {}) as Promise<GenericSwapFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GenericSwapFacet {
    return super.attach(address) as GenericSwapFacet;
  }
  override connect(signer: Signer): GenericSwapFacet__factory {
    return super.connect(signer) as GenericSwapFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GenericSwapFacetInterface {
    return new utils.Interface(_abi) as GenericSwapFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GenericSwapFacet {
    return new Contract(address, _abi, signerOrProvider) as GenericSwapFacet;
  }
}
