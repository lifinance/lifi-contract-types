/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { CBridgeInit, CBridgeInitInterface } from "../CBridgeInit";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_bridge",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_chainId",
        type: "uint256",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060cc8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063399ae72414602d575b600080fd5b605e60383660046060565b600480546001600160a01b0319166001600160a01b039390931692909217909155600555565b005b60008060408385031215607257600080fd5b82356001600160a01b0381168114608857600080fd5b94602093909301359350505056fea264697066735822122089f53e9933e15586bc9a24b21c97501719a05013fc6650bb2d797daad219b49764736f6c63430008070033";

export class CBridgeInit__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CBridgeInit> {
    return super.deploy(overrides || {}) as Promise<CBridgeInit>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CBridgeInit {
    return super.attach(address) as CBridgeInit;
  }
  connect(signer: Signer): CBridgeInit__factory {
    return super.connect(signer) as CBridgeInit__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CBridgeInitInterface {
    return new utils.Interface(_abi) as CBridgeInitInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CBridgeInit {
    return new Contract(address, _abi, signerOrProvider) as CBridgeInit;
  }
}
