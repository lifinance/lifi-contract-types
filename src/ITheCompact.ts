/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ITheCompactInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "__registerAllocator(address,bytes)": FunctionFragment;
    "batchDepositAndRegisterFor(address,uint256[2][],address,uint256,uint256,bytes32,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "__registerAllocator"
      | "batchDepositAndRegisterFor"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__registerAllocator",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchDepositAndRegisterFor",
    values: [
      PromiseOrValue<string>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>][],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__registerAllocator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchDepositAndRegisterFor",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ITheCompact extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITheCompactInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    __registerAllocator(
      allocator: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchDepositAndRegisterFor(
      recipient: PromiseOrValue<string>,
      idsAndAmounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      arbiter: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expires: PromiseOrValue<BigNumberish>,
      typehash: PromiseOrValue<BytesLike>,
      witness: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  __registerAllocator(
    allocator: PromiseOrValue<string>,
    proof: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchDepositAndRegisterFor(
    recipient: PromiseOrValue<string>,
    idsAndAmounts: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ][],
    arbiter: PromiseOrValue<string>,
    nonce: PromiseOrValue<BigNumberish>,
    expires: PromiseOrValue<BigNumberish>,
    typehash: PromiseOrValue<BytesLike>,
    witness: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    __registerAllocator(
      allocator: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchDepositAndRegisterFor(
      recipient: PromiseOrValue<string>,
      idsAndAmounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      arbiter: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expires: PromiseOrValue<BigNumberish>,
      typehash: PromiseOrValue<BytesLike>,
      witness: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber[]] & {
        claimhash: string;
        registeredAmounts: BigNumber[];
      }
    >;
  };

  filters: {};

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    __registerAllocator(
      allocator: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchDepositAndRegisterFor(
      recipient: PromiseOrValue<string>,
      idsAndAmounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      arbiter: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expires: PromiseOrValue<BigNumberish>,
      typehash: PromiseOrValue<BytesLike>,
      witness: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __registerAllocator(
      allocator: PromiseOrValue<string>,
      proof: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchDepositAndRegisterFor(
      recipient: PromiseOrValue<string>,
      idsAndAmounts: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ][],
      arbiter: PromiseOrValue<string>,
      nonce: PromiseOrValue<BigNumberish>,
      expires: PromiseOrValue<BigNumberish>,
      typehash: PromiseOrValue<BytesLike>,
      witness: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
