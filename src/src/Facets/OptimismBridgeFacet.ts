/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace ILiFi {
  export type LiFiDataStruct = {
    transactionId: BytesLike;
    integrator: string;
    referrer: string;
    sendingAssetId: string;
    receivingAssetId: string;
    receiver: string;
    destinationChainId: BigNumberish;
    amount: BigNumberish;
  };

  export type LiFiDataStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    transactionId: string;
    integrator: string;
    referrer: string;
    sendingAssetId: string;
    receivingAssetId: string;
    receiver: string;
    destinationChainId: BigNumber;
    amount: BigNumber;
  };
}

export declare namespace OptimismBridgeFacet {
  export type BridgeDataStruct = {
    assetId: string;
    assetIdOnL2: string;
    amount: BigNumberish;
    receiver: string;
    bridge: string;
    l2Gas: BigNumberish;
    isSynthetix: boolean;
  };

  export type BridgeDataStructOutput = [
    string,
    string,
    BigNumber,
    string,
    string,
    number,
    boolean
  ] & {
    assetId: string;
    assetIdOnL2: string;
    amount: BigNumber;
    receiver: string;
    bridge: string;
    l2Gas: number;
    isSynthetix: boolean;
  };
}

export declare namespace LibSwap {
  export type SwapDataStruct = {
    callTo: string;
    approveTo: string;
    sendingAssetId: string;
    receivingAssetId: string;
    fromAmount: BigNumberish;
    callData: BytesLike;
  };

  export type SwapDataStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    string
  ] & {
    callTo: string;
    approveTo: string;
    sendingAssetId: string;
    receivingAssetId: string;
    fromAmount: BigNumber;
    callData: string;
  };
}

export interface OptimismBridgeFacetInterface extends utils.Interface {
  functions: {
    "startBridgeTokensViaOptimismBridge((bytes32,string,address,address,address,address,uint256,uint256),(address,address,uint256,address,address,uint32,bool))": FunctionFragment;
    "swapAndStartBridgeTokensViaOptimismBridge((bytes32,string,address,address,address,address,uint256,uint256),(address,address,address,address,uint256,bytes)[],(address,address,uint256,address,address,uint32,bool))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "startBridgeTokensViaOptimismBridge"
      | "swapAndStartBridgeTokensViaOptimismBridge"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "startBridgeTokensViaOptimismBridge",
    values: [ILiFi.LiFiDataStruct, OptimismBridgeFacet.BridgeDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndStartBridgeTokensViaOptimismBridge",
    values: [
      ILiFi.LiFiDataStruct,
      LibSwap.SwapDataStruct[],
      OptimismBridgeFacet.BridgeDataStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "startBridgeTokensViaOptimismBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndStartBridgeTokensViaOptimismBridge",
    data: BytesLike
  ): Result;

  events: {
    "LiFiTransferCompleted(bytes32,address,address,uint256,uint256)": EventFragment;
    "LiFiTransferStarted(bytes32,string,string,string,address,address,address,address,uint256,uint256,bool,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiFiTransferCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiFiTransferStarted"): EventFragment;
}

export interface LiFiTransferCompletedEventObject {
  transactionId: string;
  receivingAssetId: string;
  receiver: string;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type LiFiTransferCompletedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  LiFiTransferCompletedEventObject
>;

export type LiFiTransferCompletedEventFilter =
  TypedEventFilter<LiFiTransferCompletedEvent>;

export interface LiFiTransferStartedEventObject {
  transactionId: string;
  bridge: string;
  bridgeData: string;
  integrator: string;
  referrer: string;
  sendingAssetId: string;
  receivingAssetId: string;
  receiver: string;
  amount: BigNumber;
  destinationChainId: BigNumber;
  hasSourceSwap: boolean;
  hasDestinationCall: boolean;
}
export type LiFiTransferStartedEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ],
  LiFiTransferStartedEventObject
>;

export type LiFiTransferStartedEventFilter =
  TypedEventFilter<LiFiTransferStartedEvent>;

export interface OptimismBridgeFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptimismBridgeFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    startBridgeTokensViaOptimismBridge(
      _lifiData: ILiFi.LiFiDataStruct,
      _bridgeData: OptimismBridgeFacet.BridgeDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapAndStartBridgeTokensViaOptimismBridge(
      _lifiData: ILiFi.LiFiDataStruct,
      _swapData: LibSwap.SwapDataStruct[],
      _bridgeData: OptimismBridgeFacet.BridgeDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  startBridgeTokensViaOptimismBridge(
    _lifiData: ILiFi.LiFiDataStruct,
    _bridgeData: OptimismBridgeFacet.BridgeDataStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapAndStartBridgeTokensViaOptimismBridge(
    _lifiData: ILiFi.LiFiDataStruct,
    _swapData: LibSwap.SwapDataStruct[],
    _bridgeData: OptimismBridgeFacet.BridgeDataStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    startBridgeTokensViaOptimismBridge(
      _lifiData: ILiFi.LiFiDataStruct,
      _bridgeData: OptimismBridgeFacet.BridgeDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    swapAndStartBridgeTokensViaOptimismBridge(
      _lifiData: ILiFi.LiFiDataStruct,
      _swapData: LibSwap.SwapDataStruct[],
      _bridgeData: OptimismBridgeFacet.BridgeDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LiFiTransferCompleted(bytes32,address,address,uint256,uint256)"(
      transactionId?: BytesLike | null,
      receivingAssetId?: null,
      receiver?: null,
      amount?: null,
      timestamp?: null
    ): LiFiTransferCompletedEventFilter;
    LiFiTransferCompleted(
      transactionId?: BytesLike | null,
      receivingAssetId?: null,
      receiver?: null,
      amount?: null,
      timestamp?: null
    ): LiFiTransferCompletedEventFilter;

    "LiFiTransferStarted(bytes32,string,string,string,address,address,address,address,uint256,uint256,bool,bool)"(
      transactionId?: BytesLike | null,
      bridge?: null,
      bridgeData?: null,
      integrator?: null,
      referrer?: null,
      sendingAssetId?: null,
      receivingAssetId?: null,
      receiver?: null,
      amount?: null,
      destinationChainId?: null,
      hasSourceSwap?: null,
      hasDestinationCall?: null
    ): LiFiTransferStartedEventFilter;
    LiFiTransferStarted(
      transactionId?: BytesLike | null,
      bridge?: null,
      bridgeData?: null,
      integrator?: null,
      referrer?: null,
      sendingAssetId?: null,
      receivingAssetId?: null,
      receiver?: null,
      amount?: null,
      destinationChainId?: null,
      hasSourceSwap?: null,
      hasDestinationCall?: null
    ): LiFiTransferStartedEventFilter;
  };

  estimateGas: {
    startBridgeTokensViaOptimismBridge(
      _lifiData: ILiFi.LiFiDataStruct,
      _bridgeData: OptimismBridgeFacet.BridgeDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapAndStartBridgeTokensViaOptimismBridge(
      _lifiData: ILiFi.LiFiDataStruct,
      _swapData: LibSwap.SwapDataStruct[],
      _bridgeData: OptimismBridgeFacet.BridgeDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    startBridgeTokensViaOptimismBridge(
      _lifiData: ILiFi.LiFiDataStruct,
      _bridgeData: OptimismBridgeFacet.BridgeDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapAndStartBridgeTokensViaOptimismBridge(
      _lifiData: ILiFi.LiFiDataStruct,
      _swapData: LibSwap.SwapDataStruct[],
      _bridgeData: OptimismBridgeFacet.BridgeDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
