/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SwapFacetInterface extends ethers.utils.Interface {
  functions: {
    "NATIVE_TOKEN_ADDRESS()": FunctionFragment;
    "completeTransfer(address,bytes)": FunctionFragment;
    "startTransfer(tuple,bytes,bytes,bytes,tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "NATIVE_TOKEN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeTransfer",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startTransfer",
    values: [
      {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        callDataHash: BytesLike;
        transactionId: BytesLike;
      },
      BytesLike,
      BytesLike,
      BytesLike,
      {
        amount: BigNumberish;
        expiry: BigNumberish;
        swapCallAddress: string;
        swapCallData: BytesLike;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "NATIVE_TOKEN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTransfer",
    data: BytesLike
  ): Result;

  events: {};
}

export class SwapFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SwapFacetInterface;

  functions: {
    NATIVE_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    completeTransfer(
      swapCallAddress: string,
      swapCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTransfer(
      invariantData: {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        callDataHash: BytesLike;
        transactionId: BytesLike;
      },
      encryptedCallData: BytesLike,
      encodedBid: BytesLike,
      bidSignature: BytesLike,
      swapData: {
        amount: BigNumberish;
        expiry: BigNumberish;
        swapCallAddress: string;
        swapCallData: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  NATIVE_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

  completeTransfer(
    swapCallAddress: string,
    swapCallData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTransfer(
    invariantData: {
      receivingChainTxManagerAddress: string;
      user: string;
      router: string;
      sendingAssetId: string;
      receivingAssetId: string;
      sendingChainFallback: string;
      receivingAddress: string;
      callTo: string;
      sendingChainId: BigNumberish;
      receivingChainId: BigNumberish;
      callDataHash: BytesLike;
      transactionId: BytesLike;
    },
    encryptedCallData: BytesLike,
    encodedBid: BytesLike,
    bidSignature: BytesLike,
    swapData: {
      amount: BigNumberish;
      expiry: BigNumberish;
      swapCallAddress: string;
      swapCallData: BytesLike;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NATIVE_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

    completeTransfer(
      swapCallAddress: string,
      swapCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    startTransfer(
      invariantData: {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        callDataHash: BytesLike;
        transactionId: BytesLike;
      },
      encryptedCallData: BytesLike,
      encodedBid: BytesLike,
      bidSignature: BytesLike,
      swapData: {
        amount: BigNumberish;
        expiry: BigNumberish;
        swapCallAddress: string;
        swapCallData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        callDataHash: string;
        transactionId: string;
        sendingChainId: BigNumber;
        receivingChainId: BigNumber;
        amount: BigNumber;
        expiry: BigNumber;
        preparedBlockNumber: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    NATIVE_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    completeTransfer(
      swapCallAddress: string,
      swapCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTransfer(
      invariantData: {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        callDataHash: BytesLike;
        transactionId: BytesLike;
      },
      encryptedCallData: BytesLike,
      encodedBid: BytesLike,
      bidSignature: BytesLike,
      swapData: {
        amount: BigNumberish;
        expiry: BigNumberish;
        swapCallAddress: string;
        swapCallData: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NATIVE_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeTransfer(
      swapCallAddress: string,
      swapCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTransfer(
      invariantData: {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        callDataHash: BytesLike;
        transactionId: BytesLike;
      },
      encryptedCallData: BytesLike,
      encodedBid: BytesLike,
      bidSignature: BytesLike,
      swapData: {
        amount: BigNumberish;
        expiry: BigNumberish;
        swapCallAddress: string;
        swapCallData: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
