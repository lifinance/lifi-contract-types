/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ITransactionManagerInterface extends ethers.utils.Interface {
  functions: {
    "addAssetId(address)": FunctionFragment;
    "addLiquidity(uint256,address)": FunctionFragment;
    "addLiquidityFor(uint256,address,address)": FunctionFragment;
    "addRouter(address)": FunctionFragment;
    "cancel(((address,address,address,address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),bytes,bytes))": FunctionFragment;
    "fulfill(((address,address,address,address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),uint256,bytes,bytes,bytes))": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getStoredChainId()": FunctionFragment;
    "prepare(((address,address,address,address,address,address,address,address,address,uint256,uint256,bytes32,bytes32),uint256,uint256,bytes,bytes,bytes,bytes))": FunctionFragment;
    "removeAssetId(address)": FunctionFragment;
    "removeLiquidity(uint256,address,address)": FunctionFragment;
    "removeRouter(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addAssetId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityFor",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "addRouter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [
      {
        txData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: BytesLike;
          transactionId: BytesLike;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          amount: BigNumberish;
          expiry: BigNumberish;
          preparedBlockNumber: BigNumberish;
        };
        signature: BytesLike;
        encodedMeta: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfill",
    values: [
      {
        txData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: BytesLike;
          transactionId: BytesLike;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          amount: BigNumberish;
          expiry: BigNumberish;
          preparedBlockNumber: BigNumberish;
        };
        relayerFee: BigNumberish;
        signature: BytesLike;
        callData: BytesLike;
        encodedMeta: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStoredChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prepare",
    values: [
      {
        invariantData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          callDataHash: BytesLike;
          transactionId: BytesLike;
        };
        amount: BigNumberish;
        expiry: BigNumberish;
        encryptedCallData: BytesLike;
        encodedBid: BytesLike;
        bidSignature: BytesLike;
        encodedMeta: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAssetId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRouter",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addAssetId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStoredChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prepare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeRouter",
    data: BytesLike
  ): Result;

  events: {
    "AssetAdded(address,address)": EventFragment;
    "AssetRemoved(address,address)": EventFragment;
    "LiquidityAdded(address,address,uint256,address)": EventFragment;
    "LiquidityRemoved(address,address,uint256,address)": EventFragment;
    "RouterAdded(address,address)": EventFragment;
    "RouterRemoved(address,address)": EventFragment;
    "TransactionCancelled(address,address,bytes32,tuple,address)": EventFragment;
    "TransactionFulfilled(address,address,bytes32,tuple,bool,bool,bytes,address)": EventFragment;
    "TransactionPrepared(address,address,bytes32,tuple,address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionPrepared"): EventFragment;
}

export type AssetAddedEvent = TypedEvent<
  [string, string] & { addedAssetId: string; caller: string }
>;

export type AssetRemovedEvent = TypedEvent<
  [string, string] & { removedAssetId: string; caller: string }
>;

export type LiquidityAddedEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    router: string;
    assetId: string;
    amount: BigNumber;
    caller: string;
  }
>;

export type LiquidityRemovedEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    router: string;
    assetId: string;
    amount: BigNumber;
    recipient: string;
  }
>;

export type RouterAddedEvent = TypedEvent<
  [string, string] & { addedRouter: string; caller: string }
>;

export type RouterRemovedEvent = TypedEvent<
  [string, string] & { removedRouter: string; caller: string }
>;

export type TransactionCancelledEvent = TypedEvent<
  [
    string,
    string,
    string,
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        callDataHash: string;
        transactionId: string;
        sendingChainId: BigNumber;
        receivingChainId: BigNumber;
        amount: BigNumber;
        expiry: BigNumber;
        preparedBlockNumber: BigNumber;
      },
      string,
      string
    ] & {
      txData: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        callDataHash: string;
        transactionId: string;
        sendingChainId: BigNumber;
        receivingChainId: BigNumber;
        amount: BigNumber;
        expiry: BigNumber;
        preparedBlockNumber: BigNumber;
      };
      signature: string;
      encodedMeta: string;
    },
    string
  ] & {
    user: string;
    router: string;
    transactionId: string;
    args: [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        callDataHash: string;
        transactionId: string;
        sendingChainId: BigNumber;
        receivingChainId: BigNumber;
        amount: BigNumber;
        expiry: BigNumber;
        preparedBlockNumber: BigNumber;
      },
      string,
      string
    ] & {
      txData: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        callDataHash: string;
        transactionId: string;
        sendingChainId: BigNumber;
        receivingChainId: BigNumber;
        amount: BigNumber;
        expiry: BigNumber;
        preparedBlockNumber: BigNumber;
      };
      signature: string;
      encodedMeta: string;
    };
    caller: string;
  }
>;

export type TransactionFulfilledEvent = TypedEvent<
  [
    string,
    string,
    string,
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        callDataHash: string;
        transactionId: string;
        sendingChainId: BigNumber;
        receivingChainId: BigNumber;
        amount: BigNumber;
        expiry: BigNumber;
        preparedBlockNumber: BigNumber;
      },
      BigNumber,
      string,
      string,
      string
    ] & {
      txData: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        callDataHash: string;
        transactionId: string;
        sendingChainId: BigNumber;
        receivingChainId: BigNumber;
        amount: BigNumber;
        expiry: BigNumber;
        preparedBlockNumber: BigNumber;
      };
      relayerFee: BigNumber;
      signature: string;
      callData: string;
      encodedMeta: string;
    },
    boolean,
    boolean,
    string,
    string
  ] & {
    user: string;
    router: string;
    transactionId: string;
    args: [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        callDataHash: string;
        transactionId: string;
        sendingChainId: BigNumber;
        receivingChainId: BigNumber;
        amount: BigNumber;
        expiry: BigNumber;
        preparedBlockNumber: BigNumber;
      },
      BigNumber,
      string,
      string,
      string
    ] & {
      txData: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        callDataHash: string;
        transactionId: string;
        sendingChainId: BigNumber;
        receivingChainId: BigNumber;
        amount: BigNumber;
        expiry: BigNumber;
        preparedBlockNumber: BigNumber;
      };
      relayerFee: BigNumber;
      signature: string;
      callData: string;
      encodedMeta: string;
    };
    success: boolean;
    isContract: boolean;
    returnData: string;
    caller: string;
  }
>;

export type TransactionPreparedEvent = TypedEvent<
  [
    string,
    string,
    string,
    [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      receivingChainTxManagerAddress: string;
      user: string;
      router: string;
      initiator: string;
      sendingAssetId: string;
      receivingAssetId: string;
      sendingChainFallback: string;
      receivingAddress: string;
      callTo: string;
      callDataHash: string;
      transactionId: string;
      sendingChainId: BigNumber;
      receivingChainId: BigNumber;
      amount: BigNumber;
      expiry: BigNumber;
      preparedBlockNumber: BigNumber;
    },
    string,
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        sendingChainId: BigNumber;
        receivingChainId: BigNumber;
        callDataHash: string;
        transactionId: string;
      },
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string
    ] & {
      invariantData: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        sendingChainId: BigNumber;
        receivingChainId: BigNumber;
        callDataHash: string;
        transactionId: string;
      };
      amount: BigNumber;
      expiry: BigNumber;
      encryptedCallData: string;
      encodedBid: string;
      bidSignature: string;
      encodedMeta: string;
    }
  ] & {
    user: string;
    router: string;
    transactionId: string;
    txData: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      receivingChainTxManagerAddress: string;
      user: string;
      router: string;
      initiator: string;
      sendingAssetId: string;
      receivingAssetId: string;
      sendingChainFallback: string;
      receivingAddress: string;
      callTo: string;
      callDataHash: string;
      transactionId: string;
      sendingChainId: BigNumber;
      receivingChainId: BigNumber;
      amount: BigNumber;
      expiry: BigNumber;
      preparedBlockNumber: BigNumber;
    };
    caller: string;
    args: [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        sendingChainId: BigNumber;
        receivingChainId: BigNumber;
        callDataHash: string;
        transactionId: string;
      },
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      string
    ] & {
      invariantData: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        sendingChainId: BigNumber;
        receivingChainId: BigNumber;
        callDataHash: string;
        transactionId: string;
      };
      amount: BigNumber;
      expiry: BigNumber;
      encryptedCallData: string;
      encodedBid: string;
      bidSignature: string;
      encodedMeta: string;
    };
  }
>;

export class ITransactionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITransactionManagerInterface;

  functions: {
    addAssetId(
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addLiquidityFor(
      amount: BigNumberish,
      assetId: string,
      router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancel(
      args: {
        txData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: BytesLike;
          transactionId: BytesLike;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          amount: BigNumberish;
          expiry: BigNumberish;
          preparedBlockNumber: BigNumberish;
        };
        signature: BytesLike;
        encodedMeta: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfill(
      args: {
        txData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: BytesLike;
          transactionId: BytesLike;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          amount: BigNumberish;
          expiry: BigNumberish;
          preparedBlockNumber: BigNumberish;
        };
        relayerFee: BigNumberish;
        signature: BytesLike;
        callData: BytesLike;
        encodedMeta: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStoredChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    prepare(
      args: {
        invariantData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          callDataHash: BytesLike;
          transactionId: BytesLike;
        };
        amount: BigNumberish;
        expiry: BigNumberish;
        encryptedCallData: BytesLike;
        encodedBid: BytesLike;
        bidSignature: BytesLike;
        encodedMeta: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeAssetId(
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      amount: BigNumberish,
      assetId: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAssetId(
    assetId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidity(
    amount: BigNumberish,
    assetId: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addLiquidityFor(
    amount: BigNumberish,
    assetId: string,
    router: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRouter(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancel(
    args: {
      txData: {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        callDataHash: BytesLike;
        transactionId: BytesLike;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        amount: BigNumberish;
        expiry: BigNumberish;
        preparedBlockNumber: BigNumberish;
      };
      signature: BytesLike;
      encodedMeta: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfill(
    args: {
      txData: {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        callDataHash: BytesLike;
        transactionId: BytesLike;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        amount: BigNumberish;
        expiry: BigNumberish;
        preparedBlockNumber: BigNumberish;
      };
      relayerFee: BigNumberish;
      signature: BytesLike;
      callData: BytesLike;
      encodedMeta: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getStoredChainId(overrides?: CallOverrides): Promise<BigNumber>;

  prepare(
    args: {
      invariantData: {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        sendingChainId: BigNumberish;
        receivingChainId: BigNumberish;
        callDataHash: BytesLike;
        transactionId: BytesLike;
      };
      amount: BigNumberish;
      expiry: BigNumberish;
      encryptedCallData: BytesLike;
      encodedBid: BytesLike;
      bidSignature: BytesLike;
      encodedMeta: BytesLike;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeAssetId(
    assetId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    amount: BigNumberish,
    assetId: string,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRouter(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAssetId(assetId: string, overrides?: CallOverrides): Promise<void>;

    addLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidityFor(
      amount: BigNumberish,
      assetId: string,
      router: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addRouter(router: string, overrides?: CallOverrides): Promise<void>;

    cancel(
      args: {
        txData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: BytesLike;
          transactionId: BytesLike;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          amount: BigNumberish;
          expiry: BigNumberish;
          preparedBlockNumber: BigNumberish;
        };
        signature: BytesLike;
        encodedMeta: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        callDataHash: string;
        transactionId: string;
        sendingChainId: BigNumber;
        receivingChainId: BigNumber;
        amount: BigNumber;
        expiry: BigNumber;
        preparedBlockNumber: BigNumber;
      }
    >;

    fulfill(
      args: {
        txData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: BytesLike;
          transactionId: BytesLike;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          amount: BigNumberish;
          expiry: BigNumberish;
          preparedBlockNumber: BigNumberish;
        };
        relayerFee: BigNumberish;
        signature: BytesLike;
        callData: BytesLike;
        encodedMeta: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        callDataHash: string;
        transactionId: string;
        sendingChainId: BigNumber;
        receivingChainId: BigNumber;
        amount: BigNumber;
        expiry: BigNumber;
        preparedBlockNumber: BigNumber;
      }
    >;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getStoredChainId(overrides?: CallOverrides): Promise<BigNumber>;

    prepare(
      args: {
        invariantData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          callDataHash: BytesLike;
          transactionId: BytesLike;
        };
        amount: BigNumberish;
        expiry: BigNumberish;
        encryptedCallData: BytesLike;
        encodedBid: BytesLike;
        bidSignature: BytesLike;
        encodedMeta: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        receivingChainTxManagerAddress: string;
        user: string;
        router: string;
        initiator: string;
        sendingAssetId: string;
        receivingAssetId: string;
        sendingChainFallback: string;
        receivingAddress: string;
        callTo: string;
        callDataHash: string;
        transactionId: string;
        sendingChainId: BigNumber;
        receivingChainId: BigNumber;
        amount: BigNumber;
        expiry: BigNumber;
        preparedBlockNumber: BigNumber;
      }
    >;

    removeAssetId(assetId: string, overrides?: CallOverrides): Promise<void>;

    removeLiquidity(
      amount: BigNumberish,
      assetId: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRouter(router: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AssetAdded(address,address)"(
      addedAssetId?: string | null,
      caller?: string | null
    ): TypedEventFilter<
      [string, string],
      { addedAssetId: string; caller: string }
    >;

    AssetAdded(
      addedAssetId?: string | null,
      caller?: string | null
    ): TypedEventFilter<
      [string, string],
      { addedAssetId: string; caller: string }
    >;

    "AssetRemoved(address,address)"(
      removedAssetId?: string | null,
      caller?: string | null
    ): TypedEventFilter<
      [string, string],
      { removedAssetId: string; caller: string }
    >;

    AssetRemoved(
      removedAssetId?: string | null,
      caller?: string | null
    ): TypedEventFilter<
      [string, string],
      { removedAssetId: string; caller: string }
    >;

    "LiquidityAdded(address,address,uint256,address)"(
      router?: string | null,
      assetId?: string | null,
      amount?: null,
      caller?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { router: string; assetId: string; amount: BigNumber; caller: string }
    >;

    LiquidityAdded(
      router?: string | null,
      assetId?: string | null,
      amount?: null,
      caller?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { router: string; assetId: string; amount: BigNumber; caller: string }
    >;

    "LiquidityRemoved(address,address,uint256,address)"(
      router?: string | null,
      assetId?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { router: string; assetId: string; amount: BigNumber; recipient: string }
    >;

    LiquidityRemoved(
      router?: string | null,
      assetId?: string | null,
      amount?: null,
      recipient?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { router: string; assetId: string; amount: BigNumber; recipient: string }
    >;

    "RouterAdded(address,address)"(
      addedRouter?: string | null,
      caller?: string | null
    ): TypedEventFilter<
      [string, string],
      { addedRouter: string; caller: string }
    >;

    RouterAdded(
      addedRouter?: string | null,
      caller?: string | null
    ): TypedEventFilter<
      [string, string],
      { addedRouter: string; caller: string }
    >;

    "RouterRemoved(address,address)"(
      removedRouter?: string | null,
      caller?: string | null
    ): TypedEventFilter<
      [string, string],
      { removedRouter: string; caller: string }
    >;

    RouterRemoved(
      removedRouter?: string | null,
      caller?: string | null
    ): TypedEventFilter<
      [string, string],
      { removedRouter: string; caller: string }
    >;

    "TransactionCancelled(address,address,bytes32,tuple,address)"(
      user?: string | null,
      router?: string | null,
      transactionId?: BytesLike | null,
      args?: null,
      caller?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        [
          [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            callDataHash: string;
            transactionId: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            amount: BigNumber;
            expiry: BigNumber;
            preparedBlockNumber: BigNumber;
          },
          string,
          string
        ] & {
          txData: [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            callDataHash: string;
            transactionId: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            amount: BigNumber;
            expiry: BigNumber;
            preparedBlockNumber: BigNumber;
          };
          signature: string;
          encodedMeta: string;
        },
        string
      ],
      {
        user: string;
        router: string;
        transactionId: string;
        args: [
          [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            callDataHash: string;
            transactionId: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            amount: BigNumber;
            expiry: BigNumber;
            preparedBlockNumber: BigNumber;
          },
          string,
          string
        ] & {
          txData: [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            callDataHash: string;
            transactionId: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            amount: BigNumber;
            expiry: BigNumber;
            preparedBlockNumber: BigNumber;
          };
          signature: string;
          encodedMeta: string;
        };
        caller: string;
      }
    >;

    TransactionCancelled(
      user?: string | null,
      router?: string | null,
      transactionId?: BytesLike | null,
      args?: null,
      caller?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        [
          [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            callDataHash: string;
            transactionId: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            amount: BigNumber;
            expiry: BigNumber;
            preparedBlockNumber: BigNumber;
          },
          string,
          string
        ] & {
          txData: [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            callDataHash: string;
            transactionId: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            amount: BigNumber;
            expiry: BigNumber;
            preparedBlockNumber: BigNumber;
          };
          signature: string;
          encodedMeta: string;
        },
        string
      ],
      {
        user: string;
        router: string;
        transactionId: string;
        args: [
          [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            callDataHash: string;
            transactionId: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            amount: BigNumber;
            expiry: BigNumber;
            preparedBlockNumber: BigNumber;
          },
          string,
          string
        ] & {
          txData: [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            callDataHash: string;
            transactionId: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            amount: BigNumber;
            expiry: BigNumber;
            preparedBlockNumber: BigNumber;
          };
          signature: string;
          encodedMeta: string;
        };
        caller: string;
      }
    >;

    "TransactionFulfilled(address,address,bytes32,tuple,bool,bool,bytes,address)"(
      user?: string | null,
      router?: string | null,
      transactionId?: BytesLike | null,
      args?: null,
      success?: null,
      isContract?: null,
      returnData?: null,
      caller?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        [
          [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            callDataHash: string;
            transactionId: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            amount: BigNumber;
            expiry: BigNumber;
            preparedBlockNumber: BigNumber;
          },
          BigNumber,
          string,
          string,
          string
        ] & {
          txData: [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            callDataHash: string;
            transactionId: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            amount: BigNumber;
            expiry: BigNumber;
            preparedBlockNumber: BigNumber;
          };
          relayerFee: BigNumber;
          signature: string;
          callData: string;
          encodedMeta: string;
        },
        boolean,
        boolean,
        string,
        string
      ],
      {
        user: string;
        router: string;
        transactionId: string;
        args: [
          [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            callDataHash: string;
            transactionId: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            amount: BigNumber;
            expiry: BigNumber;
            preparedBlockNumber: BigNumber;
          },
          BigNumber,
          string,
          string,
          string
        ] & {
          txData: [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            callDataHash: string;
            transactionId: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            amount: BigNumber;
            expiry: BigNumber;
            preparedBlockNumber: BigNumber;
          };
          relayerFee: BigNumber;
          signature: string;
          callData: string;
          encodedMeta: string;
        };
        success: boolean;
        isContract: boolean;
        returnData: string;
        caller: string;
      }
    >;

    TransactionFulfilled(
      user?: string | null,
      router?: string | null,
      transactionId?: BytesLike | null,
      args?: null,
      success?: null,
      isContract?: null,
      returnData?: null,
      caller?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        [
          [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            callDataHash: string;
            transactionId: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            amount: BigNumber;
            expiry: BigNumber;
            preparedBlockNumber: BigNumber;
          },
          BigNumber,
          string,
          string,
          string
        ] & {
          txData: [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            callDataHash: string;
            transactionId: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            amount: BigNumber;
            expiry: BigNumber;
            preparedBlockNumber: BigNumber;
          };
          relayerFee: BigNumber;
          signature: string;
          callData: string;
          encodedMeta: string;
        },
        boolean,
        boolean,
        string,
        string
      ],
      {
        user: string;
        router: string;
        transactionId: string;
        args: [
          [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            callDataHash: string;
            transactionId: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            amount: BigNumber;
            expiry: BigNumber;
            preparedBlockNumber: BigNumber;
          },
          BigNumber,
          string,
          string,
          string
        ] & {
          txData: [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            callDataHash: string;
            transactionId: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            amount: BigNumber;
            expiry: BigNumber;
            preparedBlockNumber: BigNumber;
          };
          relayerFee: BigNumber;
          signature: string;
          callData: string;
          encodedMeta: string;
        };
        success: boolean;
        isContract: boolean;
        returnData: string;
        caller: string;
      }
    >;

    "TransactionPrepared(address,address,bytes32,tuple,address,tuple)"(
      user?: string | null,
      router?: string | null,
      transactionId?: BytesLike | null,
      txData?: null,
      caller?: null,
      args?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: string;
          transactionId: string;
          sendingChainId: BigNumber;
          receivingChainId: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          preparedBlockNumber: BigNumber;
        },
        string,
        [
          [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            callDataHash: string;
            transactionId: string;
          },
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string
        ] & {
          invariantData: [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            callDataHash: string;
            transactionId: string;
          };
          amount: BigNumber;
          expiry: BigNumber;
          encryptedCallData: string;
          encodedBid: string;
          bidSignature: string;
          encodedMeta: string;
        }
      ],
      {
        user: string;
        router: string;
        transactionId: string;
        txData: [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: string;
          transactionId: string;
          sendingChainId: BigNumber;
          receivingChainId: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          preparedBlockNumber: BigNumber;
        };
        caller: string;
        args: [
          [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            callDataHash: string;
            transactionId: string;
          },
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string
        ] & {
          invariantData: [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            callDataHash: string;
            transactionId: string;
          };
          amount: BigNumber;
          expiry: BigNumber;
          encryptedCallData: string;
          encodedBid: string;
          bidSignature: string;
          encodedMeta: string;
        };
      }
    >;

    TransactionPrepared(
      user?: string | null,
      router?: string | null,
      transactionId?: BytesLike | null,
      txData?: null,
      caller?: null,
      args?: null
    ): TypedEventFilter<
      [
        string,
        string,
        string,
        [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: string;
          transactionId: string;
          sendingChainId: BigNumber;
          receivingChainId: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          preparedBlockNumber: BigNumber;
        },
        string,
        [
          [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            callDataHash: string;
            transactionId: string;
          },
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string
        ] & {
          invariantData: [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            callDataHash: string;
            transactionId: string;
          };
          amount: BigNumber;
          expiry: BigNumber;
          encryptedCallData: string;
          encodedBid: string;
          bidSignature: string;
          encodedMeta: string;
        }
      ],
      {
        user: string;
        router: string;
        transactionId: string;
        txData: [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: string;
          transactionId: string;
          sendingChainId: BigNumber;
          receivingChainId: BigNumber;
          amount: BigNumber;
          expiry: BigNumber;
          preparedBlockNumber: BigNumber;
        };
        caller: string;
        args: [
          [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            callDataHash: string;
            transactionId: string;
          },
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          string
        ] & {
          invariantData: [
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            string,
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            receivingChainTxManagerAddress: string;
            user: string;
            router: string;
            initiator: string;
            sendingAssetId: string;
            receivingAssetId: string;
            sendingChainFallback: string;
            receivingAddress: string;
            callTo: string;
            sendingChainId: BigNumber;
            receivingChainId: BigNumber;
            callDataHash: string;
            transactionId: string;
          };
          amount: BigNumber;
          expiry: BigNumber;
          encryptedCallData: string;
          encodedBid: string;
          bidSignature: string;
          encodedMeta: string;
        };
      }
    >;
  };

  estimateGas: {
    addAssetId(
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addLiquidityFor(
      amount: BigNumberish,
      assetId: string,
      router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancel(
      args: {
        txData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: BytesLike;
          transactionId: BytesLike;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          amount: BigNumberish;
          expiry: BigNumberish;
          preparedBlockNumber: BigNumberish;
        };
        signature: BytesLike;
        encodedMeta: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfill(
      args: {
        txData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: BytesLike;
          transactionId: BytesLike;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          amount: BigNumberish;
          expiry: BigNumberish;
          preparedBlockNumber: BigNumberish;
        };
        relayerFee: BigNumberish;
        signature: BytesLike;
        callData: BytesLike;
        encodedMeta: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getStoredChainId(overrides?: CallOverrides): Promise<BigNumber>;

    prepare(
      args: {
        invariantData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          callDataHash: BytesLike;
          transactionId: BytesLike;
        };
        amount: BigNumberish;
        expiry: BigNumberish;
        encryptedCallData: BytesLike;
        encodedBid: BytesLike;
        bidSignature: BytesLike;
        encodedMeta: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeAssetId(
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      amount: BigNumberish,
      assetId: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAssetId(
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      amount: BigNumberish,
      assetId: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityFor(
      amount: BigNumberish,
      assetId: string,
      router: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      args: {
        txData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: BytesLike;
          transactionId: BytesLike;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          amount: BigNumberish;
          expiry: BigNumberish;
          preparedBlockNumber: BigNumberish;
        };
        signature: BytesLike;
        encodedMeta: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfill(
      args: {
        txData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          callDataHash: BytesLike;
          transactionId: BytesLike;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          amount: BigNumberish;
          expiry: BigNumberish;
          preparedBlockNumber: BigNumberish;
        };
        relayerFee: BigNumberish;
        signature: BytesLike;
        callData: BytesLike;
        encodedMeta: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStoredChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepare(
      args: {
        invariantData: {
          receivingChainTxManagerAddress: string;
          user: string;
          router: string;
          initiator: string;
          sendingAssetId: string;
          receivingAssetId: string;
          sendingChainFallback: string;
          receivingAddress: string;
          callTo: string;
          sendingChainId: BigNumberish;
          receivingChainId: BigNumberish;
          callDataHash: BytesLike;
          transactionId: BytesLike;
        };
        amount: BigNumberish;
        expiry: BigNumberish;
        encryptedCallData: BytesLike;
        encodedBid: BytesLike;
        bidSignature: BytesLike;
        encodedMeta: BytesLike;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeAssetId(
      assetId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      amount: BigNumberish,
      assetId: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
