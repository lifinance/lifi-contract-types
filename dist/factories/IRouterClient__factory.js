"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IRouterClient__factory = void 0;
var ethers_1 = require("ethers");
var _abi = [
    {
        inputs: [],
        name: "InsufficientFeeTokenAmount",
        type: "error",
    },
    {
        inputs: [],
        name: "InvalidMsgValue",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint64",
                name: "destChainSelector",
                type: "uint64",
            },
        ],
        name: "UnsupportedDestinationChain",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "uint64",
                name: "destinationChainSelector",
                type: "uint64",
            },
            {
                components: [
                    {
                        internalType: "bytes",
                        name: "receiver",
                        type: "bytes",
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes",
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "token",
                                type: "address",
                            },
                            {
                                internalType: "uint256",
                                name: "amount",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct Client.EVMTokenAmount[]",
                        name: "tokenAmounts",
                        type: "tuple[]",
                    },
                    {
                        internalType: "address",
                        name: "feeToken",
                        type: "address",
                    },
                    {
                        internalType: "bytes",
                        name: "extraArgs",
                        type: "bytes",
                    },
                ],
                internalType: "struct Client.EVM2AnyMessage",
                name: "message",
                type: "tuple",
            },
        ],
        name: "ccipSend",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint64",
                name: "destinationChainSelector",
                type: "uint64",
            },
            {
                components: [
                    {
                        internalType: "bytes",
                        name: "receiver",
                        type: "bytes",
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes",
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "token",
                                type: "address",
                            },
                            {
                                internalType: "uint256",
                                name: "amount",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct Client.EVMTokenAmount[]",
                        name: "tokenAmounts",
                        type: "tuple[]",
                    },
                    {
                        internalType: "address",
                        name: "feeToken",
                        type: "address",
                    },
                    {
                        internalType: "bytes",
                        name: "extraArgs",
                        type: "bytes",
                    },
                ],
                internalType: "struct Client.EVM2AnyMessage",
                name: "message",
                type: "tuple",
            },
        ],
        name: "getFee",
        outputs: [
            {
                internalType: "uint256",
                name: "fee",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint64",
                name: "chainSelector",
                type: "uint64",
            },
        ],
        name: "getSupportedTokens",
        outputs: [
            {
                internalType: "address[]",
                name: "tokens",
                type: "address[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint64",
                name: "chainSelector",
                type: "uint64",
            },
        ],
        name: "isChainSupported",
        outputs: [
            {
                internalType: "bool",
                name: "supported",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
var IRouterClient__factory = /** @class */ (function () {
    function IRouterClient__factory() {
    }
    IRouterClient__factory.createInterface = function () {
        return new ethers_1.utils.Interface(_abi);
    };
    IRouterClient__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    IRouterClient__factory.abi = _abi;
    return IRouterClient__factory;
}());
exports.IRouterClient__factory = IRouterClient__factory;
