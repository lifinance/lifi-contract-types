"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalldataVerificationFacet__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var ethers_1 = require("ethers");
var _abi = [
    {
        type: "function",
        name: "extractBridgeData",
        inputs: [
            {
                name: "data",
                type: "bytes",
                internalType: "bytes",
            },
        ],
        outputs: [
            {
                name: "bridgeData",
                type: "tuple",
                internalType: "struct ILiFi.BridgeData",
                components: [
                    {
                        name: "transactionId",
                        type: "bytes32",
                        internalType: "bytes32",
                    },
                    {
                        name: "bridge",
                        type: "string",
                        internalType: "string",
                    },
                    {
                        name: "integrator",
                        type: "string",
                        internalType: "string",
                    },
                    {
                        name: "referrer",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "sendingAssetId",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "receiver",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "minAmount",
                        type: "uint256",
                        internalType: "uint256",
                    },
                    {
                        name: "destinationChainId",
                        type: "uint256",
                        internalType: "uint256",
                    },
                    {
                        name: "hasSourceSwaps",
                        type: "bool",
                        internalType: "bool",
                    },
                    {
                        name: "hasDestinationCall",
                        type: "bool",
                        internalType: "bool",
                    },
                ],
            },
        ],
        stateMutability: "pure",
    },
    {
        type: "function",
        name: "extractData",
        inputs: [
            {
                name: "data",
                type: "bytes",
                internalType: "bytes",
            },
        ],
        outputs: [
            {
                name: "bridgeData",
                type: "tuple",
                internalType: "struct ILiFi.BridgeData",
                components: [
                    {
                        name: "transactionId",
                        type: "bytes32",
                        internalType: "bytes32",
                    },
                    {
                        name: "bridge",
                        type: "string",
                        internalType: "string",
                    },
                    {
                        name: "integrator",
                        type: "string",
                        internalType: "string",
                    },
                    {
                        name: "referrer",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "sendingAssetId",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "receiver",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "minAmount",
                        type: "uint256",
                        internalType: "uint256",
                    },
                    {
                        name: "destinationChainId",
                        type: "uint256",
                        internalType: "uint256",
                    },
                    {
                        name: "hasSourceSwaps",
                        type: "bool",
                        internalType: "bool",
                    },
                    {
                        name: "hasDestinationCall",
                        type: "bool",
                        internalType: "bool",
                    },
                ],
            },
            {
                name: "swapData",
                type: "tuple[]",
                internalType: "struct LibSwap.SwapData[]",
                components: [
                    {
                        name: "callTo",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "approveTo",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "sendingAssetId",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "receivingAssetId",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "fromAmount",
                        type: "uint256",
                        internalType: "uint256",
                    },
                    {
                        name: "callData",
                        type: "bytes",
                        internalType: "bytes",
                    },
                    {
                        name: "requiresDeposit",
                        type: "bool",
                        internalType: "bool",
                    },
                ],
            },
        ],
        stateMutability: "pure",
    },
    {
        type: "function",
        name: "extractGenericSwapParameters",
        inputs: [
            {
                name: "data",
                type: "bytes",
                internalType: "bytes",
            },
        ],
        outputs: [
            {
                name: "sendingAssetId",
                type: "address",
                internalType: "address",
            },
            {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
            },
            {
                name: "receiver",
                type: "address",
                internalType: "address",
            },
            {
                name: "receivingAssetId",
                type: "address",
                internalType: "address",
            },
            {
                name: "receivingAmount",
                type: "uint256",
                internalType: "uint256",
            },
        ],
        stateMutability: "pure",
    },
    {
        type: "function",
        name: "extractMainParameters",
        inputs: [
            {
                name: "data",
                type: "bytes",
                internalType: "bytes",
            },
        ],
        outputs: [
            {
                name: "bridge",
                type: "string",
                internalType: "string",
            },
            {
                name: "sendingAssetId",
                type: "address",
                internalType: "address",
            },
            {
                name: "receiver",
                type: "address",
                internalType: "address",
            },
            {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
            },
            {
                name: "destinationChainId",
                type: "uint256",
                internalType: "uint256",
            },
            {
                name: "hasSourceSwaps",
                type: "bool",
                internalType: "bool",
            },
            {
                name: "hasDestinationCall",
                type: "bool",
                internalType: "bool",
            },
        ],
        stateMutability: "pure",
    },
    {
        type: "function",
        name: "extractSwapData",
        inputs: [
            {
                name: "data",
                type: "bytes",
                internalType: "bytes",
            },
        ],
        outputs: [
            {
                name: "swapData",
                type: "tuple[]",
                internalType: "struct LibSwap.SwapData[]",
                components: [
                    {
                        name: "callTo",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "approveTo",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "sendingAssetId",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "receivingAssetId",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "fromAmount",
                        type: "uint256",
                        internalType: "uint256",
                    },
                    {
                        name: "callData",
                        type: "bytes",
                        internalType: "bytes",
                    },
                    {
                        name: "requiresDeposit",
                        type: "bool",
                        internalType: "bool",
                    },
                ],
            },
        ],
        stateMutability: "pure",
    },
    {
        type: "function",
        name: "validateCalldata",
        inputs: [
            {
                name: "data",
                type: "bytes",
                internalType: "bytes",
            },
            {
                name: "bridge",
                type: "string",
                internalType: "string",
            },
            {
                name: "sendingAssetId",
                type: "address",
                internalType: "address",
            },
            {
                name: "receiver",
                type: "address",
                internalType: "address",
            },
            {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
            },
            {
                name: "destinationChainId",
                type: "uint256",
                internalType: "uint256",
            },
            {
                name: "hasSourceSwaps",
                type: "bool",
                internalType: "bool",
            },
            {
                name: "hasDestinationCall",
                type: "bool",
                internalType: "bool",
            },
        ],
        outputs: [
            {
                name: "isValid",
                type: "bool",
                internalType: "bool",
            },
        ],
        stateMutability: "pure",
    },
    {
        type: "function",
        name: "validateDestinationCalldata",
        inputs: [
            {
                name: "data",
                type: "bytes",
                internalType: "bytes",
            },
            {
                name: "callTo",
                type: "bytes",
                internalType: "bytes",
            },
            {
                name: "dstCalldata",
                type: "bytes",
                internalType: "bytes",
            },
        ],
        outputs: [
            {
                name: "isValid",
                type: "bool",
                internalType: "bool",
            },
        ],
        stateMutability: "pure",
    },
    {
        type: "error",
        name: "IllegalOffset",
        inputs: [],
    },
    {
        type: "error",
        name: "SliceOutOfBounds",
        inputs: [],
    },
    {
        type: "error",
        name: "SliceOverflow",
        inputs: [],
    },
];
var _bytecode = "0x608060405234801561001057600080fd5b506124d0806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c318eeda1161005b578063c318eeda146100ec578063d53482cf14610147578063ee0aa3201461016a578063f58ae2ce1461019057600080fd5b8063070e81f114610082578063103c5200146100ab5780637f99d7af146100cc575b600080fd5b6100956100903660046110e2565b6101a3565b6040516100a2919061127f565b60405180910390f35b6100be6100b93660046110e2565b6101b6565b6040516100a2929190611387565b6100df6100da3660046110e2565b610231565b6040516100a291906113b5565b6100ff6100fa3660046110e2565b61028d565b6040805173ffffffffffffffffffffffffffffffffffffffff96871681526020810195909552928516928401929092529092166060820152608081019190915260a0016100a2565b61015a610155366004611416565b610405565b60405190151581526020016100a2565b61017d6101783660046110e2565b610696565b6040516100a297969594939291906114e5565b61015a61019e366004611543565b610751565b60606101af8383610c5c565b9392505050565b604080516101408101825260008082526060602083018190529282018390528282018190526080820181905260a0820181905260c0820181905260e082018190526101008201819052610120820152906102108484610d2e565b91508161010001511561022a576102278484610c5c565b90505b9250929050565b604080516101408101825260008082526060602083018190529282018390529181018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101919091526101af8383610d2e565b60008060008060006060600088888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509394507fd6a4bc50000000000000000000000000000000000000000000000000000000009361030293506004925090508b8d6115dd565b61030b91611607565b7fffffffff00000000000000000000000000000000000000000000000000000000160361034f5761033f886004818c6115dd565b81019061034c91906117fd565b90505b61036960048083516103619190611869565b839190610efe565b80602001905181019061037c9190611a42565b8051929a509097509550859350600092501515905061039d5761039d611af0565b6020026020010151604001519650816000815181106103be576103be611af0565b602002602001015160800151955081600183516103db9190611869565b815181106103eb576103eb611af0565b602002602001015160600151935050509295509295909350565b604080516101408101825260008082526060602083018190529282018390529181018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526104608c8c610696565b1515610120880152151561010087015260e086015260c085015273ffffffffffffffffffffffffffffffffffffffff90811660a0850152166080830152602080830191909152604080516000815291820180825282519020916104c7918d918d9101611b1f565b60405160208183030381529060405280519060200120148061053a575089896040516020016104f7929190611b1f565b6040516020818303038152906040528051906020012081602001516040516020016105229190611b2f565b60405160208183030381529060405280519060200120145b8015610594575073ffffffffffffffffffffffffffffffffffffffff808916148061059457508773ffffffffffffffffffffffffffffffffffffffff16816080015173ffffffffffffffffffffffffffffffffffffffff16145b80156105ee575073ffffffffffffffffffffffffffffffffffffffff80881614806105ee57508673ffffffffffffffffffffffffffffffffffffffff168160a0015173ffffffffffffffffffffffffffffffffffffffff16145b801561062657507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8614806106265750858160c00151145b801561065e57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85148061065e5750848160e00151145b801561067257508315158161010001511515145b801561068657508215158161012001511515145b9c9b505050505050505050505050565b606060008060008060008060006106ad8a8a610d2e565b9050806101000151156107105760006106c68b8b610c5c565b9050806000815181106106db576106db611af0565b6020026020010151604001519750806000815181106106fc576106fc611af0565b60200260200101516080015195505061071f565b806080015196508060c0015194505b602081015160a082015160e083015161010084015161012090940151929d999c50909a50959850949690955092505050565b60008087878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509394507fd6a4bc5000000000000000000000000000000000000000000000000000000000936107bd93506004925090508a8c6115dd565b6107c691611607565b7fffffffff00000000000000000000000000000000000000000000000000000000160361080a576107fa876004818b6115dd565b81019061080791906117fd565b90505b6000818060200190518101906108209190611b4b565b90507f72366cd3000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610912576000610887600480855161087f9190611869565b859190610efe565b80602001905181019061089a9190611d26565b91505080600001518051906020012086866040516108b9929190611b1f565b60405180910390201480156109085750602081015173ffffffffffffffffffffffffffffffffffffffff166108f0888a018a611d8a565b73ffffffffffffffffffffffffffffffffffffffff16145b9350505050610c52565b7f7c0ce6e9000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016109a257600061096f600480855161087f9190611869565b8060200190518101906109829190611da7565b9250505080600001518051906020012086866040516108b9929190611b1f565b7f41e15319000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610a705760006109ff600480855161087f9190611869565b806020019051810190610a129190611ee2565b9150508060e00151805190602001208686604051610a31929190611b1f565b604051809103902014801561090857508060c00151805190602001208888604051610a5d929190611b1f565b6040518091039020149350505050610c52565b7f12e879e7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610b00576000610acd600480855161087f9190611869565b806020019051810190610ae09190611f3c565b925050508060e00151805190602001208686604051610a31929190611b1f565b7ffaf6a213000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610bbb576000610b5d600480855161087f9190611869565b806020019051810190610b70919061208d565b9150508060600151805190602001208686604051610b8f929190611b1f565b604051809103902014801561090857508060400151805190602001208888604051610a5d929190611b1f565b7f4f93ad26000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610c4b576000610c18600480855161087f9190611869565b806020019051810190610c2b91906120e7565b925050508060600151805190602001208686604051610b8f929190611b1f565b6000925050505b9695505050505050565b60607fd6a4bc5000000000000000000000000000000000000000000000000000000000610c8d6004600085876115dd565b610c9691611607565b7fffffffff000000000000000000000000000000000000000000000000000000001603610d0a576000610ccc83600481876115dd565b810190610cd991906117fd565b9050610ced60048083516103619190611869565b806020019051810190610d009190612165565b9250610d28915050565b610d1782600481866115dd565b810190610d24919061229a565b9150505b92915050565b604080516101408101825260008082526060602083018190529282018390529181018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101919091527fd6a4bc5000000000000000000000000000000000000000000000000000000000610daf6004600085876115dd565b610db891611607565b7fffffffff000000000000000000000000000000000000000000000000000000001603610e6c576000610dee83600481876115dd565b810190610dfb91906117fd565b9050610e0f60048083516103619190611869565b9050610e1a81611018565b610e50576040517f8b18c65500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80806020019051810190610e64919061241d565b915050610d28565b610e7982600481866115dd565b92509250610ebc83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061101892505050565b610ef2576040517f8b18c65500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101af82840184612452565b606081610f0c81601f612487565b1015610f44576040517f47aaf07a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f4e8284612487565b84511015610f88576040517f3b99b53d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606082158015610fa7576040519150600082526020820160405261100f565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610fe0578051835260209283019201610fc8565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b60008061102783826020610efe565b604080516020818101529192500160405160208183030381529060405280519060200120818051906020012014158015611089575060408051602081018290520160405160208183030381529060405280519060200120818051906020012014155b156110975750600092915050565b50600192915050565b60008083601f8401126110b257600080fd5b50813567ffffffffffffffff8111156110ca57600080fd5b60208301915083602082850101111561022a57600080fd5b600080602083850312156110f557600080fd5b823567ffffffffffffffff81111561110c57600080fd5b611118858286016110a0565b90969095509350505050565b60005b8381101561113f578181015183820152602001611127565b50506000910152565b60008151808452611160816020860160208601611124565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b84811015611272577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08684030189528151805173ffffffffffffffffffffffffffffffffffffffff908116855285820151811686860152604080830151821690860152606080830151909116908501526080808201519085015260a08082015160e0828701819052919061124583880182611148565b9250505060c080830151925061125e8187018415159052565b5099850199935050908301906001016111af565b5090979650505050505050565b6020815260006101af6020830184611192565b60006101408251845260208301518160208601526112b282860182611148565b915050604083015184820360408601526112cc8282611148565b91505060608301516112f6606086018273ffffffffffffffffffffffffffffffffffffffff169052565b50608083015161131e608086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060a083015161134660a086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160c085015260e083015160e08501526101008084015161136f8287018215159052565b50506101209283015115159390920192909252919050565b60408152600061139a6040830185611292565b82810360208401526113ac8185611192565b95945050505050565b6020815260006101af6020830184611292565b73ffffffffffffffffffffffffffffffffffffffff811681146113ea57600080fd5b50565b80356113f8816113c8565b919050565b80151581146113ea57600080fd5b80356113f8816113fd565b6000806000806000806000806000806101008b8d03121561143657600080fd5b8a3567ffffffffffffffff8082111561144e57600080fd5b61145a8e838f016110a0565b909c509a5060208d013591508082111561147357600080fd5b506114808d828e016110a0565b90995097505060408b0135611494816113c8565b955060608b01356114a4816113c8565b945060808b0135935060a08b0135925060c08b01356114c2816113fd565b915060e08b01356114d2816113fd565b809150509295989b9194979a5092959850565b60e0815260006114f860e083018a611148565b73ffffffffffffffffffffffffffffffffffffffff988916602084015296909716604082015260608101949094526080840192909252151560a0830152151560c09091015292915050565b6000806000806000806060878903121561155c57600080fd5b863567ffffffffffffffff8082111561157457600080fd5b6115808a838b016110a0565b9098509650602089013591508082111561159957600080fd5b6115a58a838b016110a0565b909650945060408901359150808211156115be57600080fd5b506115cb89828a016110a0565b979a9699509497509295939492505050565b600080858511156115ed57600080fd5b838611156115fa57600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156116475780818660040360031b1b83161692505b505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160e0810167ffffffffffffffff811182821017156116a1576116a161164f565b60405290565b604051610140810167ffffffffffffffff811182821017156116a1576116a161164f565b604051610100810167ffffffffffffffff811182821017156116a1576116a161164f565b60405160c0810167ffffffffffffffff811182821017156116a1576116a161164f565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156117595761175961164f565b604052919050565b600067ffffffffffffffff82111561177b5761177b61164f565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126117b857600080fd5b81356117cb6117c682611761565b611712565b8181528460208386010111156117e057600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561180f57600080fd5b813567ffffffffffffffff81111561182657600080fd5b611832848285016117a7565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115610d2857610d2861183a565b600082601f83011261188d57600080fd5b815161189b6117c682611761565b8181528460208386010111156118b057600080fd5b611832826020830160208701611124565b80516113f8816113c8565b600067ffffffffffffffff8211156118e6576118e661164f565b5060051b60200190565b80516113f8816113fd565b600082601f83011261190c57600080fd5b8151602061191c6117c6836118cc565b82815260059290921b8401810191818101908684111561193b57600080fd5b8286015b84811015611a3757805167ffffffffffffffff808211156119605760008081fd5b818901915060e0807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d030112156119995760008081fd5b6119a161167e565b6119ac8885016118c1565b815260406119bb8186016118c1565b8983015260606119cc8187016118c1565b82840152608091506119df8287016118c1565b818401525060a0808601518284015260c091508186015185811115611a045760008081fd5b611a128f8c838a010161187c565b828501525050611a238386016118f0565b90820152865250505091830191830161193f565b509695505050505050565b60008060008060008060c08789031215611a5b57600080fd5b86519550602087015167ffffffffffffffff80821115611a7a57600080fd5b611a868a838b0161187c565b96506040890151915080821115611a9c57600080fd5b611aa88a838b0161187c565b955060608901519150611aba826113c8565b608089015160a08a0151929550935080821115611ad657600080fd5b50611ae389828a016118fb565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8183823760009101908152919050565b60008251611b41818460208701611124565b9190910192915050565b600060208284031215611b5d57600080fd5b81517fffffffff00000000000000000000000000000000000000000000000000000000811681146101af57600080fd5b60006101408284031215611ba057600080fd5b611ba86116a7565b905081518152602082015167ffffffffffffffff80821115611bc957600080fd5b611bd58583860161187c565b60208401526040840151915080821115611bee57600080fd5b50611bfb8482850161187c565b604083015250611c0d606083016118c1565b6060820152611c1e608083016118c1565b6080820152611c2f60a083016118c1565b60a082015260c082015160c082015260e082015160e0820152610100611c568184016118f0565b90820152610120611c688382016118f0565b9082015292915050565b805163ffffffff811681146113f857600080fd5b600060e08284031215611c9857600080fd5b611ca061167e565b9050815167ffffffffffffffff811115611cb957600080fd5b611cc58482850161187c565b825250611cd4602083016118c1565b60208201526040820151604082015260608201516060820152611cf9608083016118c1565b6080820152611d0a60a08301611c72565b60a0820152611d1b60c083016118f0565b60c082015292915050565b60008060408385031215611d3957600080fd5b825167ffffffffffffffff80821115611d5157600080fd5b611d5d86838701611b8d565b93506020850151915080821115611d7357600080fd5b50611d8085828601611c86565b9150509250929050565b600060208284031215611d9c57600080fd5b81356101af816113c8565b600080600060608486031215611dbc57600080fd5b835167ffffffffffffffff80821115611dd457600080fd5b611de087838801611b8d565b94506020860151915080821115611df657600080fd5b611e02878388016118fb565b93506040860151915080821115611e1857600080fd5b50611e2586828701611c86565b9150509250925092565b60006101008284031215611e4257600080fd5b611e4a6116cb565b90508151815260208201516020820152604082015160408201526060820151606082015260808201516080820152611e8460a083016118c1565b60a082015260c082015167ffffffffffffffff80821115611ea457600080fd5b611eb08583860161187c565b60c084015260e0840151915080821115611ec957600080fd5b50611ed68482850161187c565b60e08301525092915050565b60008060408385031215611ef557600080fd5b825167ffffffffffffffff80821115611f0d57600080fd5b611f1986838701611b8d565b93506020850151915080821115611f2f57600080fd5b50611d8085828601611e2f565b600080600060608486031215611f5157600080fd5b835167ffffffffffffffff80821115611f6957600080fd5b611f7587838801611b8d565b94506020860151915080821115611f8b57600080fd5b611f97878388016118fb565b93506040860151915080821115611fad57600080fd5b50611e2586828701611e2f565b805167ffffffffffffffff811681146113f857600080fd5b8051600781106113f857600080fd5b600060c08284031215611ff357600080fd5b611ffb6116ef565b905061200682611c72565b815261201460208301611fba565b6020820152604082015167ffffffffffffffff8082111561203457600080fd5b6120408583860161187c565b6040840152606084015191508082111561205957600080fd5b506120668482850161187c565b6060830152506080820151608082015261208260a08301611fd2565b60a082015292915050565b600080604083850312156120a057600080fd5b825167ffffffffffffffff808211156120b857600080fd5b6120c486838701611b8d565b935060208501519150808211156120da57600080fd5b50611d8085828601611fe1565b6000806000606084860312156120fc57600080fd5b835167ffffffffffffffff8082111561211457600080fd5b61212087838801611b8d565b9450602086015191508082111561213657600080fd5b612142878388016118fb565b9350604086015191508082111561215857600080fd5b50611e2586828701611fe1565b6000806040838503121561217857600080fd5b825167ffffffffffffffff8082111561219057600080fd5b61219c86838701611b8d565b935060208501519150808211156121b257600080fd5b50611d80858286016118fb565b600061014082840312156121d257600080fd5b6121da6116a7565b905081358152602082013567ffffffffffffffff808211156121fb57600080fd5b612207858386016117a7565b6020840152604084013591508082111561222057600080fd5b5061222d848285016117a7565b60408301525061223f606083016113ed565b6060820152612250608083016113ed565b608082015261226160a083016113ed565b60a082015260c082013560c082015260e082013560e082015261010061228881840161140b565b90820152610120611c6883820161140b565b600080604083850312156122ad57600080fd5b823567ffffffffffffffff808211156122c557600080fd5b6122d1868387016121bf565b93506020915081850135818111156122e857600080fd5b8501601f810187136122f957600080fd5b80356123076117c6826118cc565b81815260059190911b8201840190848101908983111561232657600080fd5b8584015b8381101561240c5780358681111561234157600080fd5b850160e0818d037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001121561237557600080fd5b61237d61167e565b6123888983016113ed565b8152612396604083016113ed565b898201526123a6606083016113ed565b60408201526123b7608083016113ed565b606082015260a0820135608082015260c080830135898111156123da5760008081fd5b6123e88f8c838701016117a7565b60a0840152506123fa60e0840161140b565b9082015284525091860191860161232a565b508096505050505050509250929050565b60006020828403121561242f57600080fd5b815167ffffffffffffffff81111561244657600080fd5b61183284828501611b8d565b60006020828403121561246457600080fd5b813567ffffffffffffffff81111561247b57600080fd5b611832848285016121bf565b80820180821115610d2857610d2861183a56fea2646970667358221220e4fcce58d92240be5e68ca96f207a4e9ed2d83cc822f21af1a9aedbb35538f1664736f6c63430008110033";
var isSuperArgs = function (xs) { return xs.length > 1; };
var CalldataVerificationFacet__factory = /** @class */ (function (_super) {
    __extends(CalldataVerificationFacet__factory, _super);
    function CalldataVerificationFacet__factory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = this;
        if (isSuperArgs(args)) {
            _this = _super.apply(this, args) || this;
        }
        else {
            _this = _super.call(this, _abi, _bytecode, args[0]) || this;
        }
        return _this;
    }
    CalldataVerificationFacet__factory.prototype.deploy = function (overrides) {
        return _super.prototype.deploy.call(this, overrides || {});
    };
    CalldataVerificationFacet__factory.prototype.getDeployTransaction = function (overrides) {
        return _super.prototype.getDeployTransaction.call(this, overrides || {});
    };
    CalldataVerificationFacet__factory.prototype.attach = function (address) {
        return _super.prototype.attach.call(this, address);
    };
    CalldataVerificationFacet__factory.prototype.connect = function (signer) {
        return _super.prototype.connect.call(this, signer);
    };
    CalldataVerificationFacet__factory.createInterface = function () {
        return new ethers_1.utils.Interface(_abi);
    };
    CalldataVerificationFacet__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    CalldataVerificationFacet__factory.bytecode = _bytecode;
    CalldataVerificationFacet__factory.abi = _abi;
    return CalldataVerificationFacet__factory;
}(ethers_1.ContractFactory));
exports.CalldataVerificationFacet__factory = CalldataVerificationFacet__factory;
