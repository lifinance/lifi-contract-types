"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IAllBridge__factory = void 0;
var ethers_1 = require("ethers");
var _abi = [
    {
        inputs: [
            {
                internalType: "uint256",
                name: "destinationChainId",
                type: "uint256",
            },
            {
                internalType: "enum IAllBridge.MessengerProtocol",
                name: "messenger",
                type: "uint8",
            },
            {
                internalType: "address",
                name: "tokenAddress",
                type: "address",
            },
        ],
        name: "getBridgingCostInTokens",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "chainId",
                type: "uint256",
            },
            {
                internalType: "enum IAllBridge.MessengerProtocol",
                name: "protocol",
                type: "uint8",
            },
        ],
        name: "getMessageCost",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "chainId",
                type: "uint256",
            },
        ],
        name: "getTransactionCost",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "addr",
                type: "bytes32",
            },
        ],
        name: "pools",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "token",
                type: "bytes32",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
            {
                internalType: "bytes32",
                name: "recipient",
                type: "bytes32",
            },
            {
                internalType: "uint256",
                name: "destinationChainId",
                type: "uint256",
            },
            {
                internalType: "bytes32",
                name: "receiveToken",
                type: "bytes32",
            },
            {
                internalType: "uint256",
                name: "nonce",
                type: "uint256",
            },
            {
                internalType: "enum IAllBridge.MessengerProtocol",
                name: "messenger",
                type: "uint8",
            },
            {
                internalType: "uint256",
                name: "feeTokenAmount",
                type: "uint256",
            },
        ],
        name: "swapAndBridge",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
];
var IAllBridge__factory = /** @class */ (function () {
    function IAllBridge__factory() {
    }
    IAllBridge__factory.createInterface = function () {
        return new ethers_1.utils.Interface(_abi);
    };
    IAllBridge__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    IAllBridge__factory.abi = _abi;
    return IAllBridge__factory;
}());
exports.IAllBridge__factory = IAllBridge__factory;
