import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { CalldataVerificationFacet, CalldataVerificationFacetInterface } from "../CalldataVerificationFacet";
declare type CalldataVerificationFacetConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class CalldataVerificationFacet__factory extends ContractFactory {
    constructor(...args: CalldataVerificationFacetConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<CalldataVerificationFacet>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): CalldataVerificationFacet;
    connect(signer: Signer): CalldataVerificationFacet__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5061215e806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c318eeda1161005b578063c318eeda146100ec578063d53482cf14610147578063ee0aa3201461016a578063f58ae2ce1461019057600080fd5b8063070e81f114610082578063103c5200146100ab5780637f99d7af146100cc575b600080fd5b610095610090366004610db7565b6101a3565b6040516100a29190610f54565b60405180910390f35b6100be6100b9366004610db7565b6101b6565b6040516100a292919061105c565b6100df6100da366004610db7565b610231565b6040516100a2919061108a565b6100ff6100fa366004610db7565b61028d565b6040805173ffffffffffffffffffffffffffffffffffffffff96871681526020810195909552928516928401929092529092166060820152608081019190915260a0016100a2565b61015a6101553660046110eb565b610337565b60405190151581526020016100a2565b61017d610178366004610db7565b6105c8565b6040516100a297969594939291906111ba565b61015a61019e366004611218565b610683565b60606101af8383610a81565b9392505050565b604080516101408101825260008082526060602083018190529282018390528282018190526080820181905260a0820181905260c0820181905260e082018190526101008201819052610120820152906102108484610b50565b91508161010001511561022a576102278484610a81565b90505b9250929050565b604080516101408101825260008082526060602083018190529282018390529181018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101919091526101af8383610b50565b60008080808060606102a2876004818b6112b2565b8101906102af91906115f5565b8051929950909650945084935060009250151590506102d0576102d06116a4565b6020026020010151604001519550806000815181106102f1576102f16116a4565b6020026020010151608001519450806001825161030e9190611702565b8151811061031e5761031e6116a4565b6020026020010151606001519250509295509295909350565b604080516101408101825260008082526060602083018190529282018390529181018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526103928c8c6105c8565b1515610120880152151561010087015260e086015260c085015273ffffffffffffffffffffffffffffffffffffffff90811660a0850152166080830152602080830191909152604080516000815291820180825282519020916103f9918d918d9101611715565b60405160208183030381529060405280519060200120148061046c57508989604051602001610429929190611715565b6040516020818303038152906040528051906020012081602001516040516020016104549190611725565b60405160208183030381529060405280519060200120145b80156104c6575073ffffffffffffffffffffffffffffffffffffffff80891614806104c657508773ffffffffffffffffffffffffffffffffffffffff16816080015173ffffffffffffffffffffffffffffffffffffffff16145b8015610520575073ffffffffffffffffffffffffffffffffffffffff808816148061052057508673ffffffffffffffffffffffffffffffffffffffff168160a0015173ffffffffffffffffffffffffffffffffffffffff16145b801561055857507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8614806105585750858160c00151145b801561059057507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8514806105905750848160e00151145b80156105a457508315158161010001511515145b80156105b857508215158161012001511515145b9c9b505050505050505050505050565b606060008060008060008060006105df8a8a610b50565b9050806101000151156106425760006105f88b8b610a81565b90508060008151811061060d5761060d6116a4565b60200260200101516040015197508060008151811061062e5761062e6116a4565b602002602001015160800151955050610651565b806080015196508060c0015194505b602081015160a082015160e083015161010084015161012090940151929d999c50909a50959850949690955092505050565b60008061069287890189611741565b90507f72366cd3000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016107705760006106ec886004818c6112b2565b8101906106f9919061191c565b9150508060000151805190602001208585604051610718929190611715565b60405180910390201480156107675750602081015173ffffffffffffffffffffffffffffffffffffffff1661074f87890189611980565b73ffffffffffffffffffffffffffffffffffffffff16145b92505050610a77565b7f7c0ce6e9000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016107f55760006107c8886004818c6112b2565b8101906107d5919061199d565b925050508060000151805190602001208585604051610718929190611715565b7f41e15319000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016108b757600061084d886004818c6112b2565b81019061085a9190611ad8565b9150508060e00151805190602001208585604051610879929190611715565b604051809103902014801561076757508060c001518051906020012087876040516108a5929190611715565b60405180910390201492505050610a77565b7f12e879e7000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000082160161093c57600061090f886004818c6112b2565b81019061091c9190611b32565b925050508060e00151805190602001208585604051610879929190611715565b7ffaf6a213000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016109ec576000610994886004818c6112b2565b8101906109a19190611c83565b91505080606001518051906020012085856040516109c0929190611715565b6040518091039020148015610767575080604001518051906020012087876040516108a5929190611715565b7f4f93ad26000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610a71576000610a44886004818c6112b2565b810190610a519190611cdd565b9250505080606001518051906020012085856040516109c0929190611715565b60009150505b9695505050505050565b60607fd6a4bc5000000000000000000000000000000000000000000000000000000000610ab083850185611741565b7fffffffff000000000000000000000000000000000000000000000000000000001603610b2c576000610ae683600481876112b2565b810190610af39190611d5b565b9050610b0f6004808351610b079190611702565b839190610c5b565b806020019051810190610b229190611ece565b9250610b4a915050565b610b3982600481866112b2565b810190610b469190612051565b9150505b92915050565b604080516101408101825260008082526060602083018190529282018390529181018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101919091527fd6a4bc5000000000000000000000000000000000000000000000000000000000610bcf83850185611741565b7fffffffff000000000000000000000000000000000000000000000000000000001603610c41576000610c0583600481876112b2565b810190610c129190611d5b565b9050610c266004808351610b079190611702565b806020019051810190610c3991906120ab565b915050610b4a565b610c4e82600481866112b2565b8101906101af91906120e0565b606081610c6981601f612115565b1015610ca1576040517f47aaf07a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610cab8284612115565b84511015610ce5576040517f3b99b53d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606082158015610d045760405191506000825260208201604052610d6c565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610d3d578051835260209283019201610d25565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b60008083601f840112610d8757600080fd5b50813567ffffffffffffffff811115610d9f57600080fd5b60208301915083602082850101111561022a57600080fd5b60008060208385031215610dca57600080fd5b823567ffffffffffffffff811115610de157600080fd5b610ded85828601610d75565b90969095509350505050565b60005b83811015610e14578181015183820152602001610dfc565b50506000910152565b60008151808452610e35816020860160208601610df9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b84811015610f47577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08684030189528151805173ffffffffffffffffffffffffffffffffffffffff908116855285820151811686860152604080830151821690860152606080830151909116908501526080808201519085015260a08082015160e08287018190529190610f1a83880182610e1d565b9250505060c0808301519250610f338187018415159052565b509985019993505090830190600101610e84565b5090979650505050505050565b6020815260006101af6020830184610e67565b6000610140825184526020830151816020860152610f8782860182610e1d565b91505060408301518482036040860152610fa18282610e1d565b9150506060830151610fcb606086018273ffffffffffffffffffffffffffffffffffffffff169052565b506080830151610ff3608086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060a083015161101b60a086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160c085015260e083015160e0850152610100808401516110448287018215159052565b50506101209283015115159390920192909252919050565b60408152600061106f6040830185610f67565b82810360208401526110818185610e67565b95945050505050565b6020815260006101af6020830184610f67565b73ffffffffffffffffffffffffffffffffffffffff811681146110bf57600080fd5b50565b80356110cd8161109d565b919050565b80151581146110bf57600080fd5b80356110cd816110d2565b6000806000806000806000806000806101008b8d03121561110b57600080fd5b8a3567ffffffffffffffff8082111561112357600080fd5b61112f8e838f01610d75565b909c509a5060208d013591508082111561114857600080fd5b506111558d828e01610d75565b90995097505060408b01356111698161109d565b955060608b01356111798161109d565b945060808b0135935060a08b0135925060c08b0135611197816110d2565b915060e08b01356111a7816110d2565b809150509295989b9194979a5092959850565b60e0815260006111cd60e083018a610e1d565b73ffffffffffffffffffffffffffffffffffffffff988916602084015296909716604082015260608101949094526080840192909252151560a0830152151560c09091015292915050565b6000806000806000806060878903121561123157600080fd5b863567ffffffffffffffff8082111561124957600080fd5b6112558a838b01610d75565b9098509650602089013591508082111561126e57600080fd5b61127a8a838b01610d75565b9096509450604089013591508082111561129357600080fd5b506112a089828a01610d75565b979a9699509497509295939492505050565b600080858511156112c257600080fd5b838611156112cf57600080fd5b5050820193919092039150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561132e5761132e6112dc565b60405290565b604051610140810167ffffffffffffffff8111828210171561132e5761132e6112dc565b604051610100810167ffffffffffffffff8111828210171561132e5761132e6112dc565b60405160c0810167ffffffffffffffff8111828210171561132e5761132e6112dc565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156113e6576113e66112dc565b604052919050565b600067ffffffffffffffff821115611408576114086112dc565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261144557600080fd5b8135611458611453826113ee565b61139f565b81815284602083860101111561146d57600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff8211156114a4576114a46112dc565b5060051b60200190565b600082601f8301126114bf57600080fd5b813560206114cf6114538361148a565b82815260059290921b840181019181810190868411156114ee57600080fd5b8286015b848110156115ea57803567ffffffffffffffff808211156115135760008081fd5b818901915060e0807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d0301121561154c5760008081fd5b61155461130b565b61155f8885016110c2565b8152604061156e8186016110c2565b89830152606061157f8187016110c2565b82840152608091506115928287016110c2565b818401525060a0808601358284015260c0915081860135858111156115b75760008081fd5b6115c58f8c838a0101611434565b8285015250506115d68386016110e0565b9082015286525050509183019183016114f2565b509695505050505050565b60008060008060008060c0878903121561160e57600080fd5b86359550602087013567ffffffffffffffff8082111561162d57600080fd5b6116398a838b01611434565b9650604089013591508082111561164f57600080fd5b61165b8a838b01611434565b95506060890135915061166d8261109d565b9093506080880135925060a0880135908082111561168a57600080fd5b5061169789828a016114ae565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115610b4a57610b4a6116d3565b8183823760009101908152919050565b60008251611737818460208701610df9565b9190910192915050565b60006020828403121561175357600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146101af57600080fd5b6000610140828403121561179657600080fd5b61179e611334565b905081358152602082013567ffffffffffffffff808211156117bf57600080fd5b6117cb85838601611434565b602084015260408401359150808211156117e457600080fd5b506117f184828501611434565b604083015250611803606083016110c2565b6060820152611814608083016110c2565b608082015261182560a083016110c2565b60a082015260c082013560c082015260e082013560e082015261010061184c8184016110e0565b9082015261012061185e8382016110e0565b9082015292915050565b803563ffffffff811681146110cd57600080fd5b600060e0828403121561188e57600080fd5b61189661130b565b9050813567ffffffffffffffff8111156118af57600080fd5b6118bb84828501611434565b8252506118ca602083016110c2565b602082015260408201356040820152606082013560608201526118ef608083016110c2565b608082015261190060a08301611868565b60a082015261191160c083016110e0565b60c082015292915050565b6000806040838503121561192f57600080fd5b823567ffffffffffffffff8082111561194757600080fd5b61195386838701611783565b9350602085013591508082111561196957600080fd5b506119768582860161187c565b9150509250929050565b60006020828403121561199257600080fd5b81356101af8161109d565b6000806000606084860312156119b257600080fd5b833567ffffffffffffffff808211156119ca57600080fd5b6119d687838801611783565b945060208601359150808211156119ec57600080fd5b6119f8878388016114ae565b93506040860135915080821115611a0e57600080fd5b50611a1b8682870161187c565b9150509250925092565b60006101008284031215611a3857600080fd5b611a40611358565b90508135815260208201356020820152604082013560408201526060820135606082015260808201356080820152611a7a60a083016110c2565b60a082015260c082013567ffffffffffffffff80821115611a9a57600080fd5b611aa685838601611434565b60c084015260e0840135915080821115611abf57600080fd5b50611acc84828501611434565b60e08301525092915050565b60008060408385031215611aeb57600080fd5b823567ffffffffffffffff80821115611b0357600080fd5b611b0f86838701611783565b93506020850135915080821115611b2557600080fd5b5061197685828601611a25565b600080600060608486031215611b4757600080fd5b833567ffffffffffffffff80821115611b5f57600080fd5b611b6b87838801611783565b94506020860135915080821115611b8157600080fd5b611b8d878388016114ae565b93506040860135915080821115611ba357600080fd5b50611a1b86828701611a25565b803567ffffffffffffffff811681146110cd57600080fd5b8035600781106110cd57600080fd5b600060c08284031215611be957600080fd5b611bf161137c565b9050611bfc82611868565b8152611c0a60208301611bb0565b6020820152604082013567ffffffffffffffff80821115611c2a57600080fd5b611c3685838601611434565b60408401526060840135915080821115611c4f57600080fd5b50611c5c84828501611434565b60608301525060808201356080820152611c7860a08301611bc8565b60a082015292915050565b60008060408385031215611c9657600080fd5b823567ffffffffffffffff80821115611cae57600080fd5b611cba86838701611783565b93506020850135915080821115611cd057600080fd5b5061197685828601611bd7565b600080600060608486031215611cf257600080fd5b833567ffffffffffffffff80821115611d0a57600080fd5b611d1687838801611783565b94506020860135915080821115611d2c57600080fd5b611d38878388016114ae565b93506040860135915080821115611d4e57600080fd5b50611a1b86828701611bd7565b600060208284031215611d6d57600080fd5b813567ffffffffffffffff811115611d8457600080fd5b611d9084828501611434565b949350505050565b600082601f830112611da957600080fd5b8151611db7611453826113ee565b818152846020838601011115611dcc57600080fd5b611d90826020830160208701610df9565b80516110cd8161109d565b80516110cd816110d2565b60006101408284031215611e0657600080fd5b611e0e611334565b905081518152602082015167ffffffffffffffff80821115611e2f57600080fd5b611e3b85838601611d98565b60208401526040840151915080821115611e5457600080fd5b50611e6184828501611d98565b604083015250611e7360608301611ddd565b6060820152611e8460808301611ddd565b6080820152611e9560a08301611ddd565b60a082015260c082015160c082015260e082015160e0820152610100611ebc818401611de8565b9082015261012061185e838201611de8565b60008060408385031215611ee157600080fd5b825167ffffffffffffffff80821115611ef957600080fd5b611f0586838701611df3565b9350602091508185015181811115611f1c57600080fd5b8501601f81018713611f2d57600080fd5b8051611f3b6114538261148a565b81815260059190911b82018401908481019089831115611f5a57600080fd5b8584015b8381101561204057805186811115611f7557600080fd5b850160e0818d037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0011215611fa957600080fd5b611fb161130b565b611fbc898301611ddd565b8152611fca60408301611ddd565b89820152611fda60608301611ddd565b6040820152611feb60808301611ddd565b606082015260a0820151608082015260c0808301518981111561200e5760008081fd5b61201c8f8c83870101611d98565b60a08401525061202e60e08401611de8565b90820152845250918601918601611f5e565b508096505050505050509250929050565b6000806040838503121561206457600080fd5b823567ffffffffffffffff8082111561207c57600080fd5b61208886838701611783565b9350602085013591508082111561209e57600080fd5b50611976858286016114ae565b6000602082840312156120bd57600080fd5b815167ffffffffffffffff8111156120d457600080fd5b611d9084828501611df3565b6000602082840312156120f257600080fd5b813567ffffffffffffffff81111561210957600080fd5b611d9084828501611783565b80820180821115610b4a57610b4a6116d356fea26469706673582212209c2278585919afe28d4115e6730cd0b27779220129580a1533ccdeff6e3d2bc564736f6c63430008110033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "SliceOutOfBounds";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "SliceOverflow";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "extractBridgeData";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "transactionId";
                readonly type: "bytes32";
            }, {
                readonly internalType: "string";
                readonly name: "bridge";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "integrator";
                readonly type: "string";
            }, {
                readonly internalType: "address";
                readonly name: "referrer";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "sendingAssetId";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "destinationChainId";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "hasSourceSwaps";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "hasDestinationCall";
                readonly type: "bool";
            }];
            readonly internalType: "struct ILiFi.BridgeData";
            readonly name: "bridgeData";
            readonly type: "tuple";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "extractData";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "transactionId";
                readonly type: "bytes32";
            }, {
                readonly internalType: "string";
                readonly name: "bridge";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "integrator";
                readonly type: "string";
            }, {
                readonly internalType: "address";
                readonly name: "referrer";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "sendingAssetId";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "receiver";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "minAmount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "destinationChainId";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "hasSourceSwaps";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "hasDestinationCall";
                readonly type: "bool";
            }];
            readonly internalType: "struct ILiFi.BridgeData";
            readonly name: "bridgeData";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "callTo";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "approveTo";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "sendingAssetId";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "receivingAssetId";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "fromAmount";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "callData";
                readonly type: "bytes";
            }, {
                readonly internalType: "bool";
                readonly name: "requiresDeposit";
                readonly type: "bool";
            }];
            readonly internalType: "struct LibSwap.SwapData[]";
            readonly name: "swapData";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "extractGenericSwapParameters";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "sendingAssetId";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "receivingAssetId";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "receivingAmount";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "extractMainParameters";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "bridge";
            readonly type: "string";
        }, {
            readonly internalType: "address";
            readonly name: "sendingAssetId";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "destinationChainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "bool";
            readonly name: "hasSourceSwaps";
            readonly type: "bool";
        }, {
            readonly internalType: "bool";
            readonly name: "hasDestinationCall";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "extractSwapData";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "callTo";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "approveTo";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "sendingAssetId";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "receivingAssetId";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "fromAmount";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "callData";
                readonly type: "bytes";
            }, {
                readonly internalType: "bool";
                readonly name: "requiresDeposit";
                readonly type: "bool";
            }];
            readonly internalType: "struct LibSwap.SwapData[]";
            readonly name: "swapData";
            readonly type: "tuple[]";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }, {
            readonly internalType: "string";
            readonly name: "bridge";
            readonly type: "string";
        }, {
            readonly internalType: "address";
            readonly name: "sendingAssetId";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "destinationChainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "bool";
            readonly name: "hasSourceSwaps";
            readonly type: "bool";
        }, {
            readonly internalType: "bool";
            readonly name: "hasDestinationCall";
            readonly type: "bool";
        }];
        readonly name: "validateCalldata";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "isValid";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "callTo";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "dstCalldata";
            readonly type: "bytes";
        }];
        readonly name: "validateDestinationCalldata";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "isValid";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): CalldataVerificationFacetInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): CalldataVerificationFacet;
}
export {};
