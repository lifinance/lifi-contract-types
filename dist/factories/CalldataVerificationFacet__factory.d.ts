import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { CalldataVerificationFacet, CalldataVerificationFacetInterface } from "../CalldataVerificationFacet";
declare type CalldataVerificationFacetConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class CalldataVerificationFacet__factory extends ContractFactory {
    constructor(...args: CalldataVerificationFacetConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<CalldataVerificationFacet>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): CalldataVerificationFacet;
    connect(signer: Signer): CalldataVerificationFacet__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b506125be806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063d53482cf1161005b578063d53482cf14610152578063df1c3a5b14610175578063ee0aa32014610196578063f58ae2ce146101bc57600080fd5b8063070e81f11461008d578063103c5200146100b65780637f99d7af146100d7578063c318eeda146100f7575b600080fd5b6100a061009b3660046110dd565b6101cf565b6040516100ad919061127a565b60405180910390f35b6100c96100c43660046110dd565b6101e2565b6040516100ad929190611382565b6100ea6100e53660046110dd565b61025d565b6040516100ad91906113b0565b61010a6101053660046110dd565b6102b9565b6040805173ffffffffffffffffffffffffffffffffffffffff96871681526020810195909552928516928401929092529092166060820152608081019190915260a0016100ad565b610165610160366004611411565b610431565b60405190151581526020016100ad565b6101886101833660046110dd565b6106c2565b6040519081526020016100ad565b6101a96101a43660046110dd565b6107d3565b6040516100ad97969594939291906114e0565b6101656101ca36600461153e565b61088e565b60606101db8383610d99565b9392505050565b604080516101408101825260008082526060602083018190529282018390528282018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201529061023c8484610e6b565b915081610100015115610256576102538484610d99565b90505b9250929050565b604080516101408101825260008082526060602083018190529282018390529181018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101919091526101db8383610e6b565b60008060008060006060600088888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509394507fd6a4bc50000000000000000000000000000000000000000000000000000000009361032e93506004925090508b8d6115d8565b61033791611602565b7fffffffff00000000000000000000000000000000000000000000000000000000160361037b5761036b886004818c6115d8565b81019061037891906117f6565b90505b610395600480835161038d9190611862565b839190610f81565b8060200190518101906103a89190611a3b565b8051929a50909750955085935060009250151590506103c9576103c9611ae9565b6020026020010151604001519650816000815181106103ea576103ea611ae9565b602002602001015160800151955081600183516104079190611862565b8151811061041757610417611ae9565b602002602001015160600151935050509295509295909350565b604080516101408101825260008082526060602083018190529282018390529181018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261048c8c8c6107d3565b1515610120880152151561010087015260e086015260c085015273ffffffffffffffffffffffffffffffffffffffff90811660a0850152166080830152602080830191909152604080516000815291820180825282519020916104f3918d918d9101611b18565b60405160208183030381529060405280519060200120148061056657508989604051602001610523929190611b18565b60405160208183030381529060405280519060200120816020015160405160200161054e9190611b28565b60405160208183030381529060405280519060200120145b80156105c0575073ffffffffffffffffffffffffffffffffffffffff80891614806105c057508773ffffffffffffffffffffffffffffffffffffffff16816080015173ffffffffffffffffffffffffffffffffffffffff16145b801561061a575073ffffffffffffffffffffffffffffffffffffffff808816148061061a57508673ffffffffffffffffffffffffffffffffffffffff168160a0015173ffffffffffffffffffffffffffffffffffffffff16145b801561065257507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8614806106525750858160c00151145b801561068a57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85148061068a5750848160e00151145b801561069e57508315158161010001511515145b80156106b257508215158161012001511515145b9c9b505050505050505050505050565b60008083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093945061070a9250879150869050610e6b565b90507fd6a4bc500000000000000000000000000000000000000000000000000000000061073b6004600087896115d8565b61074491611602565b7fffffffff0000000000000000000000000000000000000000000000000000000016036107885761077884600481886115d8565b81019061078591906117f6565b91505b806101000151156107b257818060200190518101906107a79190611c29565b5094506107cb915050565b818060200190518101906107c69190611cbb565b509350505b505092915050565b606060008060008060008060006107ea8a8a610e6b565b90508061010001511561084d5760006108038b8b610d99565b90508060008151811061081857610818611ae9565b60200260200101516040015197508060008151811061083957610839611ae9565b60200260200101516080015195505061085c565b806080015196508060c0015194505b602081015160a082015160e083015161010084015161012090940151929d999c50909a50959850949690955092505050565b60008087878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509394507fd6a4bc5000000000000000000000000000000000000000000000000000000000936108fa93506004925090508a8c6115d8565b61090391611602565b7fffffffff00000000000000000000000000000000000000000000000000000000160361094757610937876004818b6115d8565b81019061094491906117f6565b90505b60008180602001905181019061095d9190611d28565b90507f72366cd3000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610a4f5760006109c460048085516109bc9190611862565b859190610f81565b8060200190518101906109d79190611e1e565b91505080600001518051906020012086866040516109f6929190611b18565b6040518091039020148015610a455750602081015173ffffffffffffffffffffffffffffffffffffffff16610a2d888a018a611e82565b73ffffffffffffffffffffffffffffffffffffffff16145b9350505050610d8f565b7f7c0ce6e9000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610adf576000610aac60048085516109bc9190611862565b806020019051810190610abf9190611e9f565b9250505080600001518051906020012086866040516109f6929190611b18565b7f41e15319000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610bad576000610b3c60048085516109bc9190611862565b806020019051810190610b4f9190611fd0565b9150508060e00151805190602001208686604051610b6e929190611b18565b6040518091039020148015610a4557508060c00151805190602001208888604051610b9a929190611b18565b6040518091039020149350505050610d8f565b7f12e879e7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610c3d576000610c0a60048085516109bc9190611862565b806020019051810190610c1d919061202a565b925050508060e00151805190602001208686604051610b6e929190611b18565b7ffaf6a213000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610cf8576000610c9a60048085516109bc9190611862565b806020019051810190610cad919061217b565b9150508060600151805190602001208686604051610ccc929190611b18565b6040518091039020148015610a4557508060400151805190602001208888604051610b9a929190611b18565b7f4f93ad26000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610d88576000610d5560048085516109bc9190611862565b806020019051810190610d6891906121d5565b925050508060600151805190602001208686604051610ccc929190611b18565b6000925050505b9695505050505050565b60607fd6a4bc5000000000000000000000000000000000000000000000000000000000610dca6004600085876115d8565b610dd391611602565b7fffffffff000000000000000000000000000000000000000000000000000000001603610e47576000610e0983600481876115d8565b810190610e1691906117f6565b9050610e2a600480835161038d9190611862565b806020019051810190610e3d9190612253565b9250610e65915050565b610e5482600481866115d8565b810190610e619190612388565b9150505b92915050565b604080516101408101825260008082526060602083018190529282018390529181018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101919091527fd6a4bc5000000000000000000000000000000000000000000000000000000000610eec6004600085876115d8565b610ef591611602565b7fffffffff000000000000000000000000000000000000000000000000000000001603610f67576000610f2b83600481876115d8565b810190610f3891906117f6565b9050610f4c600480835161038d9190611862565b806020019051810190610f5f919061250b565b915050610e65565b610f7482600481866115d8565b8101906101db9190612540565b606081610f8f81601f612575565b1015610fc7576040517f47aaf07a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610fd18284612575565b8451101561100b576040517f3b99b53d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608215801561102a5760405191506000825260208201604052611092565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561106357805183526020928301920161104b565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b60008083601f8401126110ad57600080fd5b50813567ffffffffffffffff8111156110c557600080fd5b60208301915083602082850101111561025657600080fd5b600080602083850312156110f057600080fd5b823567ffffffffffffffff81111561110757600080fd5b6111138582860161109b565b90969095509350505050565b60005b8381101561113a578181015183820152602001611122565b50506000910152565b6000815180845261115b81602086016020860161111f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b8481101561126d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08684030189528151805173ffffffffffffffffffffffffffffffffffffffff908116855285820151811686860152604080830151821690860152606080830151909116908501526080808201519085015260a08082015160e0828701819052919061124083880182611143565b9250505060c08083015192506112598187018415159052565b5099850199935050908301906001016111aa565b5090979650505050505050565b6020815260006101db602083018461118d565b60006101408251845260208301518160208601526112ad82860182611143565b915050604083015184820360408601526112c78282611143565b91505060608301516112f1606086018273ffffffffffffffffffffffffffffffffffffffff169052565b506080830151611319608086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060a083015161134160a086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160c085015260e083015160e08501526101008084015161136a8287018215159052565b50506101209283015115159390920192909252919050565b604081526000611395604083018561128d565b82810360208401526113a7818561118d565b95945050505050565b6020815260006101db602083018461128d565b73ffffffffffffffffffffffffffffffffffffffff811681146113e557600080fd5b50565b80356113f3816113c3565b919050565b80151581146113e557600080fd5b80356113f3816113f8565b6000806000806000806000806000806101008b8d03121561143157600080fd5b8a3567ffffffffffffffff8082111561144957600080fd5b6114558e838f0161109b565b909c509a5060208d013591508082111561146e57600080fd5b5061147b8d828e0161109b565b90995097505060408b013561148f816113c3565b955060608b013561149f816113c3565b945060808b0135935060a08b0135925060c08b01356114bd816113f8565b915060e08b01356114cd816113f8565b809150509295989b9194979a5092959850565b60e0815260006114f360e083018a611143565b73ffffffffffffffffffffffffffffffffffffffff988916602084015296909716604082015260608101949094526080840192909252151560a0830152151560c09091015292915050565b6000806000806000806060878903121561155757600080fd5b863567ffffffffffffffff8082111561156f57600080fd5b61157b8a838b0161109b565b9098509650602089013591508082111561159457600080fd5b6115a08a838b0161109b565b909650945060408901359150808211156115b957600080fd5b506115c689828a0161109b565b979a9699509497509295939492505050565b600080858511156115e857600080fd5b838611156115f557600080fd5b5050820193919092039150565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156107cb5760049490940360031b84901b1690921692915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561169a5761169a611648565b60405290565b604051610140810167ffffffffffffffff8111828210171561169a5761169a611648565b604051610100810167ffffffffffffffff8111828210171561169a5761169a611648565b60405160c0810167ffffffffffffffff8111828210171561169a5761169a611648565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561175257611752611648565b604052919050565b600067ffffffffffffffff82111561177457611774611648565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f8301126117b157600080fd5b81356117c46117bf8261175a565b61170b565b8181528460208386010111156117d957600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561180857600080fd5b813567ffffffffffffffff81111561181f57600080fd5b61182b848285016117a0565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115610e6557610e65611833565b600082601f83011261188657600080fd5b81516118946117bf8261175a565b8181528460208386010111156118a957600080fd5b61182b82602083016020870161111f565b80516113f3816113c3565b600067ffffffffffffffff8211156118df576118df611648565b5060051b60200190565b80516113f3816113f8565b600082601f83011261190557600080fd5b815160206119156117bf836118c5565b82815260059290921b8401810191818101908684111561193457600080fd5b8286015b84811015611a3057805167ffffffffffffffff808211156119595760008081fd5b818901915060e0807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d030112156119925760008081fd5b61199a611677565b6119a58885016118ba565b815260406119b48186016118ba565b8983015260606119c58187016118ba565b82840152608091506119d88287016118ba565b818401525060a0808601518284015260c0915081860151858111156119fd5760008081fd5b611a0b8f8c838a0101611875565b828501525050611a1c8386016118e9565b908201528652505050918301918301611938565b509695505050505050565b60008060008060008060c08789031215611a5457600080fd5b86519550602087015167ffffffffffffffff80821115611a7357600080fd5b611a7f8a838b01611875565b96506040890151915080821115611a9557600080fd5b611aa18a838b01611875565b955060608901519150611ab3826113c3565b608089015160a08a0151929550935080821115611acf57600080fd5b50611adc89828a016118f4565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8183823760009101908152919050565b60008251611b3a81846020870161111f565b9190910192915050565b60006101408284031215611b5757600080fd5b611b5f6116a0565b905081518152602082015167ffffffffffffffff80821115611b8057600080fd5b611b8c85838601611875565b60208401526040840151915080821115611ba557600080fd5b50611bb284828501611875565b604083015250611bc4606083016118ba565b6060820152611bd5608083016118ba565b6080820152611be660a083016118ba565b60a082015260c082015160c082015260e082015160e0820152610100611c0d8184016118e9565b90820152610120611c1f8382016118e9565b9082015292915050565b60008060008060808587031215611c3f57600080fd5b845167ffffffffffffffff80821115611c5757600080fd5b611c6388838901611b44565b95506020870151915080821115611c7957600080fd5b611c85888389016118f4565b9450604087015193506060870151915080821115611ca257600080fd5b50611caf87828801611875565b91505092959194509250565b600080600060608486031215611cd057600080fd5b835167ffffffffffffffff80821115611ce857600080fd5b611cf487838801611b44565b9450602086015193506040860151915080821115611d1157600080fd5b50611d1e86828701611875565b9150509250925092565b600060208284031215611d3a57600080fd5b81517fffffffff00000000000000000000000000000000000000000000000000000000811681146101db57600080fd5b805163ffffffff811681146113f357600080fd5b600060e08284031215611d9057600080fd5b611d98611677565b9050815167ffffffffffffffff811115611db157600080fd5b611dbd84828501611875565b825250611dcc602083016118ba565b60208201526040820151604082015260608201516060820152611df1608083016118ba565b6080820152611e0260a08301611d6a565b60a0820152611e1360c083016118e9565b60c082015292915050565b60008060408385031215611e3157600080fd5b825167ffffffffffffffff80821115611e4957600080fd5b611e5586838701611b44565b93506020850151915080821115611e6b57600080fd5b50611e7885828601611d7e565b9150509250929050565b600060208284031215611e9457600080fd5b81356101db816113c3565b600080600060608486031215611eb457600080fd5b835167ffffffffffffffff80821115611ecc57600080fd5b611ed887838801611b44565b94506020860151915080821115611eee57600080fd5b611efa878388016118f4565b93506040860151915080821115611f1057600080fd5b50611d1e86828701611d7e565b60006101008284031215611f3057600080fd5b611f386116c4565b90508151815260208201516020820152604082015160408201526060820151606082015260808201516080820152611f7260a083016118ba565b60a082015260c082015167ffffffffffffffff80821115611f9257600080fd5b611f9e85838601611875565b60c084015260e0840151915080821115611fb757600080fd5b50611fc484828501611875565b60e08301525092915050565b60008060408385031215611fe357600080fd5b825167ffffffffffffffff80821115611ffb57600080fd5b61200786838701611b44565b9350602085015191508082111561201d57600080fd5b50611e7885828601611f1d565b60008060006060848603121561203f57600080fd5b835167ffffffffffffffff8082111561205757600080fd5b61206387838801611b44565b9450602086015191508082111561207957600080fd5b612085878388016118f4565b9350604086015191508082111561209b57600080fd5b50611d1e86828701611f1d565b805167ffffffffffffffff811681146113f357600080fd5b8051600781106113f357600080fd5b600060c082840312156120e157600080fd5b6120e96116e8565b90506120f482611d6a565b8152612102602083016120a8565b6020820152604082015167ffffffffffffffff8082111561212257600080fd5b61212e85838601611875565b6040840152606084015191508082111561214757600080fd5b5061215484828501611875565b6060830152506080820151608082015261217060a083016120c0565b60a082015292915050565b6000806040838503121561218e57600080fd5b825167ffffffffffffffff808211156121a657600080fd5b6121b286838701611b44565b935060208501519150808211156121c857600080fd5b50611e78858286016120cf565b6000806000606084860312156121ea57600080fd5b835167ffffffffffffffff8082111561220257600080fd5b61220e87838801611b44565b9450602086015191508082111561222457600080fd5b612230878388016118f4565b9350604086015191508082111561224657600080fd5b50611d1e868287016120cf565b6000806040838503121561226657600080fd5b825167ffffffffffffffff8082111561227e57600080fd5b61228a86838701611b44565b935060208501519150808211156122a057600080fd5b50611e78858286016118f4565b600061014082840312156122c057600080fd5b6122c86116a0565b905081358152602082013567ffffffffffffffff808211156122e957600080fd5b6122f5858386016117a0565b6020840152604084013591508082111561230e57600080fd5b5061231b848285016117a0565b60408301525061232d606083016113e8565b606082015261233e608083016113e8565b608082015261234f60a083016113e8565b60a082015260c082013560c082015260e082013560e0820152610100612376818401611406565b90820152610120611c1f838201611406565b6000806040838503121561239b57600080fd5b823567ffffffffffffffff808211156123b357600080fd5b6123bf868387016122ad565b93506020915081850135818111156123d657600080fd5b8501601f810187136123e757600080fd5b80356123f56117bf826118c5565b81815260059190911b8201840190848101908983111561241457600080fd5b8584015b838110156124fa5780358681111561242f57600080fd5b850160e0818d037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001121561246357600080fd5b61246b611677565b6124768983016113e8565b8152612484604083016113e8565b89820152612494606083016113e8565b60408201526124a5608083016113e8565b606082015260a0820135608082015260c080830135898111156124c85760008081fd5b6124d68f8c838701016117a0565b60a0840152506124e860e08401611406565b90820152845250918601918601612418565b508096505050505050509250929050565b60006020828403121561251d57600080fd5b815167ffffffffffffffff81111561253457600080fd5b61182b84828501611b44565b60006020828403121561255257600080fd5b813567ffffffffffffffff81111561256957600080fd5b61182b848285016122ad565b80820180821115610e6557610e6561183356fea26469706673582212201e86fcfee500bab3e21b6bd92f56e796c00d66eb7ca44271b62244623980ca5564736f6c63430008110033";
    static readonly abi: readonly [{
        readonly type: "function";
        readonly name: "extractBridgeData";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }];
        readonly outputs: readonly [{
            readonly name: "bridgeData";
            readonly type: "tuple";
            readonly internalType: "struct ILiFi.BridgeData";
            readonly components: readonly [{
                readonly name: "transactionId";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "bridge";
                readonly type: "string";
                readonly internalType: "string";
            }, {
                readonly name: "integrator";
                readonly type: "string";
                readonly internalType: "string";
            }, {
                readonly name: "referrer";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "sendingAssetId";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "receiver";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "minAmount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "destinationChainId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "hasSourceSwaps";
                readonly type: "bool";
                readonly internalType: "bool";
            }, {
                readonly name: "hasDestinationCall";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly name: "extractData";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }];
        readonly outputs: readonly [{
            readonly name: "bridgeData";
            readonly type: "tuple";
            readonly internalType: "struct ILiFi.BridgeData";
            readonly components: readonly [{
                readonly name: "transactionId";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "bridge";
                readonly type: "string";
                readonly internalType: "string";
            }, {
                readonly name: "integrator";
                readonly type: "string";
                readonly internalType: "string";
            }, {
                readonly name: "referrer";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "sendingAssetId";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "receiver";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "minAmount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "destinationChainId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "hasSourceSwaps";
                readonly type: "bool";
                readonly internalType: "bool";
            }, {
                readonly name: "hasDestinationCall";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
        }, {
            readonly name: "swapData";
            readonly type: "tuple[]";
            readonly internalType: "struct LibSwap.SwapData[]";
            readonly components: readonly [{
                readonly name: "callTo";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "approveTo";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "sendingAssetId";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "receivingAssetId";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "fromAmount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "callData";
                readonly type: "bytes";
                readonly internalType: "bytes";
            }, {
                readonly name: "requiresDeposit";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly name: "extractGenericSwapParameters";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }];
        readonly outputs: readonly [{
            readonly name: "sendingAssetId";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "amount";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "receiver";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "receivingAssetId";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "receivingAmount";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly name: "extractMainParameters";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }];
        readonly outputs: readonly [{
            readonly name: "bridge";
            readonly type: "string";
            readonly internalType: "string";
        }, {
            readonly name: "sendingAssetId";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "receiver";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "amount";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "destinationChainId";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "hasSourceSwaps";
            readonly type: "bool";
            readonly internalType: "bool";
        }, {
            readonly name: "hasDestinationCall";
            readonly type: "bool";
            readonly internalType: "bool";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly name: "extractNonEVMAddress";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }];
        readonly outputs: readonly [{
            readonly name: "nonEVMAddress";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly name: "extractSwapData";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }];
        readonly outputs: readonly [{
            readonly name: "swapData";
            readonly type: "tuple[]";
            readonly internalType: "struct LibSwap.SwapData[]";
            readonly components: readonly [{
                readonly name: "callTo";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "approveTo";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "sendingAssetId";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "receivingAssetId";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "fromAmount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "callData";
                readonly type: "bytes";
                readonly internalType: "bytes";
            }, {
                readonly name: "requiresDeposit";
                readonly type: "bool";
                readonly internalType: "bool";
            }];
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly name: "validateCalldata";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }, {
            readonly name: "bridge";
            readonly type: "string";
            readonly internalType: "string";
        }, {
            readonly name: "sendingAssetId";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "receiver";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "amount";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "destinationChainId";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "hasSourceSwaps";
            readonly type: "bool";
            readonly internalType: "bool";
        }, {
            readonly name: "hasDestinationCall";
            readonly type: "bool";
            readonly internalType: "bool";
        }];
        readonly outputs: readonly [{
            readonly name: "isValid";
            readonly type: "bool";
            readonly internalType: "bool";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly name: "validateDestinationCalldata";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }, {
            readonly name: "callTo";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }, {
            readonly name: "dstCalldata";
            readonly type: "bytes";
            readonly internalType: "bytes";
        }];
        readonly outputs: readonly [{
            readonly name: "isValid";
            readonly type: "bool";
            readonly internalType: "bool";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "error";
        readonly name: "SliceOutOfBounds";
        readonly inputs: readonly [];
    }, {
        readonly type: "error";
        readonly name: "SliceOverflow";
        readonly inputs: readonly [];
    }];
    static createInterface(): CalldataVerificationFacetInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): CalldataVerificationFacet;
}
export {};
