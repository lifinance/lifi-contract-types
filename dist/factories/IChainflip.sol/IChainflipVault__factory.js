/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, utils } from "ethers";
const _abi = [
    {
        type: "function",
        name: "xCallNative",
        inputs: [
            {
                name: "dstChain",
                type: "uint32",
                internalType: "uint32",
            },
            {
                name: "dstAddress",
                type: "bytes",
                internalType: "bytes",
            },
            {
                name: "dstToken",
                type: "uint32",
                internalType: "uint32",
            },
            {
                name: "message",
                type: "bytes",
                internalType: "bytes",
            },
            {
                name: "gasAmount",
                type: "uint256",
                internalType: "uint256",
            },
            {
                name: "cfParameters",
                type: "bytes",
                internalType: "bytes",
            },
        ],
        outputs: [],
        stateMutability: "payable",
    },
    {
        type: "function",
        name: "xCallToken",
        inputs: [
            {
                name: "dstChain",
                type: "uint32",
                internalType: "uint32",
            },
            {
                name: "dstAddress",
                type: "bytes",
                internalType: "bytes",
            },
            {
                name: "dstToken",
                type: "uint32",
                internalType: "uint32",
            },
            {
                name: "message",
                type: "bytes",
                internalType: "bytes",
            },
            {
                name: "gasAmount",
                type: "uint256",
                internalType: "uint256",
            },
            {
                name: "srcToken",
                type: "address",
                internalType: "contract IERC20",
            },
            {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
            },
            {
                name: "cfParameters",
                type: "bytes",
                internalType: "bytes",
            },
        ],
        outputs: [],
        stateMutability: "nonpayable",
    },
    {
        type: "function",
        name: "xSwapNative",
        inputs: [
            {
                name: "dstChain",
                type: "uint32",
                internalType: "uint32",
            },
            {
                name: "dstAddress",
                type: "bytes",
                internalType: "bytes",
            },
            {
                name: "dstToken",
                type: "uint32",
                internalType: "uint32",
            },
            {
                name: "cfParameters",
                type: "bytes",
                internalType: "bytes",
            },
        ],
        outputs: [],
        stateMutability: "payable",
    },
    {
        type: "function",
        name: "xSwapToken",
        inputs: [
            {
                name: "dstChain",
                type: "uint32",
                internalType: "uint32",
            },
            {
                name: "dstAddress",
                type: "bytes",
                internalType: "bytes",
            },
            {
                name: "dstToken",
                type: "uint32",
                internalType: "uint32",
            },
            {
                name: "srcToken",
                type: "address",
                internalType: "contract IERC20",
            },
            {
                name: "amount",
                type: "uint256",
                internalType: "uint256",
            },
            {
                name: "cfParameters",
                type: "bytes",
                internalType: "bytes",
            },
        ],
        outputs: [],
        stateMutability: "nonpayable",
    },
];
export class IChainflipVault__factory {
    static abi = _abi;
    static createInterface() {
        return new utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    }
}
