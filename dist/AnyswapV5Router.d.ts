/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AnyswapV5RouterInterface extends ethers.utils.Interface {
  functions: {
    "anySwapFeeTo(address,uint256)": FunctionFragment;
    "anySwapIn(bytes32[],address[],address[],uint256[],uint256[])": FunctionFragment;
    "anySwapInAuto(bytes32,address,address,uint256,uint256)": FunctionFragment;
    "anySwapInExactTokensForNative(bytes32,uint256,uint256,address[],address,uint256,uint256)": FunctionFragment;
    "anySwapInExactTokensForTokens(bytes32,uint256,uint256,address[],address,uint256,uint256)": FunctionFragment;
    "anySwapInUnderlying(bytes32,address,address,uint256,uint256)": FunctionFragment;
    "anySwapOut(address,address,uint256,uint256)": FunctionFragment;
    "anySwapOutExactTokensForNative(uint256,uint256,address[],address,uint256,uint256)": FunctionFragment;
    "anySwapOutExactTokensForNativeUnderlying(uint256,uint256,address[],address,uint256,uint256)": FunctionFragment;
    "anySwapOutExactTokensForNativeUnderlyingWithPermit(address,uint256,uint256,address[],address,uint256,uint8,bytes32,bytes32,uint256)": FunctionFragment;
    "anySwapOutExactTokensForNativeUnderlyingWithTransferPermit(address,uint256,uint256,address[],address,uint256,uint8,bytes32,bytes32,uint256)": FunctionFragment;
    "anySwapOutExactTokensForTokens(uint256,uint256,address[],address,uint256,uint256)": FunctionFragment;
    "anySwapOutExactTokensForTokensUnderlying(uint256,uint256,address[],address,uint256,uint256)": FunctionFragment;
    "anySwapOutExactTokensForTokensUnderlyingWithPermit(address,uint256,uint256,address[],address,uint256,uint8,bytes32,bytes32,uint256)": FunctionFragment;
    "anySwapOutExactTokensForTokensUnderlyingWithTransferPermit(address,uint256,uint256,address[],address,uint256,uint8,bytes32,bytes32,uint256)": FunctionFragment;
    "anySwapOutNative(address,address,uint256)": FunctionFragment;
    "anySwapOutUnderlying(address,address,uint256,uint256)": FunctionFragment;
    "anySwapOutUnderlyingWithPermit(address,address,address,uint256,uint256,uint8,bytes32,bytes32,uint256)": FunctionFragment;
    "anySwapOutUnderlyingWithTransferPermit(address,address,address,uint256,uint256,uint8,bytes32,bytes32,uint256)": FunctionFragment;
    "cID()": FunctionFragment;
    "changeMPC(address)": FunctionFragment;
    "changeVault(address,address)": FunctionFragment;
    "depositNative(address,address)": FunctionFragment;
    "factory()": FunctionFragment;
    "getAmountIn(uint256,uint256,uint256)": FunctionFragment;
    "getAmountOut(uint256,uint256,uint256)": FunctionFragment;
    "getAmountsIn(uint256,address[])": FunctionFragment;
    "getAmountsOut(uint256,address[])": FunctionFragment;
    "mpc()": FunctionFragment;
    "quote(uint256,uint256,uint256)": FunctionFragment;
    "wNATIVE()": FunctionFragment;
    "withdrawNative(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "anySwapFeeTo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "anySwapIn",
    values: [BytesLike[], string[], string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "anySwapInAuto",
    values: [BytesLike, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "anySwapInExactTokensForNative",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anySwapInExactTokensForTokens",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anySwapInUnderlying",
    values: [BytesLike, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "anySwapOut",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "anySwapOutExactTokensForNative",
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anySwapOutExactTokensForNativeUnderlying",
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anySwapOutExactTokensForNativeUnderlyingWithPermit",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anySwapOutExactTokensForNativeUnderlyingWithTransferPermit",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anySwapOutExactTokensForTokens",
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anySwapOutExactTokensForTokensUnderlying",
    values: [
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anySwapOutExactTokensForTokensUnderlyingWithPermit",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anySwapOutExactTokensForTokensUnderlyingWithTransferPermit",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string[],
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anySwapOutNative",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "anySwapOutUnderlying",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "anySwapOutUnderlyingWithPermit",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "anySwapOutUnderlyingWithTransferPermit",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "cID", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeMPC", values: [string]): string;
  encodeFunctionData(
    functionFragment: "changeVault",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNative",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAmountIn",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsIn",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(functionFragment: "mpc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "wNATIVE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawNative",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "anySwapFeeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "anySwapIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "anySwapInAuto",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anySwapInExactTokensForNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anySwapInExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anySwapInUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "anySwapOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "anySwapOutExactTokensForNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anySwapOutExactTokensForNativeUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anySwapOutExactTokensForNativeUnderlyingWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anySwapOutExactTokensForNativeUnderlyingWithTransferPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anySwapOutExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anySwapOutExactTokensForTokensUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anySwapOutExactTokensForTokensUnderlyingWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anySwapOutExactTokensForTokensUnderlyingWithTransferPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anySwapOutNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anySwapOutUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anySwapOutUnderlyingWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "anySwapOutUnderlyingWithTransferPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeMPC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mpc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wNATIVE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNative",
    data: BytesLike
  ): Result;

  events: {
    "LogAnySwapIn(bytes32,address,address,uint256,uint256,uint256)": EventFragment;
    "LogAnySwapOut(address,address,address,uint256,uint256,uint256)": EventFragment;
    "LogAnySwapTradeTokensForNative(address[],address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "LogAnySwapTradeTokensForTokens(address[],address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "LogChangeMPC(address,address,uint256,uint256)": EventFragment;
    "LogChangeRouter(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogAnySwapIn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAnySwapOut"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogAnySwapTradeTokensForNative"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogAnySwapTradeTokensForTokens"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogChangeMPC"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogChangeRouter"): EventFragment;
}

export type LogAnySwapInEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber] & {
    txhash: string;
    token: string;
    to: string;
    amount: BigNumber;
    fromChainID: BigNumber;
    toChainID: BigNumber;
  }
>;

export type LogAnySwapOutEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber] & {
    token: string;
    from: string;
    to: string;
    amount: BigNumber;
    fromChainID: BigNumber;
    toChainID: BigNumber;
  }
>;

export type LogAnySwapTradeTokensForNativeEvent = TypedEvent<
  [string[], string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    path: string[];
    from: string;
    to: string;
    amountIn: BigNumber;
    amountOutMin: BigNumber;
    fromChainID: BigNumber;
    toChainID: BigNumber;
  }
>;

export type LogAnySwapTradeTokensForTokensEvent = TypedEvent<
  [string[], string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    path: string[];
    from: string;
    to: string;
    amountIn: BigNumber;
    amountOutMin: BigNumber;
    fromChainID: BigNumber;
    toChainID: BigNumber;
  }
>;

export type LogChangeMPCEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    oldMPC: string;
    newMPC: string;
    effectiveTime: BigNumber;
    chainID: BigNumber;
  }
>;

export type LogChangeRouterEvent = TypedEvent<
  [string, string, BigNumber] & {
    oldRouter: string;
    newRouter: string;
    chainID: BigNumber;
  }
>;

export class AnyswapV5Router extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AnyswapV5RouterInterface;

  functions: {
    anySwapFeeTo(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "anySwapIn(bytes32[],address[],address[],uint256[],uint256[])"(
      txs: BytesLike[],
      tokens: string[],
      to: string[],
      amounts: BigNumberish[],
      fromChainIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "anySwapIn(bytes32,address,address,uint256,uint256)"(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anySwapInAuto(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anySwapInExactTokensForNative(
      txs: BytesLike,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anySwapInExactTokensForTokens(
      txs: BytesLike,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anySwapInUnderlying(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "anySwapOut(address,address,uint256,uint256)"(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "anySwapOut(address[],address[],uint256[],uint256[])"(
      tokens: string[],
      to: string[],
      amounts: BigNumberish[],
      toChainIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anySwapOutExactTokensForNative(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anySwapOutExactTokensForNativeUnderlying(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anySwapOutExactTokensForNativeUnderlyingWithPermit(
      from: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anySwapOutExactTokensForNativeUnderlyingWithTransferPermit(
      from: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anySwapOutExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anySwapOutExactTokensForTokensUnderlying(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anySwapOutExactTokensForTokensUnderlyingWithPermit(
      from: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anySwapOutExactTokensForTokensUnderlyingWithTransferPermit(
      from: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anySwapOutNative(
      token: string,
      to: string,
      toChainID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anySwapOutUnderlying(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anySwapOutUnderlyingWithPermit(
      from: string,
      token: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    anySwapOutUnderlyingWithTransferPermit(
      from: string,
      token: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cID(overrides?: CallOverrides): Promise<[BigNumber] & { id: BigNumber }>;

    changeMPC(
      newMPC: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeVault(
      token: string,
      newVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositNative(
      token: string,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountIn: BigNumber }>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;

    mpc(overrides?: CallOverrides): Promise<[string]>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountB: BigNumber }>;

    wNATIVE(overrides?: CallOverrides): Promise<[string]>;

    withdrawNative(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  anySwapFeeTo(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "anySwapIn(bytes32[],address[],address[],uint256[],uint256[])"(
    txs: BytesLike[],
    tokens: string[],
    to: string[],
    amounts: BigNumberish[],
    fromChainIDs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "anySwapIn(bytes32,address,address,uint256,uint256)"(
    txs: BytesLike,
    token: string,
    to: string,
    amount: BigNumberish,
    fromChainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anySwapInAuto(
    txs: BytesLike,
    token: string,
    to: string,
    amount: BigNumberish,
    fromChainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anySwapInExactTokensForNative(
    txs: BytesLike,
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    fromChainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anySwapInExactTokensForTokens(
    txs: BytesLike,
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    fromChainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anySwapInUnderlying(
    txs: BytesLike,
    token: string,
    to: string,
    amount: BigNumberish,
    fromChainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "anySwapOut(address,address,uint256,uint256)"(
    token: string,
    to: string,
    amount: BigNumberish,
    toChainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "anySwapOut(address[],address[],uint256[],uint256[])"(
    tokens: string[],
    to: string[],
    amounts: BigNumberish[],
    toChainIDs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anySwapOutExactTokensForNative(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    toChainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anySwapOutExactTokensForNativeUnderlying(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    toChainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anySwapOutExactTokensForNativeUnderlyingWithPermit(
    from: string,
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    toChainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anySwapOutExactTokensForNativeUnderlyingWithTransferPermit(
    from: string,
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    toChainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anySwapOutExactTokensForTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    toChainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anySwapOutExactTokensForTokensUnderlying(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    toChainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anySwapOutExactTokensForTokensUnderlyingWithPermit(
    from: string,
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    toChainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anySwapOutExactTokensForTokensUnderlyingWithTransferPermit(
    from: string,
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    to: string,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    toChainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anySwapOutNative(
    token: string,
    to: string,
    toChainID: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anySwapOutUnderlying(
    token: string,
    to: string,
    amount: BigNumberish,
    toChainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anySwapOutUnderlyingWithPermit(
    from: string,
    token: string,
    to: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    toChainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  anySwapOutUnderlyingWithTransferPermit(
    from: string,
    token: string,
    to: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    toChainID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cID(overrides?: CallOverrides): Promise<BigNumber>;

  changeMPC(
    newMPC: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeVault(
    token: string,
    newVault: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositNative(
    token: string,
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getAmountIn(
    amountOut: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountOut(
    amountIn: BigNumberish,
    reserveIn: BigNumberish,
    reserveOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountsIn(
    amountOut: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAmountsOut(
    amountIn: BigNumberish,
    path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  mpc(overrides?: CallOverrides): Promise<string>;

  quote(
    amountA: BigNumberish,
    reserveA: BigNumberish,
    reserveB: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wNATIVE(overrides?: CallOverrides): Promise<string>;

  withdrawNative(
    token: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    anySwapFeeTo(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "anySwapIn(bytes32[],address[],address[],uint256[],uint256[])"(
      txs: BytesLike[],
      tokens: string[],
      to: string[],
      amounts: BigNumberish[],
      fromChainIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "anySwapIn(bytes32,address,address,uint256,uint256)"(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    anySwapInAuto(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    anySwapInExactTokensForNative(
      txs: BytesLike,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    anySwapInExactTokensForTokens(
      txs: BytesLike,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    anySwapInUnderlying(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "anySwapOut(address,address,uint256,uint256)"(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "anySwapOut(address[],address[],uint256[],uint256[])"(
      tokens: string[],
      to: string[],
      amounts: BigNumberish[],
      toChainIDs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    anySwapOutExactTokensForNative(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    anySwapOutExactTokensForNativeUnderlying(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    anySwapOutExactTokensForNativeUnderlyingWithPermit(
      from: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    anySwapOutExactTokensForNativeUnderlyingWithTransferPermit(
      from: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    anySwapOutExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    anySwapOutExactTokensForTokensUnderlying(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    anySwapOutExactTokensForTokensUnderlyingWithPermit(
      from: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    anySwapOutExactTokensForTokensUnderlyingWithTransferPermit(
      from: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    anySwapOutNative(
      token: string,
      to: string,
      toChainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    anySwapOutUnderlying(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    anySwapOutUnderlyingWithPermit(
      from: string,
      token: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    anySwapOutUnderlyingWithTransferPermit(
      from: string,
      token: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cID(overrides?: CallOverrides): Promise<BigNumber>;

    changeMPC(newMPC: string, overrides?: CallOverrides): Promise<boolean>;

    changeVault(
      token: string,
      newVault: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositNative(
      token: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    mpc(overrides?: CallOverrides): Promise<string>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wNATIVE(overrides?: CallOverrides): Promise<string>;

    withdrawNative(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "LogAnySwapIn(bytes32,address,address,uint256,uint256,uint256)"(
      txhash?: BytesLike | null,
      token?: string | null,
      to?: string | null,
      amount?: null,
      fromChainID?: null,
      toChainID?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        txhash: string;
        token: string;
        to: string;
        amount: BigNumber;
        fromChainID: BigNumber;
        toChainID: BigNumber;
      }
    >;

    LogAnySwapIn(
      txhash?: BytesLike | null,
      token?: string | null,
      to?: string | null,
      amount?: null,
      fromChainID?: null,
      toChainID?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        txhash: string;
        token: string;
        to: string;
        amount: BigNumber;
        fromChainID: BigNumber;
        toChainID: BigNumber;
      }
    >;

    "LogAnySwapOut(address,address,address,uint256,uint256,uint256)"(
      token?: string | null,
      from?: string | null,
      to?: string | null,
      amount?: null,
      fromChainID?: null,
      toChainID?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        from: string;
        to: string;
        amount: BigNumber;
        fromChainID: BigNumber;
        toChainID: BigNumber;
      }
    >;

    LogAnySwapOut(
      token?: string | null,
      from?: string | null,
      to?: string | null,
      amount?: null,
      fromChainID?: null,
      toChainID?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, BigNumber],
      {
        token: string;
        from: string;
        to: string;
        amount: BigNumber;
        fromChainID: BigNumber;
        toChainID: BigNumber;
      }
    >;

    "LogAnySwapTradeTokensForNative(address[],address,address,uint256,uint256,uint256,uint256)"(
      path?: null,
      from?: string | null,
      to?: string | null,
      amountIn?: null,
      amountOutMin?: null,
      fromChainID?: null,
      toChainID?: null
    ): TypedEventFilter<
      [string[], string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        path: string[];
        from: string;
        to: string;
        amountIn: BigNumber;
        amountOutMin: BigNumber;
        fromChainID: BigNumber;
        toChainID: BigNumber;
      }
    >;

    LogAnySwapTradeTokensForNative(
      path?: null,
      from?: string | null,
      to?: string | null,
      amountIn?: null,
      amountOutMin?: null,
      fromChainID?: null,
      toChainID?: null
    ): TypedEventFilter<
      [string[], string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        path: string[];
        from: string;
        to: string;
        amountIn: BigNumber;
        amountOutMin: BigNumber;
        fromChainID: BigNumber;
        toChainID: BigNumber;
      }
    >;

    "LogAnySwapTradeTokensForTokens(address[],address,address,uint256,uint256,uint256,uint256)"(
      path?: null,
      from?: string | null,
      to?: string | null,
      amountIn?: null,
      amountOutMin?: null,
      fromChainID?: null,
      toChainID?: null
    ): TypedEventFilter<
      [string[], string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        path: string[];
        from: string;
        to: string;
        amountIn: BigNumber;
        amountOutMin: BigNumber;
        fromChainID: BigNumber;
        toChainID: BigNumber;
      }
    >;

    LogAnySwapTradeTokensForTokens(
      path?: null,
      from?: string | null,
      to?: string | null,
      amountIn?: null,
      amountOutMin?: null,
      fromChainID?: null,
      toChainID?: null
    ): TypedEventFilter<
      [string[], string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        path: string[];
        from: string;
        to: string;
        amountIn: BigNumber;
        amountOutMin: BigNumber;
        fromChainID: BigNumber;
        toChainID: BigNumber;
      }
    >;

    "LogChangeMPC(address,address,uint256,uint256)"(
      oldMPC?: string | null,
      newMPC?: string | null,
      effectiveTime?: BigNumberish | null,
      chainID?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        oldMPC: string;
        newMPC: string;
        effectiveTime: BigNumber;
        chainID: BigNumber;
      }
    >;

    LogChangeMPC(
      oldMPC?: string | null,
      newMPC?: string | null,
      effectiveTime?: BigNumberish | null,
      chainID?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        oldMPC: string;
        newMPC: string;
        effectiveTime: BigNumber;
        chainID: BigNumber;
      }
    >;

    "LogChangeRouter(address,address,uint256)"(
      oldRouter?: string | null,
      newRouter?: string | null,
      chainID?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { oldRouter: string; newRouter: string; chainID: BigNumber }
    >;

    LogChangeRouter(
      oldRouter?: string | null,
      newRouter?: string | null,
      chainID?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { oldRouter: string; newRouter: string; chainID: BigNumber }
    >;
  };

  estimateGas: {
    anySwapFeeTo(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "anySwapIn(bytes32[],address[],address[],uint256[],uint256[])"(
      txs: BytesLike[],
      tokens: string[],
      to: string[],
      amounts: BigNumberish[],
      fromChainIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "anySwapIn(bytes32,address,address,uint256,uint256)"(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anySwapInAuto(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anySwapInExactTokensForNative(
      txs: BytesLike,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anySwapInExactTokensForTokens(
      txs: BytesLike,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anySwapInUnderlying(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "anySwapOut(address,address,uint256,uint256)"(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "anySwapOut(address[],address[],uint256[],uint256[])"(
      tokens: string[],
      to: string[],
      amounts: BigNumberish[],
      toChainIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anySwapOutExactTokensForNative(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anySwapOutExactTokensForNativeUnderlying(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anySwapOutExactTokensForNativeUnderlyingWithPermit(
      from: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anySwapOutExactTokensForNativeUnderlyingWithTransferPermit(
      from: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anySwapOutExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anySwapOutExactTokensForTokensUnderlying(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anySwapOutExactTokensForTokensUnderlyingWithPermit(
      from: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anySwapOutExactTokensForTokensUnderlyingWithTransferPermit(
      from: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anySwapOutNative(
      token: string,
      to: string,
      toChainID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anySwapOutUnderlying(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anySwapOutUnderlyingWithPermit(
      from: string,
      token: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    anySwapOutUnderlyingWithTransferPermit(
      from: string,
      token: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cID(overrides?: CallOverrides): Promise<BigNumber>;

    changeMPC(
      newMPC: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeVault(
      token: string,
      newVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositNative(
      token: string,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mpc(overrides?: CallOverrides): Promise<BigNumber>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wNATIVE(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawNative(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    anySwapFeeTo(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "anySwapIn(bytes32[],address[],address[],uint256[],uint256[])"(
      txs: BytesLike[],
      tokens: string[],
      to: string[],
      amounts: BigNumberish[],
      fromChainIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "anySwapIn(bytes32,address,address,uint256,uint256)"(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anySwapInAuto(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anySwapInExactTokensForNative(
      txs: BytesLike,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anySwapInExactTokensForTokens(
      txs: BytesLike,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anySwapInUnderlying(
      txs: BytesLike,
      token: string,
      to: string,
      amount: BigNumberish,
      fromChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "anySwapOut(address,address,uint256,uint256)"(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "anySwapOut(address[],address[],uint256[],uint256[])"(
      tokens: string[],
      to: string[],
      amounts: BigNumberish[],
      toChainIDs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anySwapOutExactTokensForNative(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anySwapOutExactTokensForNativeUnderlying(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anySwapOutExactTokensForNativeUnderlyingWithPermit(
      from: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anySwapOutExactTokensForNativeUnderlyingWithTransferPermit(
      from: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anySwapOutExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anySwapOutExactTokensForTokensUnderlying(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anySwapOutExactTokensForTokensUnderlyingWithPermit(
      from: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anySwapOutExactTokensForTokensUnderlyingWithTransferPermit(
      from: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      to: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anySwapOutNative(
      token: string,
      to: string,
      toChainID: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anySwapOutUnderlying(
      token: string,
      to: string,
      amount: BigNumberish,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anySwapOutUnderlyingWithPermit(
      from: string,
      token: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    anySwapOutUnderlyingWithTransferPermit(
      from: string,
      token: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      toChainID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeMPC(
      newMPC: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeVault(
      token: string,
      newVault: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositNative(
      token: string,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountIn(
      amountOut: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      amountIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsIn(
      amountOut: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsOut(
      amountIn: BigNumberish,
      path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mpc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quote(
      amountA: BigNumberish,
      reserveA: BigNumberish,
      reserveB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wNATIVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawNative(
      token: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
